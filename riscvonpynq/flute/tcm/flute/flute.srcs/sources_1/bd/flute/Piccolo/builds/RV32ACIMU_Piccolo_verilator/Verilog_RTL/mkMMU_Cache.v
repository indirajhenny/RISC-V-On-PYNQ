//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Thu Jan 10 21:58:09 EST 2019
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    32 reg
// word64                         O    64
// st_amo_val                     O    64
// exc                            O     1
// exc_code                       O     4 reg
// RDY_server_flush_request_put   O     1 reg
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1 const
// mem_master_awvalid             O     1
// mem_master_awaddr              O    64 reg
// mem_master_awprot              O     3 reg
// mem_master_wvalid              O     1
// mem_master_wdata               O    64 reg
// mem_master_wstrb               O     8 reg
// mem_master_bready              O     1
// mem_master_arvalid             O     1
// mem_master_araddr              O    64 reg
// mem_master_arprot              O     3 reg
// mem_master_rready              O     1
// near_mem_io_client_request_get  O   137 reg
// RDY_near_mem_io_client_request_get  O     1 reg
// RDY_near_mem_io_client_response_put  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     2
// req_f3                         I     3
// req_amo_funct7                 I     7 reg
// req_addr                       I    32
// req_st_value                   I    64
// req_priv                       I     2 unused
// req_sstatus_SUM                I     1 unused
// req_mstatus_MXR                I     1 unused
// req_satp                       I    32 unused
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bvalid              I     1
// mem_master_bresp               I     2 reg
// mem_master_arready             I     1
// mem_master_rvalid              I     1
// mem_master_rresp               I     2 reg
// mem_master_rdata               I    64 reg
// near_mem_io_client_response_put  I    66 reg
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1 unused
// EN_near_mem_io_client_response_put  I     1
// EN_near_mem_io_client_request_get  I     1
//
// Combinational paths from inputs to outputs:
//   (mem_master_awready, mem_master_wready) -> valid
//   (mem_master_awready, mem_master_wready) -> word64
//   (mem_master_awready, mem_master_wready) -> st_amo_val
//   (mem_master_awready, mem_master_wready) -> mem_master_bready
//   (mem_master_awready, mem_master_wready, EN_req) -> mem_master_rready
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_Cache(CLK,
		   RST_N,

		   set_verbosity_verbosity,
		   EN_set_verbosity,
		   RDY_set_verbosity,

		   EN_server_reset_request_put,
		   RDY_server_reset_request_put,

		   EN_server_reset_response_get,
		   RDY_server_reset_response_get,

		   req_op,
		   req_f3,
		   req_amo_funct7,
		   req_addr,
		   req_st_value,
		   req_priv,
		   req_sstatus_SUM,
		   req_mstatus_MXR,
		   req_satp,
		   EN_req,

		   valid,

		   addr,

		   word64,

		   st_amo_val,

		   exc,

		   exc_code,

		   EN_server_flush_request_put,
		   RDY_server_flush_request_put,

		   EN_server_flush_response_get,
		   RDY_server_flush_response_get,

		   EN_tlb_flush,
		   RDY_tlb_flush,

		   mem_master_awvalid,

		   mem_master_awaddr,

		   mem_master_awprot,

		   mem_master_awready,

		   mem_master_wvalid,

		   mem_master_wdata,

		   mem_master_wstrb,

		   mem_master_wready,

		   mem_master_bvalid,
		   mem_master_bresp,

		   mem_master_bready,

		   mem_master_arvalid,

		   mem_master_araddr,

		   mem_master_arprot,

		   mem_master_arready,

		   mem_master_rvalid,
		   mem_master_rresp,
		   mem_master_rdata,

		   mem_master_rready,

		   EN_near_mem_io_client_request_get,
		   near_mem_io_client_request_get,
		   RDY_near_mem_io_client_request_get,

		   near_mem_io_client_response_put,
		   EN_near_mem_io_client_response_put,
		   RDY_near_mem_io_client_response_put);
  parameter [0 : 0] dmem_not_imem = 1'b0;
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [1 : 0] req_op;
  input  [2 : 0] req_f3;
  input  [6 : 0] req_amo_funct7;
  input  [31 : 0] req_addr;
  input  [63 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [31 : 0] req_satp;
  input  EN_req;

  // value method valid
  output valid;

  // value method addr
  output [31 : 0] addr;

  // value method word64
  output [63 : 0] word64;

  // value method st_amo_val
  output [63 : 0] st_amo_val;

  // value method exc
  output exc;

  // value method exc_code
  output [3 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_m_awvalid
  output mem_master_awvalid;

  // value method mem_master_m_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_m_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_m_awuser

  // action method mem_master_m_awready
  input  mem_master_awready;

  // value method mem_master_m_wvalid
  output mem_master_wvalid;

  // value method mem_master_m_wdata
  output [63 : 0] mem_master_wdata;

  // value method mem_master_m_wstrb
  output [7 : 0] mem_master_wstrb;

  // action method mem_master_m_wready
  input  mem_master_wready;

  // action method mem_master_m_bvalid
  input  mem_master_bvalid;
  input  [1 : 0] mem_master_bresp;

  // value method mem_master_m_bready
  output mem_master_bready;

  // value method mem_master_m_arvalid
  output mem_master_arvalid;

  // value method mem_master_m_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_m_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_m_aruser

  // action method mem_master_m_arready
  input  mem_master_arready;

  // action method mem_master_m_rvalid
  input  mem_master_rvalid;
  input  [1 : 0] mem_master_rresp;
  input  [63 : 0] mem_master_rdata;

  // value method mem_master_m_rready
  output mem_master_rready;

  // actionvalue method near_mem_io_client_request_get
  input  EN_near_mem_io_client_request_get;
  output [136 : 0] near_mem_io_client_request_get;
  output RDY_near_mem_io_client_request_get;

  // action method near_mem_io_client_response_put
  input  [65 : 0] near_mem_io_client_response_put;
  input  EN_near_mem_io_client_response_put;
  output RDY_near_mem_io_client_response_put;

  // signals for module outputs
  reg [63 : 0] word64;
  wire [136 : 0] near_mem_io_client_request_get;
  wire [63 : 0] mem_master_araddr,
		mem_master_awaddr,
		mem_master_wdata,
		st_amo_val;
  wire [31 : 0] addr;
  wire [7 : 0] mem_master_wstrb;
  wire [3 : 0] exc_code;
  wire [2 : 0] mem_master_arprot, mem_master_awprot;
  wire RDY_near_mem_io_client_request_get,
       RDY_near_mem_io_client_response_put,
       RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       exc,
       mem_master_arvalid,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wvalid,
       valid;

  // inlined wires
  reg [3 : 0] ctr_wr_rsps_pending_crg$port0__write_1;
  wire [3 : 0] ctr_wr_rsps_pending_crg$port1__write_1,
	       ctr_wr_rsps_pending_crg$port2__read,
	       ctr_wr_rsps_pending_crg$port3__read;
  wire ctr_wr_rsps_pending_crg$EN_port0__write,
       ctr_wr_rsps_pending_crg$EN_port2__write,
       dw_valid$whas,
       master_xactor_crg_rd_addr_full$EN_port0__write,
       master_xactor_crg_rd_addr_full$EN_port1__write,
       master_xactor_crg_rd_addr_full$EN_port2__write,
       master_xactor_crg_rd_addr_full$port1__read,
       master_xactor_crg_rd_addr_full$port2__read,
       master_xactor_crg_rd_addr_full$port3__read,
       master_xactor_crg_rd_data_full$EN_port0__write,
       master_xactor_crg_rd_data_full$EN_port1__write,
       master_xactor_crg_rd_data_full$EN_port2__write,
       master_xactor_crg_rd_data_full$port1__read,
       master_xactor_crg_rd_data_full$port2__read,
       master_xactor_crg_rd_data_full$port3__read,
       master_xactor_crg_wr_addr_full$EN_port0__write,
       master_xactor_crg_wr_addr_full$EN_port1__write,
       master_xactor_crg_wr_addr_full$EN_port2__write,
       master_xactor_crg_wr_addr_full$port1__read,
       master_xactor_crg_wr_addr_full$port2__read,
       master_xactor_crg_wr_addr_full$port3__read,
       master_xactor_crg_wr_data_full$EN_port0__write,
       master_xactor_crg_wr_data_full$EN_port1__write,
       master_xactor_crg_wr_data_full$EN_port2__write,
       master_xactor_crg_wr_data_full$port1__read,
       master_xactor_crg_wr_data_full$port2__read,
       master_xactor_crg_wr_data_full$port3__read,
       master_xactor_crg_wr_resp_full$EN_port0__write,
       master_xactor_crg_wr_resp_full$EN_port2__write,
       master_xactor_crg_wr_resp_full$port1__read,
       master_xactor_crg_wr_resp_full$port2__read,
       master_xactor_crg_wr_resp_full$port3__read;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register ctr_wr_rsps_pending_crg
  reg [3 : 0] ctr_wr_rsps_pending_crg;
  wire [3 : 0] ctr_wr_rsps_pending_crg$D_IN;
  wire ctr_wr_rsps_pending_crg$EN;

  // register master_xactor_crg_rd_addr_full
  reg master_xactor_crg_rd_addr_full;
  wire master_xactor_crg_rd_addr_full$D_IN, master_xactor_crg_rd_addr_full$EN;

  // register master_xactor_crg_rd_data_full
  reg master_xactor_crg_rd_data_full;
  wire master_xactor_crg_rd_data_full$D_IN, master_xactor_crg_rd_data_full$EN;

  // register master_xactor_crg_wr_addr_full
  reg master_xactor_crg_wr_addr_full;
  wire master_xactor_crg_wr_addr_full$D_IN, master_xactor_crg_wr_addr_full$EN;

  // register master_xactor_crg_wr_data_full
  reg master_xactor_crg_wr_data_full;
  wire master_xactor_crg_wr_data_full$D_IN, master_xactor_crg_wr_data_full$EN;

  // register master_xactor_crg_wr_resp_full
  reg master_xactor_crg_wr_resp_full;
  wire master_xactor_crg_wr_resp_full$D_IN, master_xactor_crg_wr_resp_full$EN;

  // register master_xactor_rg_rd_addr
  reg [66 : 0] master_xactor_rg_rd_addr;
  reg [66 : 0] master_xactor_rg_rd_addr$D_IN;
  wire master_xactor_rg_rd_addr$EN;

  // register master_xactor_rg_rd_data
  reg [65 : 0] master_xactor_rg_rd_data;
  wire [65 : 0] master_xactor_rg_rd_data$D_IN;
  wire master_xactor_rg_rd_data$EN;

  // register master_xactor_rg_wr_addr
  reg [66 : 0] master_xactor_rg_wr_addr;
  reg [66 : 0] master_xactor_rg_wr_addr$D_IN;
  wire master_xactor_rg_wr_addr$EN;

  // register master_xactor_rg_wr_data
  reg [71 : 0] master_xactor_rg_wr_data;
  reg [71 : 0] master_xactor_rg_wr_data$D_IN;
  wire master_xactor_rg_wr_data$EN;

  // register master_xactor_rg_wr_resp
  reg [1 : 0] master_xactor_rg_wr_resp;
  wire [1 : 0] master_xactor_rg_wr_resp$D_IN;
  wire master_xactor_rg_wr_resp$EN;

  // register rg_addr
  reg [31 : 0] rg_addr;
  wire [31 : 0] rg_addr$D_IN;
  wire rg_addr$EN;

  // register rg_amo_funct7
  reg [6 : 0] rg_amo_funct7;
  wire [6 : 0] rg_amo_funct7$D_IN;
  wire rg_amo_funct7$EN;

  // register rg_cset_in_cache
  reg [6 : 0] rg_cset_in_cache;
  wire [6 : 0] rg_cset_in_cache$D_IN;
  wire rg_cset_in_cache$EN;

  // register rg_error_during_refill
  reg rg_error_during_refill;
  wire rg_error_during_refill$D_IN, rg_error_during_refill$EN;

  // register rg_exc_code
  reg [3 : 0] rg_exc_code;
  reg [3 : 0] rg_exc_code$D_IN;
  wire rg_exc_code$EN;

  // register rg_f3
  reg [2 : 0] rg_f3;
  wire [2 : 0] rg_f3$D_IN;
  wire rg_f3$EN;

  // register rg_ld_val
  reg [63 : 0] rg_ld_val;
  reg [63 : 0] rg_ld_val$D_IN;
  wire rg_ld_val$EN;

  // register rg_lower_word32
  reg [31 : 0] rg_lower_word32;
  wire [31 : 0] rg_lower_word32$D_IN;
  wire rg_lower_word32$EN;

  // register rg_lower_word32_full
  reg rg_lower_word32_full;
  wire rg_lower_word32_full$D_IN, rg_lower_word32_full$EN;

  // register rg_lrsc_pa
  reg [31 : 0] rg_lrsc_pa;
  wire [31 : 0] rg_lrsc_pa$D_IN;
  wire rg_lrsc_pa$EN;

  // register rg_lrsc_valid
  reg rg_lrsc_valid;
  wire rg_lrsc_valid$D_IN, rg_lrsc_valid$EN;

  // register rg_op
  reg [1 : 0] rg_op;
  wire [1 : 0] rg_op$D_IN;
  wire rg_op$EN;

  // register rg_pa
  reg [31 : 0] rg_pa;
  wire [31 : 0] rg_pa$D_IN;
  wire rg_pa$EN;

  // register rg_pte_pa
  reg [31 : 0] rg_pte_pa;
  wire [31 : 0] rg_pte_pa$D_IN;
  wire rg_pte_pa$EN;

  // register rg_req_byte_in_cline
  reg [63 : 0] rg_req_byte_in_cline;
  wire [63 : 0] rg_req_byte_in_cline$D_IN;
  wire rg_req_byte_in_cline$EN;

  // register rg_requesting_cline
  reg rg_requesting_cline;
  reg rg_requesting_cline$D_IN;
  wire rg_requesting_cline$EN;

  // register rg_st_amo_val
  reg [63 : 0] rg_st_amo_val;
  wire [63 : 0] rg_st_amo_val$D_IN;
  wire rg_st_amo_val$EN;

  // register rg_state
  reg [3 : 0] rg_state;
  reg [3 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_word64_set_in_cache
  reg [8 : 0] rg_word64_set_in_cache;
  wire [8 : 0] rg_word64_set_in_cache$D_IN;
  wire rg_word64_set_in_cache$EN;

  // ports of submodule f_near_mem_io_reqs
  wire [136 : 0] f_near_mem_io_reqs$D_IN, f_near_mem_io_reqs$D_OUT;
  wire f_near_mem_io_reqs$CLR,
       f_near_mem_io_reqs$DEQ,
       f_near_mem_io_reqs$EMPTY_N,
       f_near_mem_io_reqs$ENQ,
       f_near_mem_io_reqs$FULL_N;

  // ports of submodule f_near_mem_io_rsps
  wire [65 : 0] f_near_mem_io_rsps$D_IN, f_near_mem_io_rsps$D_OUT;
  wire f_near_mem_io_rsps$CLR,
       f_near_mem_io_rsps$DEQ,
       f_near_mem_io_rsps$EMPTY_N,
       f_near_mem_io_rsps$ENQ,
       f_near_mem_io_rsps$FULL_N;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule ram_state_and_ctag_cset
  wire [22 : 0] ram_state_and_ctag_cset$DIA,
		ram_state_and_ctag_cset$DIB,
		ram_state_and_ctag_cset$DOB;
  wire [6 : 0] ram_state_and_ctag_cset$ADDRA, ram_state_and_ctag_cset$ADDRB;
  wire ram_state_and_ctag_cset$ENA,
       ram_state_and_ctag_cset$ENB,
       ram_state_and_ctag_cset$WEA,
       ram_state_and_ctag_cset$WEB;

  // ports of submodule ram_word64_set
  reg [63 : 0] ram_word64_set$DIB;
  reg [8 : 0] ram_word64_set$ADDRB;
  wire [63 : 0] ram_word64_set$DIA, ram_word64_set$DOB;
  wire [8 : 0] ram_word64_set$ADDRA;
  wire ram_word64_set$ENA,
       ram_word64_set$ENB,
       ram_word64_set$WEA,
       ram_word64_set$WEB;

  // ports of submodule soc_map
  wire [63 : 0] soc_map$m_is_IO_addr_addr, soc_map$m_is_near_mem_IO_addr_addr;
  wire soc_map$m_is_IO_addr, soc_map$m_is_near_mem_IO_addr;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_ST_AMO_response,
       CAN_FIRE_RL_rl_cache_refill_req_loop,
       CAN_FIRE_RL_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_rl_discard_write_rsp,
       CAN_FIRE_RL_rl_drive_exception_rsp,
       CAN_FIRE_RL_rl_io_AMO_SC_req,
       CAN_FIRE_RL_rl_io_AMO_op_req,
       CAN_FIRE_RL_rl_io_AMO_read_rsp,
       CAN_FIRE_RL_rl_io_near_mem_read_req,
       CAN_FIRE_RL_rl_io_near_mem_read_rsp,
       CAN_FIRE_RL_rl_io_near_mem_write_req,
       CAN_FIRE_RL_rl_io_near_mem_write_rsp,
       CAN_FIRE_RL_rl_io_read_req,
       CAN_FIRE_RL_rl_io_read_rsp,
       CAN_FIRE_RL_rl_io_write_req,
       CAN_FIRE_RL_rl_maintain_io_read_rsp,
       CAN_FIRE_RL_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_rl_rereq,
       CAN_FIRE_RL_rl_reset,
       CAN_FIRE_RL_rl_start_cache_refill,
       CAN_FIRE_RL_rl_start_reset,
       CAN_FIRE_mem_master_m_arready,
       CAN_FIRE_mem_master_m_awready,
       CAN_FIRE_mem_master_m_bvalid,
       CAN_FIRE_mem_master_m_rvalid,
       CAN_FIRE_mem_master_m_wready,
       CAN_FIRE_near_mem_io_client_request_get,
       CAN_FIRE_near_mem_io_client_response_put,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_rl_ST_AMO_response,
       WILL_FIRE_RL_rl_cache_refill_req_loop,
       WILL_FIRE_RL_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_rl_discard_write_rsp,
       WILL_FIRE_RL_rl_drive_exception_rsp,
       WILL_FIRE_RL_rl_io_AMO_SC_req,
       WILL_FIRE_RL_rl_io_AMO_op_req,
       WILL_FIRE_RL_rl_io_AMO_read_rsp,
       WILL_FIRE_RL_rl_io_near_mem_read_req,
       WILL_FIRE_RL_rl_io_near_mem_read_rsp,
       WILL_FIRE_RL_rl_io_near_mem_write_req,
       WILL_FIRE_RL_rl_io_near_mem_write_rsp,
       WILL_FIRE_RL_rl_io_read_req,
       WILL_FIRE_RL_rl_io_read_rsp,
       WILL_FIRE_RL_rl_io_write_req,
       WILL_FIRE_RL_rl_maintain_io_read_rsp,
       WILL_FIRE_RL_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_rl_rereq,
       WILL_FIRE_RL_rl_reset,
       WILL_FIRE_RL_rl_start_cache_refill,
       WILL_FIRE_RL_rl_start_reset,
       WILL_FIRE_mem_master_m_arready,
       WILL_FIRE_mem_master_m_awready,
       WILL_FIRE_mem_master_m_bvalid,
       WILL_FIRE_mem_master_m_rvalid,
       WILL_FIRE_mem_master_m_wready,
       WILL_FIRE_near_mem_io_client_request_get,
       WILL_FIRE_near_mem_io_client_response_put,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  reg [63 : 0] MUX_dw_output_ld_val$wset_1__VAL_1,
	       MUX_dw_output_ld_val$wset_1__VAL_2,
	       MUX_dw_output_ld_val$wset_1__VAL_3,
	       MUX_dw_output_ld_val$wset_1__VAL_6;
  wire [136 : 0] MUX_f_near_mem_io_reqs$enq_1__VAL_1,
		 MUX_f_near_mem_io_reqs$enq_1__VAL_2;
  wire [71 : 0] MUX_master_xactor_rg_wr_data$write_1__VAL_1,
		MUX_master_xactor_rg_wr_data$write_1__VAL_2,
		MUX_master_xactor_rg_wr_data$write_1__VAL_3;
  wire [66 : 0] MUX_master_xactor_rg_rd_addr$write_1__VAL_1,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_2,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_3,
		MUX_master_xactor_rg_wr_addr$write_1__VAL_1,
		MUX_master_xactor_rg_wr_addr$write_1__VAL_2;
  wire [63 : 0] MUX_dw_output_ld_val$wset_1__VAL_4,
		MUX_ram_word64_set$a_put_3__VAL_2,
		MUX_rg_ld_val$write_1__VAL_2,
		MUX_rg_req_byte_in_cline$write_1__VAL_1;
  wire [22 : 0] MUX_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire [8 : 0] MUX_ram_word64_set$b_put_2__VAL_2,
	       MUX_ram_word64_set$b_put_2__VAL_4;
  wire [6 : 0] MUX_rg_cset_in_cache$write_1__VAL_1;
  wire [3 : 0] MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1,
	       MUX_rg_exc_code$write_1__VAL_1,
	       MUX_rg_state$write_1__VAL_13,
	       MUX_rg_state$write_1__VAL_2,
	       MUX_rg_state$write_1__VAL_3,
	       MUX_rg_state$write_1__VAL_8,
	       MUX_rg_state$write_1__VAL_9;
  wire MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1,
       MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2,
       MUX_dw_output_ld_val$wset_1__SEL_1,
       MUX_dw_output_ld_val$wset_1__SEL_3,
       MUX_dw_output_ld_val$wset_1__SEL_4,
       MUX_master_xactor_rg_rd_addr$write_1__SEL_1,
       MUX_ram_state_and_ctag_cset$b_put_1__SEL_1,
       MUX_ram_word64_set$a_put_1__SEL_1,
       MUX_ram_word64_set$b_put_1__SEL_2,
       MUX_rg_error_during_refill$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_2,
       MUX_rg_exc_code$write_1__SEL_3,
       MUX_rg_exc_code$write_1__SEL_5,
       MUX_rg_ld_val$write_1__SEL_2,
       MUX_rg_lrsc_valid$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_16,
       MUX_rg_state$write_1__SEL_3,
       MUX_rg_state$write_1__SEL_8,
       MUX_rg_state$write_1__SEL_9;

  // remaining internal signals
  reg [63 : 0] CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q38,
	       CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q44,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result2519_0x4_re_ETC__q35,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result4041_0x4_re_ETC__q39,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d213,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d235,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d247,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d772,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d789,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d796,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d196,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d226,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d757,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d782,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d334,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d343,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d408,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d417,
	       IF_rg_f3_30_EQ_0b0_31_THEN_IF_rg_addr_7_BITS_2_ETC___d352,
	       IF_rg_f3_30_EQ_0b0_31_THEN_IF_rg_addr_7_BITS_2_ETC___d426,
	       IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_IF_rg_f3_30_E_ETC___d294,
	       _theResult_____2__h13519,
	       _theResult_____2__h27771,
	       io_req_wr_data_wdata__h27635,
	       mem_req_wr_data_wdata__h18803,
	       mem_req_wr_data_wdata__h19561,
	       new_ld_val__h27408,
	       new_value__h17673,
	       new_value__h5404,
	       value__h26681,
	       w1__h13511,
	       w1__h27759,
	       w1__h27763;
  reg [31 : 0] v__h12692,
	       v__h12698,
	       v__h18576,
	       v__h18582,
	       v__h19143,
	       v__h19149,
	       v__h19870,
	       v__h19876,
	       v__h21155,
	       v__h21161,
	       v__h21375,
	       v__h21381,
	       v__h21525,
	       v__h21531,
	       v__h21771,
	       v__h21777,
	       v__h23548,
	       v__h23554,
	       v__h23714,
	       v__h23720,
	       v__h24113,
	       v__h24119,
	       v__h24220,
	       v__h24226,
	       v__h24453,
	       v__h24459,
	       v__h24638,
	       v__h24644,
	       v__h25040,
	       v__h25046,
	       v__h25147,
	       v__h25153,
	       v__h25428,
	       v__h25434,
	       v__h25950,
	       v__h25956,
	       v__h26095,
	       v__h26101,
	       v__h26615,
	       v__h26621,
	       v__h26757,
	       v__h26763,
	       v__h26937,
	       v__h26943,
	       v__h27143,
	       v__h27149,
	       v__h27275,
	       v__h27281,
	       v__h27556,
	       v__h27562,
	       v__h29055,
	       v__h29061,
	       v__h29405,
	       v__h29411,
	       v__h29521,
	       v__h29527,
	       v__h30103,
	       v__h30109,
	       v__h30142,
	       v__h30148,
	       v__h30530,
	       v__h30536,
	       v__h3567,
	       v__h3573,
	       v__h3932,
	       v__h3938,
	       v__h4033,
	       v__h4039,
	       v__h4182,
	       v__h4188;
  reg [7 : 0] io_req_wr_data_wstrb__h27636, mem_req_wr_data_wstrb__h19562;
  wire [63 : 0] IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_1_EL_ETC___d263,
		IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_mast_ETC___d797,
		IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d249,
		IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_rg_st_amo_val_ETC___d358,
		IF_rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_ETC___d447,
		_theResult___fst__h18921,
		_theResult___fst__h19679,
		_theResult___fst__h26404,
		_theResult___fst__h27753,
		cline_fabric_addr__h21215,
		fabric_addr__h27023,
		io_req_wr_addr_awaddr__h27476,
		mem_req_wr_addr_awaddr__h19474,
		new_st_val__h13523,
		new_st_val__h13615,
		new_st_val__h14595,
		new_st_val__h14599,
		new_st_val__h14603,
		new_st_val__h14607,
		new_st_val__h14612,
		new_st_val__h14618,
		new_st_val__h14623,
		new_st_val__h27775,
		new_st_val__h27866,
		new_st_val__h28820,
		new_st_val__h28824,
		new_st_val__h28828,
		new_st_val__h28832,
		new_st_val__h28837,
		new_st_val__h28843,
		new_st_val__h28848,
		new_st_val__h5344,
		result__h11815,
		result__h11843,
		result__h11871,
		result__h11899,
		result__h11927,
		result__h11955,
		result__h11983,
		result__h12028,
		result__h12056,
		result__h12084,
		result__h12112,
		result__h12140,
		result__h12168,
		result__h12196,
		result__h12224,
		result__h12269,
		result__h12297,
		result__h12325,
		result__h12353,
		result__h12394,
		result__h12422,
		result__h12450,
		result__h12478,
		result__h12519,
		result__h12547,
		result__h12586,
		result__h12614,
		result__h23936,
		result__h23963,
		result__h23989,
		result__h24015,
		result__h24041,
		result__h24067,
		result__h24863,
		result__h24890,
		result__h24916,
		result__h24942,
		result__h24968,
		result__h24994,
		result__h25246,
		result__h25273,
		result__h25300,
		result__h25327,
		result__h25354,
		result__h25381,
		result__h27983,
		result__h28010,
		result__h28037,
		result__h28064,
		result__h28091,
		result__h28118,
		result__h28145,
		result__h28216,
		result__h28243,
		result__h28270,
		result__h28297,
		result__h28324,
		result__h28351,
		result__h28378,
		result__h28449,
		result__h28476,
		result__h28503,
		result__h28570,
		result__h28597,
		result__h28624,
		result__h28691,
		result__h28756,
		result__h29220,
		result__h29250,
		result__h29277,
		result__h29304,
		result__h29331,
		result__h29358,
		result__h5459,
		w1___1__h13582,
		w1___1__h27834,
		w2___1__h27835,
		w2__h27765,
		word64__h27481,
		word64__h5182,
		x__h13085,
		y__h5495;
  wire [31 : 0] cline_addr__h21214,
		f_near_mem_io_rspsD_OUT_BITS_31_TO_0__q19,
		master_xactor_rg_rd_data_BITS_31_TO_0__q3,
		master_xactor_rg_rd_data_BITS_63_TO_32__q10,
		new_ld_val7408_BITS_31_TO_0__q43,
		new_value404_BITS_31_TO_0__q36,
		rg_ld_val_BITS_31_TO_0__q20,
		rg_st_amo_val_BITS_31_TO_0__q37,
		w17759_BITS_31_TO_0__q40,
		word64182_BITS_31_TO_0__q23,
		word64182_BITS_63_TO_32__q30,
		x__h19498,
		x__h27501;
  wire [21 : 0] pa_ctag__h5040;
  wire [15 : 0] f_near_mem_io_rspsD_OUT_BITS_15_TO_0__q17,
		master_xactor_rg_rd_data_BITS_15_TO_0__q2,
		master_xactor_rg_rd_data_BITS_31_TO_16__q6,
		master_xactor_rg_rd_data_BITS_47_TO_32__q9,
		master_xactor_rg_rd_data_BITS_63_TO_48__q13,
		new_ld_val7408_BITS_15_TO_0__q42,
		rg_ld_val_BITS_15_TO_0__q18,
		word64182_BITS_15_TO_0__q22,
		word64182_BITS_31_TO_16__q26,
		word64182_BITS_47_TO_32__q29,
		word64182_BITS_63_TO_48__q33;
  wire [7 : 0] f_near_mem_io_rspsD_OUT_BITS_7_TO_0__q15,
	       master_xactor_rg_rd_data_BITS_15_TO_8__q4,
	       master_xactor_rg_rd_data_BITS_23_TO_16__q5,
	       master_xactor_rg_rd_data_BITS_31_TO_24__q7,
	       master_xactor_rg_rd_data_BITS_39_TO_32__q8,
	       master_xactor_rg_rd_data_BITS_47_TO_40__q11,
	       master_xactor_rg_rd_data_BITS_55_TO_48__q12,
	       master_xactor_rg_rd_data_BITS_63_TO_56__q14,
	       master_xactor_rg_rd_data_BITS_7_TO_0__q1,
	       new_ld_val7408_BITS_7_TO_0__q41,
	       rg_ld_val_BITS_7_TO_0__q16,
	       strobe64__h19678,
	       strobe64__h19721,
	       strobe64__h19744,
	       strobe64__h27752,
	       strobe64__h28906,
	       strobe64__h28929,
	       word64182_BITS_15_TO_8__q24,
	       word64182_BITS_23_TO_16__q25,
	       word64182_BITS_31_TO_24__q27,
	       word64182_BITS_39_TO_32__q28,
	       word64182_BITS_47_TO_40__q31,
	       word64182_BITS_55_TO_48__q32,
	       word64182_BITS_63_TO_56__q34,
	       word64182_BITS_7_TO_0__q21;
  wire [5 : 0] shift_bits__h19481, shift_bits__h27484;
  wire [3 : 0] IF_rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_ETC___d103,
	       IF_rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_ETC___d102,
	       access_exc_code__h3108,
	       b__h20504;
  wire IF_rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_ETC___d75,
       NOT_cfg_verbosity_read__0_ULE_1_1___d12,
       NOT_cfg_verbosity_read__0_ULE_2_41___d542,
       NOT_ram_state_and_ctag_cset_b_read__5_BIT_22_6_ETC___d111,
       NOT_req_f3_BITS_1_TO_0_09_EQ_0b0_10_11_AND_NOT_ETC___d930,
       NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d430,
       NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d475,
       NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d484,
       NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d490,
       NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d98,
       NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d120,
       NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d298,
       NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d498,
       NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d502,
       NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d508,
       NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d513,
       NOT_rg_op_0_EQ_2_2_0_OR_NOT_rg_amo_funct7_3_BI_ETC___d296,
       NOT_rg_op_0_EQ_2_2_0_OR_NOT_rg_amo_funct7_3_BI_ETC___d473,
       NOT_rg_op_0_EQ_2_2_0_OR_NOT_rg_amo_funct7_3_BI_ETC___d477,
       NOT_rg_op_0_EQ_2_2_0_OR_NOT_rg_amo_funct7_3_BI_ETC___d482,
       NOT_rg_op_0_EQ_2_2_0_OR_NOT_rg_amo_funct7_3_BI_ETC___d488,
       NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d290,
       NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d301,
       NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d504,
       NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d512,
       NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d515,
       lrsc_result__h13075,
       master_xactor_crg_rd_data_full_port1__read__45_ETC___d731,
       ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71,
       ram_state_and_ctag_cset_b_read__5_BIT_22_6_AND_ETC___d112,
       req_f3_BITS_1_TO_0_09_EQ_0b0_10_OR_req_f3_BITS_ETC___d939,
       rg_addr_7_EQ_rg_lrsc_pa_4___d109,
       rg_amo_funct7_3_BITS_6_TO_2_4_EQ_0b10_5_AND_NO_ETC___d284,
       rg_lrsc_pa_4_EQ_rg_addr_7___d55,
       rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d123,
       rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d125,
       rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d128,
       rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d267,
       rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d280,
       rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d88,
       rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d121,
       rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d299,
       rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d428,
       rg_op_0_EQ_2_2_AND_rg_amo_funct7_3_BITS_6_TO_2_ETC___d494,
       rg_op_0_EQ_2_2_AND_rg_amo_funct7_3_BITS_6_TO_2_ETC___d64,
       rg_state_EQ_12_87_AND_rg_op_0_EQ_0_1_OR_rg_op__ETC___d592,
       rg_state_EQ_12_87_AND_rg_op_0_EQ_0_1_OR_rg_op__ETC___d629;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // value method valid
  assign valid = dw_valid$whas ;

  // value method addr
  assign addr = rg_addr ;

  // value method word64
  always@(MUX_dw_output_ld_val$wset_1__SEL_1 or
	  MUX_dw_output_ld_val$wset_1__VAL_1 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_dw_output_ld_val$wset_1__VAL_2 or
	  MUX_dw_output_ld_val$wset_1__SEL_3 or
	  MUX_dw_output_ld_val$wset_1__VAL_3 or
	  MUX_dw_output_ld_val$wset_1__SEL_4 or
	  MUX_dw_output_ld_val$wset_1__VAL_4 or
	  WILL_FIRE_RL_rl_ST_AMO_response or
	  rg_ld_val or
	  WILL_FIRE_RL_rl_maintain_io_read_rsp or
	  MUX_dw_output_ld_val$wset_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dw_output_ld_val$wset_1__SEL_1:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_1;
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_2;
      MUX_dw_output_ld_val$wset_1__SEL_3:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_3;
      MUX_dw_output_ld_val$wset_1__SEL_4:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_4;
      WILL_FIRE_RL_rl_ST_AMO_response: word64 = rg_ld_val;
      WILL_FIRE_RL_rl_maintain_io_read_rsp:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_6;
      default: word64 = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // value method st_amo_val
  assign st_amo_val =
	     MUX_dw_output_ld_val$wset_1__SEL_4 ? 64'd0 : rg_st_amo_val ;

  // value method exc
  assign exc = rg_state == 4'd4 ;

  // value method exc_code
  assign exc_code = rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = 1'd1 ;
  assign CAN_FIRE_tlb_flush = 1'd1 ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_m_awvalid
  assign mem_master_awvalid =
	     !master_xactor_crg_wr_addr_full$EN_port0__write &&
	     master_xactor_crg_wr_addr_full ;

  // value method mem_master_m_awaddr
  assign mem_master_awaddr = master_xactor_rg_wr_addr[66:3] ;

  // value method mem_master_m_awprot
  assign mem_master_awprot = master_xactor_rg_wr_addr[2:0] ;

  // action method mem_master_m_awready
  assign CAN_FIRE_mem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_awready = 1'd1 ;

  // value method mem_master_m_wvalid
  assign mem_master_wvalid =
	     !master_xactor_crg_wr_data_full$EN_port0__write &&
	     master_xactor_crg_wr_data_full ;

  // value method mem_master_m_wdata
  assign mem_master_wdata = master_xactor_rg_wr_data[71:8] ;

  // value method mem_master_m_wstrb
  assign mem_master_wstrb = master_xactor_rg_wr_data[7:0] ;

  // action method mem_master_m_wready
  assign CAN_FIRE_mem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_wready = 1'd1 ;

  // action method mem_master_m_bvalid
  assign CAN_FIRE_mem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_bvalid = 1'd1 ;

  // value method mem_master_m_bready
  assign mem_master_bready = !master_xactor_crg_wr_resp_full$port2__read ;

  // value method mem_master_m_arvalid
  assign mem_master_arvalid =
	     !master_xactor_crg_rd_addr_full$EN_port0__write &&
	     master_xactor_crg_rd_addr_full ;

  // value method mem_master_m_araddr
  assign mem_master_araddr = master_xactor_rg_rd_addr[66:3] ;

  // value method mem_master_m_arprot
  assign mem_master_arprot = master_xactor_rg_rd_addr[2:0] ;

  // action method mem_master_m_arready
  assign CAN_FIRE_mem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_arready = 1'd1 ;

  // action method mem_master_m_rvalid
  assign CAN_FIRE_mem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_rvalid = 1'd1 ;

  // value method mem_master_m_rready
  assign mem_master_rready = !master_xactor_crg_rd_data_full$port2__read ;

  // actionvalue method near_mem_io_client_request_get
  assign near_mem_io_client_request_get = f_near_mem_io_reqs$D_OUT ;
  assign RDY_near_mem_io_client_request_get = f_near_mem_io_reqs$EMPTY_N ;
  assign CAN_FIRE_near_mem_io_client_request_get =
	     f_near_mem_io_reqs$EMPTY_N ;
  assign WILL_FIRE_near_mem_io_client_request_get =
	     EN_near_mem_io_client_request_get ;

  // action method near_mem_io_client_response_put
  assign RDY_near_mem_io_client_response_put = f_near_mem_io_rsps$FULL_N ;
  assign CAN_FIRE_near_mem_io_client_response_put =
	     f_near_mem_io_rsps$FULL_N ;
  assign WILL_FIRE_near_mem_io_client_response_put =
	     EN_near_mem_io_client_response_put ;

  // submodule f_near_mem_io_reqs
  FIFO2 #(.width(32'd137), .guarded(32'd1)) f_near_mem_io_reqs(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(f_near_mem_io_reqs$D_IN),
							       .ENQ(f_near_mem_io_reqs$ENQ),
							       .DEQ(f_near_mem_io_reqs$DEQ),
							       .CLR(f_near_mem_io_reqs$CLR),
							       .D_OUT(f_near_mem_io_reqs$D_OUT),
							       .FULL_N(f_near_mem_io_reqs$FULL_N),
							       .EMPTY_N(f_near_mem_io_reqs$EMPTY_N));

  // submodule f_near_mem_io_rsps
  FIFO2 #(.width(32'd66), .guarded(32'd1)) f_near_mem_io_rsps(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(f_near_mem_io_rsps$D_IN),
							      .ENQ(f_near_mem_io_rsps$ENQ),
							      .DEQ(f_near_mem_io_rsps$DEQ),
							      .CLR(f_near_mem_io_rsps$CLR),
							      .D_OUT(f_near_mem_io_rsps$D_OUT),
							      .FULL_N(f_near_mem_io_rsps$FULL_N),
							      .EMPTY_N(f_near_mem_io_rsps$EMPTY_N));

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_reqs(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_reqs$D_IN),
						       .ENQ(f_reset_reqs$ENQ),
						       .DEQ(f_reset_reqs$DEQ),
						       .CLR(f_reset_reqs$CLR),
						       .D_OUT(f_reset_reqs$D_OUT),
						       .FULL_N(f_reset_reqs$FULL_N),
						       .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_rsps(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_rsps$D_IN),
						       .ENQ(f_reset_rsps$ENQ),
						       .DEQ(f_reset_rsps$DEQ),
						       .CLR(f_reset_rsps$CLR),
						       .D_OUT(f_reset_rsps$D_OUT),
						       .FULL_N(f_reset_rsps$FULL_N),
						       .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd23),
	  .MEMSIZE(8'd128)) ram_state_and_ctag_cset(.CLKA(CLK),
						    .CLKB(CLK),
						    .ADDRA(ram_state_and_ctag_cset$ADDRA),
						    .ADDRB(ram_state_and_ctag_cset$ADDRB),
						    .DIA(ram_state_and_ctag_cset$DIA),
						    .DIB(ram_state_and_ctag_cset$DIB),
						    .WEA(ram_state_and_ctag_cset$WEA),
						    .WEB(ram_state_and_ctag_cset$WEB),
						    .ENA(ram_state_and_ctag_cset$ENA),
						    .ENB(ram_state_and_ctag_cset$ENB),
						    .DOA(),
						    .DOB(ram_state_and_ctag_cset$DOB));

  // submodule ram_word64_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd9),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(10'd512)) ram_word64_set(.CLKA(CLK),
					    .CLKB(CLK),
					    .ADDRA(ram_word64_set$ADDRA),
					    .ADDRB(ram_word64_set$ADDRB),
					    .DIA(ram_word64_set$DIA),
					    .DIB(ram_word64_set$DIB),
					    .WEA(ram_word64_set$WEA),
					    .WEB(ram_word64_set$WEB),
					    .ENA(ram_word64_set$ENA),
					    .ENB(ram_word64_set$ENB),
					    .DOA(),
					    .DOB(ram_word64_set$DOB));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_boot_rom_addr_size(),
		    .m_boot_rom_addr_base(),
		    .m_boot_rom_addr_lim(),
		    .m_tcm_addr_size(),
		    .m_tcm_addr_base(),
		    .m_tcm_addr_lim(),
		    .m_mem0_controller_addr_size(),
		    .m_mem0_controller_addr_base(),
		    .m_mem0_controller_addr_lim(),
		    .m_uart0_addr_size(),
		    .m_uart0_addr_base(),
		    .m_uart0_addr_lim(),
		    .m_near_mem_io_addr_size(),
		    .m_near_mem_io_addr_base(),
		    .m_near_mem_io_addr_lim(),
		    .m_is_IO_addr(soc_map$m_is_IO_addr),
		    .m_is_near_mem_IO_addr(soc_map$m_is_near_mem_IO_addr));

  // rule RL_rl_reset
  assign CAN_FIRE_RL_rl_reset = WILL_FIRE_RL_rl_reset ;
  assign WILL_FIRE_RL_rl_reset =
	     (rg_cset_in_cache != 7'd127 ||
	      f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N) &&
	     rg_state == 4'd1 ;

  // rule RL_rl_rereq
  assign CAN_FIRE_RL_rl_rereq = rg_state == 4'd10 ;
  assign WILL_FIRE_RL_rl_rereq =
	     CAN_FIRE_RL_rl_rereq && !WILL_FIRE_RL_rl_start_reset && !EN_req ;

  // rule RL_rl_ST_AMO_response
  assign CAN_FIRE_RL_rl_ST_AMO_response = rg_state == 4'd11 ;
  assign WILL_FIRE_RL_rl_ST_AMO_response = CAN_FIRE_RL_rl_ST_AMO_response ;

  // rule RL_rl_io_near_mem_read_req
  assign CAN_FIRE_RL_rl_io_near_mem_read_req =
	     f_near_mem_io_reqs$FULL_N &&
	     rg_state_EQ_12_87_AND_rg_op_0_EQ_0_1_OR_rg_op__ETC___d629 ;
  assign WILL_FIRE_RL_rl_io_near_mem_read_req =
	     CAN_FIRE_RL_rl_io_near_mem_read_req &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_near_mem_read_rsp
  assign CAN_FIRE_RL_rl_io_near_mem_read_rsp =
	     f_near_mem_io_rsps$EMPTY_N && rg_state == 4'd13 &&
	     soc_map$m_is_near_mem_IO_addr &&
	     f_near_mem_io_rsps$D_OUT[65] ;
  assign WILL_FIRE_RL_rl_io_near_mem_read_rsp =
	     CAN_FIRE_RL_rl_io_near_mem_read_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_maintain_io_read_rsp
  assign CAN_FIRE_RL_rl_maintain_io_read_rsp = rg_state == 4'd14 ;
  assign WILL_FIRE_RL_rl_maintain_io_read_rsp =
	     CAN_FIRE_RL_rl_maintain_io_read_rsp ;

  // rule RL_rl_io_near_mem_write_req
  assign CAN_FIRE_RL_rl_io_near_mem_write_req =
	     f_near_mem_io_reqs$FULL_N && rg_state == 4'd12 &&
	     rg_op == 2'd1 &&
	     soc_map$m_is_near_mem_IO_addr ;
  assign WILL_FIRE_RL_rl_io_near_mem_write_req =
	     CAN_FIRE_RL_rl_io_near_mem_write_req &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_near_mem_write_rsp
  assign CAN_FIRE_RL_rl_io_near_mem_write_rsp =
	     f_near_mem_io_rsps$EMPTY_N && !f_near_mem_io_rsps$D_OUT[65] ;
  assign WILL_FIRE_RL_rl_io_near_mem_write_rsp =
	     CAN_FIRE_RL_rl_io_near_mem_write_rsp ;

  // rule RL_rl_io_AMO_SC_req
  assign CAN_FIRE_RL_rl_io_AMO_SC_req =
	     rg_state == 4'd12 && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     !soc_map$m_is_near_mem_IO_addr ;
  assign WILL_FIRE_RL_rl_io_AMO_SC_req =
	     CAN_FIRE_RL_rl_io_AMO_SC_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_drive_exception_rsp
  assign CAN_FIRE_RL_rl_drive_exception_rsp = rg_state == 4'd4 ;
  assign WILL_FIRE_RL_rl_drive_exception_rsp = rg_state == 4'd4 ;

  // rule RL_rl_start_reset
  assign CAN_FIRE_RL_rl_start_reset =
	     f_reset_reqs$EMPTY_N && rg_state != 4'd1 ;
  assign WILL_FIRE_RL_rl_start_reset = CAN_FIRE_RL_rl_start_reset ;

  // rule RL_rl_cache_refill_req_loop
  assign CAN_FIRE_RL_rl_cache_refill_req_loop =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_requesting_cline ;
  assign WILL_FIRE_RL_rl_cache_refill_req_loop =
	     CAN_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_rl_probe_and_immed_rsp =
	     (soc_map$m_is_IO_addr || rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ||
	      IF_rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_ETC___d75) &&
	     rg_state == 4'd3 ;
  assign WILL_FIRE_RL_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_rl_probe_and_immed_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_rl_cache_refill_rsps_loop =
	     master_xactor_crg_rd_data_full$port1__read && rg_state == 4'd9 ;
  assign WILL_FIRE_RL_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_rl_cache_refill_rsps_loop &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;

  // rule RL_rl_io_read_req
  assign CAN_FIRE_RL_rl_io_read_req =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state_EQ_12_87_AND_rg_op_0_EQ_0_1_OR_rg_op__ETC___d592 ;
  assign WILL_FIRE_RL_rl_io_read_req =
	     CAN_FIRE_RL_rl_io_read_req &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_read_rsp
  assign CAN_FIRE_RL_rl_io_read_rsp =
	     master_xactor_crg_rd_data_full$port1__read &&
	     rg_state == 4'd13 &&
	     !soc_map$m_is_near_mem_IO_addr ;
  assign WILL_FIRE_RL_rl_io_read_rsp =
	     CAN_FIRE_RL_rl_io_read_rsp && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_write_req
  assign CAN_FIRE_RL_rl_io_write_req =
	     !master_xactor_crg_wr_addr_full$port2__read &&
	     !master_xactor_crg_wr_data_full$port2__read &&
	     rg_state == 4'd12 &&
	     rg_op == 2'd1 &&
	     !soc_map$m_is_near_mem_IO_addr ;
  assign WILL_FIRE_RL_rl_io_write_req =
	     CAN_FIRE_RL_rl_io_write_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_AMO_op_req
  assign CAN_FIRE_RL_rl_io_AMO_op_req =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state == 4'd12 &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] != 5'b00010 &&
	     rg_amo_funct7[6:2] != 5'b00011 ;
  assign WILL_FIRE_RL_rl_io_AMO_op_req =
	     CAN_FIRE_RL_rl_io_AMO_op_req &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_AMO_read_rsp
  assign CAN_FIRE_RL_rl_io_AMO_read_rsp =
	     master_xactor_crg_rd_data_full_port1__read__45_ETC___d731 &&
	     rg_state == 4'd15 ;
  assign WILL_FIRE_RL_rl_io_AMO_read_rsp = MUX_rg_state$write_1__SEL_3 ;

  // rule RL_rl_start_cache_refill
  assign CAN_FIRE_RL_rl_start_cache_refill =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state == 4'd8 &&
	     b__h20504 == 4'd0 ;
  assign WILL_FIRE_RL_rl_start_cache_refill = MUX_rg_state$write_1__SEL_1 ;

  // rule RL_rl_discard_write_rsp
  assign CAN_FIRE_RL_rl_discard_write_rsp =
	     b__h20504 != 4'd0 && master_xactor_crg_wr_resp_full$port1__read ;
  assign WILL_FIRE_RL_rl_discard_write_rsp =
	     CAN_FIRE_RL_rl_discard_write_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // inputs to muxes for submodule ports
  assign MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ;
  assign MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d430 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_3 =
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	     f_near_mem_io_rsps$D_OUT[64] ;
  assign MUX_dw_output_ld_val$wset_1__SEL_4 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d128 ;
  assign MUX_master_xactor_rg_rd_addr$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_AMO_op_req || WILL_FIRE_RL_rl_io_read_req ;
  assign MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 =
	     EN_req &&
	     req_f3_BITS_1_TO_0_09_EQ_0b0_10_OR_req_f3_BITS_ETC___d939 ;
  assign MUX_ram_word64_set$a_put_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ;
  assign MUX_ram_word64_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] != 2'd3 ;
  assign MUX_rg_error_during_refill$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ;
  assign MUX_rg_exc_code$write_1__SEL_1 =
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_09_EQ_0b0_10_11_AND_NOT_ETC___d930 ;
  assign MUX_rg_exc_code$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ;
  assign MUX_rg_exc_code$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ;
  assign MUX_rg_exc_code$write_1__SEL_5 =
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	     !f_near_mem_io_rsps$D_OUT[64] ;
  assign MUX_rg_ld_val$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d290 ;
  assign MUX_rg_lrsc_valid$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d123 ;
  assign MUX_rg_state$write_1__SEL_1 =
	     CAN_FIRE_RL_rl_start_cache_refill &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;
  assign MUX_rg_state$write_1__SEL_3 =
	     CAN_FIRE_RL_rl_io_AMO_read_rsp && !WILL_FIRE_RL_rl_start_reset ;
  assign MUX_rg_state$write_1__SEL_8 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] == 2'd3 ;
  assign MUX_rg_state$write_1__SEL_9 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (soc_map$m_is_IO_addr ||
	      rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d88 ||
	      NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d98) ;
  assign MUX_rg_state$write_1__SEL_16 =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ;
  assign MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1 =
	     ctr_wr_rsps_pending_crg + 4'd1 ;
  always@(rg_f3 or
	  result__h23936 or
	  result__h23989 or
	  result__h24041 or
	  master_xactor_rg_rd_data or
	  result__h23963 or result__h24015 or result__h24067)
  begin
    case (rg_f3)
      3'b0: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h23936;
      3'b001: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h23989;
      3'b010: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h24041;
      3'b011:
	  MUX_dw_output_ld_val$wset_1__VAL_1 = master_xactor_rg_rd_data[63:0];
      3'b100: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h23963;
      3'b101: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h24015;
      3'b110: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h24067;
      3'd7: MUX_dw_output_ld_val$wset_1__VAL_1 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  result__h29220 or
	  result__h29277 or
	  result__h29331 or
	  new_ld_val__h27408 or
	  result__h29250 or result__h29304 or result__h29358)
  begin
    case (rg_f3)
      3'b0: MUX_dw_output_ld_val$wset_1__VAL_2 = result__h29220;
      3'b001: MUX_dw_output_ld_val$wset_1__VAL_2 = result__h29277;
      3'b010: MUX_dw_output_ld_val$wset_1__VAL_2 = result__h29331;
      3'b011: MUX_dw_output_ld_val$wset_1__VAL_2 = new_ld_val__h27408;
      3'b100: MUX_dw_output_ld_val$wset_1__VAL_2 = result__h29250;
      3'b101: MUX_dw_output_ld_val$wset_1__VAL_2 = result__h29304;
      3'b110: MUX_dw_output_ld_val$wset_1__VAL_2 = result__h29358;
      3'd7: MUX_dw_output_ld_val$wset_1__VAL_2 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  result__h24863 or
	  result__h24916 or
	  result__h24968 or
	  f_near_mem_io_rsps$D_OUT or
	  result__h24890 or result__h24942 or result__h24994)
  begin
    case (rg_f3)
      3'b0: MUX_dw_output_ld_val$wset_1__VAL_3 = result__h24863;
      3'b001: MUX_dw_output_ld_val$wset_1__VAL_3 = result__h24916;
      3'b010: MUX_dw_output_ld_val$wset_1__VAL_3 = result__h24968;
      3'b011:
	  MUX_dw_output_ld_val$wset_1__VAL_3 = f_near_mem_io_rsps$D_OUT[63:0];
      3'b100: MUX_dw_output_ld_val$wset_1__VAL_3 = result__h24890;
      3'b101: MUX_dw_output_ld_val$wset_1__VAL_3 = result__h24942;
      3'b110: MUX_dw_output_ld_val$wset_1__VAL_3 = result__h24994;
      3'd7: MUX_dw_output_ld_val$wset_1__VAL_3 = 64'd0;
    endcase
  end
  assign MUX_dw_output_ld_val$wset_1__VAL_4 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       new_value__h5404 :
	       new_value__h17673 ;
  always@(rg_f3 or
	  result__h25246 or
	  result__h25300 or
	  result__h25354 or
	  rg_ld_val or result__h25273 or result__h25327 or result__h25381)
  begin
    case (rg_f3)
      3'b0: MUX_dw_output_ld_val$wset_1__VAL_6 = result__h25246;
      3'b001: MUX_dw_output_ld_val$wset_1__VAL_6 = result__h25300;
      3'b010: MUX_dw_output_ld_val$wset_1__VAL_6 = result__h25354;
      3'b011: MUX_dw_output_ld_val$wset_1__VAL_6 = rg_ld_val;
      3'b100: MUX_dw_output_ld_val$wset_1__VAL_6 = result__h25273;
      3'b101: MUX_dw_output_ld_val$wset_1__VAL_6 = result__h25327;
      3'b110: MUX_dw_output_ld_val$wset_1__VAL_6 = result__h25381;
      3'd7: MUX_dw_output_ld_val$wset_1__VAL_6 = 64'd0;
    endcase
  end
  assign MUX_f_near_mem_io_reqs$enq_1__VAL_1 =
	     { 1'd1, fabric_addr__h27023, 72'hAAAAAAAAAAAAAAAAAA } ;
  assign MUX_f_near_mem_io_reqs$enq_1__VAL_2 =
	     { 1'd0,
	       fabric_addr__h27023,
	       value__h26681,
	       io_req_wr_data_wstrb__h27636 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_1 =
	     { fabric_addr__h27023, 3'd0 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_2 =
	     { 32'd0, cline_addr__h21214, 3'd0 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_3 =
	     { cline_fabric_addr__h21215, 3'd0 } ;
  assign MUX_master_xactor_rg_wr_addr$write_1__VAL_1 =
	     { io_req_wr_addr_awaddr__h27476, 3'd0 } ;
  assign MUX_master_xactor_rg_wr_addr$write_1__VAL_2 =
	     { mem_req_wr_addr_awaddr__h19474, 3'd0 } ;
  assign MUX_master_xactor_rg_wr_data$write_1__VAL_1 =
	     { io_req_wr_data_wdata__h27635, io_req_wr_data_wstrb__h27636 } ;
  assign MUX_master_xactor_rg_wr_data$write_1__VAL_2 =
	     { IF_rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_ETC___d447,
	       mem_req_wr_data_wstrb__h19562 } ;
  assign MUX_master_xactor_rg_wr_data$write_1__VAL_3 =
	     { value__h26681, io_req_wr_data_wstrb__h27636 } ;
  assign MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 = { 3'd4, rg_pa[31:12] } ;
  assign MUX_ram_word64_set$a_put_3__VAL_2 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       IF_rg_f3_30_EQ_0b0_31_THEN_IF_rg_addr_7_BITS_2_ETC___d352 :
	       IF_rg_f3_30_EQ_0b0_31_THEN_IF_rg_addr_7_BITS_2_ETC___d426 ;
  assign MUX_ram_word64_set$b_put_2__VAL_2 = rg_word64_set_in_cache + 9'd1 ;
  assign MUX_ram_word64_set$b_put_2__VAL_4 = { rg_addr[11:5], 2'd0 } ;
  assign MUX_rg_cset_in_cache$write_1__VAL_1 = rg_cset_in_cache + 7'd1 ;
  assign MUX_rg_exc_code$write_1__VAL_1 = (req_op == 2'd0) ? 4'd4 : 4'd6 ;
  assign MUX_rg_ld_val$write_1__VAL_2 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       x__h13085 :
	       IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_IF_rg_f3_30_E_ETC___d294 ;
  assign MUX_rg_req_byte_in_cline$write_1__VAL_1 =
	     rg_req_byte_in_cline + 64'd8 ;
  assign MUX_rg_state$write_1__VAL_2 =
	     NOT_req_f3_BITS_1_TO_0_09_EQ_0b0_10_11_AND_NOT_ETC___d930 ?
	       4'd4 :
	       4'd3 ;
  assign MUX_rg_state$write_1__VAL_3 =
	     (master_xactor_rg_rd_data[65:64] == 2'd0) ? 4'd14 : 4'd4 ;
  assign MUX_rg_state$write_1__VAL_8 =
	     (master_xactor_rg_rd_data[65:64] != 2'd0 ||
	      rg_error_during_refill) ?
	       4'd4 :
	       4'd10 ;
  assign MUX_rg_state$write_1__VAL_9 =
	     soc_map$m_is_IO_addr ?
	       4'd12 :
	       IF_rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_ETC___d103 ;
  assign MUX_rg_state$write_1__VAL_13 =
	     f_near_mem_io_rsps$D_OUT[64] ? 4'd14 : 4'd4 ;

  // inlined wires
  assign dw_valid$whas =
	     (WILL_FIRE_RL_rl_io_AMO_read_rsp ||
	      WILL_FIRE_RL_rl_io_read_rsp) &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	     f_near_mem_io_rsps$D_OUT[64] ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d128 ||
	     WILL_FIRE_RL_rl_drive_exception_rsp ||
	     WILL_FIRE_RL_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_rl_ST_AMO_response ;
  assign master_xactor_crg_wr_addr_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_wr_addr_full$port1__read =
	     !master_xactor_crg_wr_addr_full$EN_port0__write &&
	     master_xactor_crg_wr_addr_full ;
  assign master_xactor_crg_wr_addr_full$EN_port1__write =
	     master_xactor_crg_wr_addr_full$port1__read &&
	     mem_master_awready ;
  assign master_xactor_crg_wr_addr_full$port2__read =
	     !master_xactor_crg_wr_addr_full$EN_port1__write &&
	     master_xactor_crg_wr_addr_full$port1__read ;
  assign master_xactor_crg_wr_addr_full$EN_port2__write =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d430 ||
	     WILL_FIRE_RL_rl_io_write_req ;
  assign master_xactor_crg_wr_addr_full$port3__read =
	     master_xactor_crg_wr_addr_full$EN_port2__write ?
	       1'd1 :
	       master_xactor_crg_wr_addr_full$port2__read ;
  assign master_xactor_crg_wr_data_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_wr_data_full$port1__read =
	     !master_xactor_crg_wr_data_full$EN_port0__write &&
	     master_xactor_crg_wr_data_full ;
  assign master_xactor_crg_wr_data_full$EN_port1__write =
	     master_xactor_crg_wr_data_full$port1__read && mem_master_wready ;
  assign master_xactor_crg_wr_data_full$port2__read =
	     !master_xactor_crg_wr_data_full$EN_port1__write &&
	     master_xactor_crg_wr_data_full$port1__read ;
  assign master_xactor_crg_wr_data_full$EN_port2__write =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d430 ||
	     WILL_FIRE_RL_rl_io_write_req ;
  assign master_xactor_crg_wr_data_full$port3__read =
	     master_xactor_crg_wr_data_full$EN_port2__write ?
	       1'd1 :
	       master_xactor_crg_wr_data_full$port2__read ;
  assign master_xactor_crg_wr_resp_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_wr_resp_full$port1__read =
	     !master_xactor_crg_wr_resp_full$EN_port0__write &&
	     master_xactor_crg_wr_resp_full ;
  assign master_xactor_crg_wr_resp_full$port2__read =
	     !WILL_FIRE_RL_rl_discard_write_rsp &&
	     master_xactor_crg_wr_resp_full$port1__read ;
  assign master_xactor_crg_wr_resp_full$EN_port2__write =
	     mem_master_bvalid &&
	     !master_xactor_crg_wr_resp_full$port2__read ;
  assign master_xactor_crg_wr_resp_full$port3__read =
	     master_xactor_crg_wr_resp_full$EN_port2__write ||
	     master_xactor_crg_wr_resp_full$port2__read ;
  assign master_xactor_crg_rd_addr_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_rd_addr_full$port1__read =
	     !master_xactor_crg_rd_addr_full$EN_port0__write &&
	     master_xactor_crg_rd_addr_full ;
  assign master_xactor_crg_rd_addr_full$EN_port1__write =
	     master_xactor_crg_rd_addr_full$port1__read &&
	     mem_master_arready ;
  assign master_xactor_crg_rd_addr_full$port2__read =
	     !master_xactor_crg_rd_addr_full$EN_port1__write &&
	     master_xactor_crg_rd_addr_full$port1__read ;
  assign master_xactor_crg_rd_addr_full$EN_port2__write =
	     WILL_FIRE_RL_rl_io_AMO_op_req || WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_cache_refill_req_loop ||
	     WILL_FIRE_RL_rl_start_cache_refill ;
  assign master_xactor_crg_rd_addr_full$port3__read =
	     master_xactor_crg_rd_addr_full$EN_port2__write ||
	     master_xactor_crg_rd_addr_full$port2__read ;
  assign master_xactor_crg_rd_data_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_rd_data_full$port1__read =
	     !master_xactor_crg_rd_data_full$EN_port0__write &&
	     master_xactor_crg_rd_data_full ;
  assign master_xactor_crg_rd_data_full$EN_port1__write =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp || WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop ;
  assign master_xactor_crg_rd_data_full$port2__read =
	     !master_xactor_crg_rd_data_full$EN_port1__write &&
	     master_xactor_crg_rd_data_full$port1__read ;
  assign master_xactor_crg_rd_data_full$EN_port2__write =
	     mem_master_rvalid &&
	     !master_xactor_crg_rd_data_full$port2__read ;
  assign master_xactor_crg_rd_data_full$port3__read =
	     master_xactor_crg_rd_data_full$EN_port2__write ||
	     master_xactor_crg_rd_data_full$port2__read ;
  assign ctr_wr_rsps_pending_crg$EN_port0__write =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d430 ||
	     WILL_FIRE_RL_rl_io_write_req ;
  always@(MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  WILL_FIRE_RL_rl_io_write_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      WILL_FIRE_RL_rl_io_write_req:
	  ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      default: ctr_wr_rsps_pending_crg$port0__write_1 =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign ctr_wr_rsps_pending_crg$port1__write_1 = b__h20504 - 4'd1 ;
  assign ctr_wr_rsps_pending_crg$port2__read =
	     WILL_FIRE_RL_rl_discard_write_rsp ?
	       ctr_wr_rsps_pending_crg$port1__write_1 :
	       b__h20504 ;
  assign ctr_wr_rsps_pending_crg$EN_port2__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign ctr_wr_rsps_pending_crg$port3__read =
	     ctr_wr_rsps_pending_crg$EN_port2__write ?
	       4'd0 :
	       ctr_wr_rsps_pending_crg$port2__read ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cfg_verbosity$EN = EN_set_verbosity ;

  // register ctr_wr_rsps_pending_crg
  assign ctr_wr_rsps_pending_crg$D_IN = ctr_wr_rsps_pending_crg$port3__read ;
  assign ctr_wr_rsps_pending_crg$EN = 1'b1 ;

  // register master_xactor_crg_rd_addr_full
  assign master_xactor_crg_rd_addr_full$D_IN =
	     master_xactor_crg_rd_addr_full$port3__read ;
  assign master_xactor_crg_rd_addr_full$EN = 1'b1 ;

  // register master_xactor_crg_rd_data_full
  assign master_xactor_crg_rd_data_full$D_IN =
	     master_xactor_crg_rd_data_full$port3__read ;
  assign master_xactor_crg_rd_data_full$EN = 1'b1 ;

  // register master_xactor_crg_wr_addr_full
  assign master_xactor_crg_wr_addr_full$D_IN =
	     master_xactor_crg_wr_addr_full$port3__read ;
  assign master_xactor_crg_wr_addr_full$EN = 1'b1 ;

  // register master_xactor_crg_wr_data_full
  assign master_xactor_crg_wr_data_full$D_IN =
	     master_xactor_crg_wr_data_full$port3__read ;
  assign master_xactor_crg_wr_data_full$EN = 1'b1 ;

  // register master_xactor_crg_wr_resp_full
  assign master_xactor_crg_wr_resp_full$D_IN =
	     master_xactor_crg_wr_resp_full$port3__read ;
  assign master_xactor_crg_wr_resp_full$EN = 1'b1 ;

  // register master_xactor_rg_rd_addr
  always@(MUX_master_xactor_rg_rd_addr$write_1__SEL_1 or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_1 or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_cache_refill_req_loop or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_master_xactor_rg_rd_addr$write_1__SEL_1:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_1;
      WILL_FIRE_RL_rl_start_cache_refill:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_2;
      WILL_FIRE_RL_rl_cache_refill_req_loop:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_3;
      default: master_xactor_rg_rd_addr$D_IN =
		   67'h2AAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign master_xactor_rg_rd_addr$EN =
	     WILL_FIRE_RL_rl_io_AMO_op_req || WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_cache_refill_req_loop ;

  // register master_xactor_rg_rd_data
  assign master_xactor_rg_rd_data$D_IN =
	     { mem_master_rresp, mem_master_rdata } ;
  assign master_xactor_rg_rd_data$EN = 1'd1 ;

  // register master_xactor_rg_wr_addr
  always@(MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_master_xactor_rg_wr_addr$write_1__VAL_1 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  MUX_master_xactor_rg_wr_addr$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_write_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  master_xactor_rg_wr_addr$D_IN =
	      MUX_master_xactor_rg_wr_addr$write_1__VAL_1;
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  master_xactor_rg_wr_addr$D_IN =
	      MUX_master_xactor_rg_wr_addr$write_1__VAL_2;
      WILL_FIRE_RL_rl_io_write_req:
	  master_xactor_rg_wr_addr$D_IN =
	      MUX_master_xactor_rg_wr_addr$write_1__VAL_1;
      default: master_xactor_rg_wr_addr$D_IN =
		   67'h2AAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign master_xactor_rg_wr_addr$EN =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d430 ||
	     WILL_FIRE_RL_rl_io_write_req ;

  // register master_xactor_rg_wr_data
  always@(MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_master_xactor_rg_wr_data$write_1__VAL_1 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  MUX_master_xactor_rg_wr_data$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_write_req or
	  MUX_master_xactor_rg_wr_data$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  master_xactor_rg_wr_data$D_IN =
	      MUX_master_xactor_rg_wr_data$write_1__VAL_1;
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  master_xactor_rg_wr_data$D_IN =
	      MUX_master_xactor_rg_wr_data$write_1__VAL_2;
      WILL_FIRE_RL_rl_io_write_req:
	  master_xactor_rg_wr_data$D_IN =
	      MUX_master_xactor_rg_wr_data$write_1__VAL_3;
      default: master_xactor_rg_wr_data$D_IN =
		   72'hAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign master_xactor_rg_wr_data$EN =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d430 ||
	     WILL_FIRE_RL_rl_io_write_req ;

  // register master_xactor_rg_wr_resp
  assign master_xactor_rg_wr_resp$D_IN = mem_master_bresp ;
  assign master_xactor_rg_wr_resp$EN =
	     mem_master_bvalid &&
	     !master_xactor_crg_wr_resp_full$port2__read ;

  // register rg_addr
  assign rg_addr$D_IN = req_addr ;
  assign rg_addr$EN = EN_req ;

  // register rg_amo_funct7
  assign rg_amo_funct7$D_IN = req_amo_funct7 ;
  assign rg_amo_funct7$EN = EN_req ;

  // register rg_cset_in_cache
  assign rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_rl_reset ?
	       MUX_rg_cset_in_cache$write_1__VAL_1 :
	       7'd0 ;
  assign rg_cset_in_cache$EN =
	     WILL_FIRE_RL_rl_reset || WILL_FIRE_RL_rl_start_reset ;

  // register rg_error_during_refill
  assign rg_error_during_refill$D_IN =
	     MUX_rg_error_during_refill$write_1__SEL_1 ;
  assign rg_error_during_refill$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_exc_code
  always@(MUX_rg_exc_code$write_1__SEL_1 or
	  MUX_rg_exc_code$write_1__VAL_1 or
	  MUX_rg_exc_code$write_1__SEL_2 or
	  MUX_rg_exc_code$write_1__SEL_3 or
	  MUX_rg_error_during_refill$write_1__SEL_1 or
	  access_exc_code__h3108 or MUX_rg_exc_code$write_1__SEL_5)
  case (1'b1)
    MUX_rg_exc_code$write_1__SEL_1:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_1;
    MUX_rg_exc_code$write_1__SEL_2: rg_exc_code$D_IN = 4'd7;
    MUX_rg_exc_code$write_1__SEL_3: rg_exc_code$D_IN = 4'd5;
    MUX_rg_error_during_refill$write_1__SEL_1:
	rg_exc_code$D_IN = access_exc_code__h3108;
    MUX_rg_exc_code$write_1__SEL_5: rg_exc_code$D_IN = 4'd5;
    default: rg_exc_code$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign rg_exc_code$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ||
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	     !f_near_mem_io_rsps$D_OUT[64] ||
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_09_EQ_0b0_10_11_AND_NOT_ETC___d930 ;

  // register rg_f3
  assign rg_f3$D_IN = req_f3 ;
  assign rg_f3$EN = EN_req ;

  // register rg_ld_val
  always@(MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  new_ld_val__h27408 or
	  MUX_rg_ld_val$write_1__SEL_2 or
	  MUX_rg_ld_val$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_read_rsp or
	  master_xactor_rg_rd_data or
	  WILL_FIRE_RL_rl_io_near_mem_read_rsp or
	  f_near_mem_io_rsps$D_OUT or WILL_FIRE_RL_rl_io_AMO_SC_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  rg_ld_val$D_IN = new_ld_val__h27408;
      MUX_rg_ld_val$write_1__SEL_2:
	  rg_ld_val$D_IN = MUX_rg_ld_val$write_1__VAL_2;
      WILL_FIRE_RL_rl_io_read_rsp:
	  rg_ld_val$D_IN = master_xactor_rg_rd_data[63:0];
      WILL_FIRE_RL_rl_io_near_mem_read_rsp:
	  rg_ld_val$D_IN = f_near_mem_io_rsps$D_OUT[63:0];
      WILL_FIRE_RL_rl_io_AMO_SC_req: rg_ld_val$D_IN = 64'd1;
      default: rg_ld_val$D_IN = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_ld_val$EN =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d290 ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp ||
	     WILL_FIRE_RL_rl_io_AMO_SC_req ;

  // register rg_lower_word32
  assign rg_lower_word32$D_IN = 32'h0 ;
  assign rg_lower_word32$EN = 1'b0 ;

  // register rg_lower_word32_full
  assign rg_lower_word32_full$D_IN = 1'd0 ;
  assign rg_lower_word32_full$EN =
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_start_reset ;

  // register rg_lrsc_pa
  assign rg_lrsc_pa$D_IN = rg_addr ;
  assign rg_lrsc_pa$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71 ;

  // register rg_lrsc_valid
  assign rg_lrsc_valid$D_IN =
	     MUX_rg_lrsc_valid$write_1__SEL_2 &&
	     rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d125 ;
  assign rg_lrsc_valid$EN =
	     (WILL_FIRE_RL_rl_io_near_mem_read_req ||
	      WILL_FIRE_RL_rl_io_read_req) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d123 ||
	     WILL_FIRE_RL_rl_start_reset ;

  // register rg_op
  assign rg_op$D_IN = req_op ;
  assign rg_op$EN = EN_req ;

  // register rg_pa
  assign rg_pa$D_IN = EN_req ? req_addr : rg_addr ;
  assign rg_pa$EN = EN_req || WILL_FIRE_RL_rl_probe_and_immed_rsp ;

  // register rg_pte_pa
  assign rg_pte_pa$D_IN = 32'h0 ;
  assign rg_pte_pa$EN = 1'b0 ;

  // register rg_req_byte_in_cline
  assign rg_req_byte_in_cline$D_IN =
	     WILL_FIRE_RL_rl_cache_refill_req_loop ?
	       MUX_rg_req_byte_in_cline$write_1__VAL_1 :
	       64'd8 ;
  assign rg_req_byte_in_cline$EN =
	     WILL_FIRE_RL_rl_cache_refill_req_loop ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_requesting_cline
  always@(WILL_FIRE_RL_rl_cache_refill_req_loop or
	  rg_req_byte_in_cline or
	  WILL_FIRE_RL_rl_start_reset or WILL_FIRE_RL_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_cache_refill_req_loop:
	  rg_requesting_cline$D_IN = rg_req_byte_in_cline != 64'd24;
      WILL_FIRE_RL_rl_start_reset: rg_requesting_cline$D_IN = 1'd0;
      WILL_FIRE_RL_rl_start_cache_refill: rg_requesting_cline$D_IN = 1'd1;
      default: rg_requesting_cline$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_requesting_cline$EN =
	     WILL_FIRE_RL_rl_cache_refill_req_loop ||
	     WILL_FIRE_RL_rl_start_reset ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_st_amo_val
  assign rg_st_amo_val$D_IN = EN_req ? req_st_value : new_st_val__h5344 ;
  assign rg_st_amo_val$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d512 ||
	     EN_req ;

  // register rg_state
  always@(WILL_FIRE_RL_rl_start_cache_refill or
	  EN_req or
	  MUX_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_AMO_read_rsp or
	  MUX_rg_state$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_io_AMO_op_req or
	  WILL_FIRE_RL_rl_io_write_req or
	  WILL_FIRE_RL_rl_io_read_rsp or
	  WILL_FIRE_RL_rl_io_read_req or
	  MUX_rg_state$write_1__SEL_8 or
	  MUX_rg_state$write_1__VAL_8 or
	  MUX_rg_state$write_1__SEL_9 or
	  MUX_rg_state$write_1__VAL_9 or
	  WILL_FIRE_RL_rl_start_reset or
	  WILL_FIRE_RL_rl_io_AMO_SC_req or
	  WILL_FIRE_RL_rl_io_near_mem_write_req or
	  WILL_FIRE_RL_rl_io_near_mem_read_rsp or
	  MUX_rg_state$write_1__VAL_13 or
	  WILL_FIRE_RL_rl_io_near_mem_read_req or
	  WILL_FIRE_RL_rl_rereq or MUX_rg_state$write_1__SEL_16)
  case (1'b1)
    WILL_FIRE_RL_rl_start_cache_refill: rg_state$D_IN = 4'd9;
    EN_req: rg_state$D_IN = MUX_rg_state$write_1__VAL_2;
    WILL_FIRE_RL_rl_io_AMO_read_rsp:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_3;
    WILL_FIRE_RL_rl_io_AMO_op_req: rg_state$D_IN = 4'd15;
    WILL_FIRE_RL_rl_io_write_req: rg_state$D_IN = 4'd11;
    WILL_FIRE_RL_rl_io_read_rsp: rg_state$D_IN = MUX_rg_state$write_1__VAL_3;
    WILL_FIRE_RL_rl_io_read_req: rg_state$D_IN = 4'd13;
    MUX_rg_state$write_1__SEL_8: rg_state$D_IN = MUX_rg_state$write_1__VAL_8;
    MUX_rg_state$write_1__SEL_9: rg_state$D_IN = MUX_rg_state$write_1__VAL_9;
    WILL_FIRE_RL_rl_start_reset: rg_state$D_IN = 4'd1;
    WILL_FIRE_RL_rl_io_AMO_SC_req || WILL_FIRE_RL_rl_io_near_mem_write_req:
	rg_state$D_IN = 4'd11;
    WILL_FIRE_RL_rl_io_near_mem_read_rsp:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_13;
    WILL_FIRE_RL_rl_io_near_mem_read_req: rg_state$D_IN = 4'd13;
    WILL_FIRE_RL_rl_rereq: rg_state$D_IN = 4'd3;
    MUX_rg_state$write_1__SEL_16: rg_state$D_IN = 4'd2;
    default: rg_state$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] == 2'd3 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (soc_map$m_is_IO_addr ||
	      rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d88 ||
	      NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d98) ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp ||
	     EN_req ||
	     WILL_FIRE_RL_rl_start_reset ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_io_AMO_SC_req ||
	     WILL_FIRE_RL_rl_io_near_mem_write_req ||
	     WILL_FIRE_RL_rl_io_write_req ||
	     WILL_FIRE_RL_rl_io_near_mem_read_req ||
	     WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_io_AMO_op_req ;

  // register rg_word64_set_in_cache
  assign rg_word64_set_in_cache$D_IN =
	     MUX_ram_word64_set$b_put_1__SEL_2 ?
	       MUX_ram_word64_set$b_put_2__VAL_2 :
	       MUX_ram_word64_set$b_put_2__VAL_4 ;
  assign rg_word64_set_in_cache$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule f_near_mem_io_reqs
  assign f_near_mem_io_reqs$D_IN =
	     WILL_FIRE_RL_rl_io_near_mem_read_req ?
	       MUX_f_near_mem_io_reqs$enq_1__VAL_1 :
	       MUX_f_near_mem_io_reqs$enq_1__VAL_2 ;
  assign f_near_mem_io_reqs$ENQ =
	     WILL_FIRE_RL_rl_io_near_mem_read_req ||
	     WILL_FIRE_RL_rl_io_near_mem_write_req ;
  assign f_near_mem_io_reqs$DEQ = EN_near_mem_io_client_request_get ;
  assign f_near_mem_io_reqs$CLR = 1'b0 ;

  // submodule f_near_mem_io_rsps
  assign f_near_mem_io_rsps$D_IN = near_mem_io_client_response_put ;
  assign f_near_mem_io_rsps$ENQ = EN_near_mem_io_client_response_put ;
  assign f_near_mem_io_rsps$DEQ =
	     WILL_FIRE_RL_rl_io_near_mem_write_rsp ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp ;
  assign f_near_mem_io_rsps$CLR = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign f_reset_reqs$ENQ =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign f_reset_reqs$DEQ =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = f_reset_reqs$D_OUT ;
  assign f_reset_rsps$ENQ =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ;
  assign f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule ram_state_and_ctag_cset
  assign ram_state_and_ctag_cset$ADDRA =
	     WILL_FIRE_RL_rl_start_cache_refill ?
	       rg_addr[11:5] :
	       rg_cset_in_cache ;
  assign ram_state_and_ctag_cset$ADDRB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       req_addr[11:5] :
	       rg_addr[11:5] ;
  assign ram_state_and_ctag_cset$DIA =
	     WILL_FIRE_RL_rl_start_cache_refill ?
	       MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       23'd2796202 ;
  assign ram_state_and_ctag_cset$DIB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       23'b01010101010101010101010 /* unspecified value */  :
	       23'b01010101010101010101010 /* unspecified value */  ;
  assign ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_rl_start_cache_refill || WILL_FIRE_RL_rl_reset ;
  assign ram_state_and_ctag_cset$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_09_EQ_0b0_10_OR_req_f3_BITS_ETC___d939 ||
	     WILL_FIRE_RL_rl_rereq ;

  // submodule ram_word64_set
  assign ram_word64_set$ADDRA =
	     MUX_ram_word64_set$a_put_1__SEL_1 ?
	       rg_word64_set_in_cache :
	       rg_addr[11:3] ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  req_addr or
	  MUX_ram_word64_set$b_put_1__SEL_2 or
	  MUX_ram_word64_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_rl_rereq or
	  rg_addr or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_ram_word64_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$ADDRB = req_addr[11:3];
      MUX_ram_word64_set$b_put_1__SEL_2:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_2;
      WILL_FIRE_RL_rl_rereq: ram_word64_set$ADDRB = rg_addr[11:3];
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_4;
      default: ram_word64_set$ADDRB = 9'b010101010 /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$DIA =
	     MUX_ram_word64_set$a_put_1__SEL_1 ?
	       master_xactor_rg_rd_data[63:0] :
	       MUX_ram_word64_set$a_put_3__VAL_2 ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  MUX_ram_word64_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_rl_rereq or WILL_FIRE_RL_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_ram_word64_set$b_put_1__SEL_2:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_rereq:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: ram_word64_set$DIB =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$WEA = 1'd1 ;
  assign ram_word64_set$WEB = 1'd0 ;
  assign ram_word64_set$ENA =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d301 ;
  assign ram_word64_set$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_09_EQ_0b0_10_OR_req_f3_BITS_ETC___d939 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = { 32'd0, rg_addr } ;
  assign soc_map$m_is_near_mem_IO_addr_addr = { 32'd0, rg_pa } ;

  // remaining internal signals
  assign IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_1_EL_ETC___d263 =
	     (rg_addr[2:0] == 3'h0) ? 64'd1 : 64'd0 ;
  assign IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_mast_ETC___d797 =
	     (rg_addr[2:0] == 3'h0) ? master_xactor_rg_rd_data[63:0] : 64'd0 ;
  assign IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d249 =
	     (rg_addr[2:0] == 3'h0) ? word64__h5182 : 64'd0 ;
  assign IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_rg_st_amo_val_ETC___d358 =
	     (rg_f3 == 3'b010) ?
	       { {32{rg_st_amo_val_BITS_31_TO_0__q37[31]}},
		 rg_st_amo_val_BITS_31_TO_0__q37 } :
	       rg_st_amo_val ;
  assign IF_rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_ETC___d103 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       4'd8 :
	       IF_rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_ETC___d102 ;
  assign IF_rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_ETC___d102 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       4'd11 :
	       ((!ram_state_and_ctag_cset$DOB[22] ||
		 !ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71) ?
		  4'd8 :
		  4'd11) ;
  assign IF_rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_ETC___d447 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       mem_req_wr_data_wdata__h18803 :
	       mem_req_wr_data_wdata__h19561 ;
  assign IF_rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_ETC___d75 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       rg_op_0_EQ_2_2_AND_rg_amo_funct7_3_BITS_6_TO_2_ETC___d64 :
	       !ram_state_and_ctag_cset$DOB[22] ||
	       !ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71 ||
	       !master_xactor_crg_wr_addr_full$port2__read &&
	       !master_xactor_crg_wr_data_full$port2__read ;
  assign NOT_cfg_verbosity_read__0_ULE_1_1___d12 = cfg_verbosity > 4'd1 ;
  assign NOT_cfg_verbosity_read__0_ULE_2_41___d542 = cfg_verbosity > 4'd2 ;
  assign NOT_ram_state_and_ctag_cset_b_read__5_BIT_22_6_ETC___d111 =
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     rg_addr_7_EQ_rg_lrsc_pa_4___d109 ;
  assign NOT_req_f3_BITS_1_TO_0_09_EQ_0b0_10_11_AND_NOT_ETC___d930 =
	     req_f3[1:0] != 2'b0 && (req_f3[1:0] != 2'b01 || req_addr[0]) &&
	     (req_f3[1:0] != 2'b10 || req_addr[1:0] != 2'b0) &&
	     (req_f3[1:0] != 2'b11 || req_addr[2:0] != 3'b0) ;
  assign NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d430 =
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d428 ||
	      NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d298) ;
  assign NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d475 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_0_EQ_2_2_0_OR_NOT_rg_amo_funct7_3_BI_ETC___d473 ;
  assign NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d484 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_0_EQ_2_2_0_OR_NOT_rg_amo_funct7_3_BI_ETC___d482 ;
  assign NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d490 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_0_EQ_2_2_0_OR_NOT_rg_amo_funct7_3_BI_ETC___d488 ;
  assign NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d98 =
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_4_EQ_rg_addr_7___d55) ;
  assign NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d120 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71 &&
	     rg_addr_7_EQ_rg_lrsc_pa_4___d109 ;
  assign NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d298 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71 ;
  assign NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d498 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71) &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d12 ;
  assign NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d502 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71 &&
	     ctr_wr_rsps_pending_crg == 4'd15 ;
  assign NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d508 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71 &&
	     rg_addr_7_EQ_rg_lrsc_pa_4___d109 &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d12 ;
  assign NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d513 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71 &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d12 ;
  assign NOT_rg_op_0_EQ_2_2_0_OR_NOT_rg_amo_funct7_3_BI_ETC___d296 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_4_EQ_rg_addr_7___d55) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71 ;
  assign NOT_rg_op_0_EQ_2_2_0_OR_NOT_rg_amo_funct7_3_BI_ETC___d473 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_4_EQ_rg_addr_7___d55) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71 &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d12 ;
  assign NOT_rg_op_0_EQ_2_2_0_OR_NOT_rg_amo_funct7_3_BI_ETC___d477 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_4_EQ_rg_addr_7___d55) &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71) &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d12 ;
  assign NOT_rg_op_0_EQ_2_2_0_OR_NOT_rg_amo_funct7_3_BI_ETC___d482 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_4_EQ_rg_addr_7___d55) &&
	     ctr_wr_rsps_pending_crg == 4'd15 ;
  assign NOT_rg_op_0_EQ_2_2_0_OR_NOT_rg_amo_funct7_3_BI_ETC___d488 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_4_EQ_rg_addr_7___d55) &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d12 ;
  assign NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d290 =
	     !soc_map$m_is_IO_addr && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	      rg_op != 2'd1 && ram_state_and_ctag_cset$DOB[22] &&
	      ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71) ;
  assign NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d301 =
	     !soc_map$m_is_IO_addr && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d299 ;
  assign NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d504 =
	     !soc_map$m_is_IO_addr && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d502 ;
  assign NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d512 =
	     !soc_map$m_is_IO_addr && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d298 ;
  assign NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d515 =
	     !soc_map$m_is_IO_addr && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d513 ;
  assign _theResult___fst__h18921 = rg_st_amo_val << shift_bits__h19481 ;
  assign _theResult___fst__h19679 = new_st_val__h5344 << shift_bits__h19481 ;
  assign _theResult___fst__h26404 = rg_st_amo_val << shift_bits__h27484 ;
  assign _theResult___fst__h27753 = word64__h27481 << shift_bits__h27484 ;
  assign access_exc_code__h3108 =
	     dmem_not_imem ?
	       ((rg_op == 2'd0 ||
		 rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
		  4'd5 :
		  4'd7) :
	       4'd1 ;
  assign b__h20504 =
	     ctr_wr_rsps_pending_crg$EN_port0__write ?
	       ctr_wr_rsps_pending_crg$port0__write_1 :
	       ctr_wr_rsps_pending_crg ;
  assign cline_addr__h21214 = { rg_pa[31:5], 5'd0 } ;
  assign cline_fabric_addr__h21215 =
	     { 32'd0, cline_addr__h21214 } | rg_req_byte_in_cline ;
  assign f_near_mem_io_rspsD_OUT_BITS_15_TO_0__q17 =
	     f_near_mem_io_rsps$D_OUT[15:0] ;
  assign f_near_mem_io_rspsD_OUT_BITS_31_TO_0__q19 =
	     f_near_mem_io_rsps$D_OUT[31:0] ;
  assign f_near_mem_io_rspsD_OUT_BITS_7_TO_0__q15 =
	     f_near_mem_io_rsps$D_OUT[7:0] ;
  assign fabric_addr__h27023 = { 32'd0, rg_pa } ;
  assign io_req_wr_addr_awaddr__h27476 = { 32'd0, x__h27501 } ;
  assign lrsc_result__h13075 =
	     !rg_lrsc_valid || !rg_lrsc_pa_4_EQ_rg_addr_7___d55 ;
  assign master_xactor_crg_rd_data_full_port1__read__45_ETC___d731 =
	     master_xactor_crg_rd_data_full$port1__read &&
	     (master_xactor_rg_rd_data[65:64] != 2'd0 ||
	      !master_xactor_crg_wr_addr_full$port2__read &&
	      !master_xactor_crg_wr_data_full$port2__read) ;
  assign master_xactor_rg_rd_data_BITS_15_TO_0__q2 =
	     master_xactor_rg_rd_data[15:0] ;
  assign master_xactor_rg_rd_data_BITS_15_TO_8__q4 =
	     master_xactor_rg_rd_data[15:8] ;
  assign master_xactor_rg_rd_data_BITS_23_TO_16__q5 =
	     master_xactor_rg_rd_data[23:16] ;
  assign master_xactor_rg_rd_data_BITS_31_TO_0__q3 =
	     master_xactor_rg_rd_data[31:0] ;
  assign master_xactor_rg_rd_data_BITS_31_TO_16__q6 =
	     master_xactor_rg_rd_data[31:16] ;
  assign master_xactor_rg_rd_data_BITS_31_TO_24__q7 =
	     master_xactor_rg_rd_data[31:24] ;
  assign master_xactor_rg_rd_data_BITS_39_TO_32__q8 =
	     master_xactor_rg_rd_data[39:32] ;
  assign master_xactor_rg_rd_data_BITS_47_TO_32__q9 =
	     master_xactor_rg_rd_data[47:32] ;
  assign master_xactor_rg_rd_data_BITS_47_TO_40__q11 =
	     master_xactor_rg_rd_data[47:40] ;
  assign master_xactor_rg_rd_data_BITS_55_TO_48__q12 =
	     master_xactor_rg_rd_data[55:48] ;
  assign master_xactor_rg_rd_data_BITS_63_TO_32__q10 =
	     master_xactor_rg_rd_data[63:32] ;
  assign master_xactor_rg_rd_data_BITS_63_TO_48__q13 =
	     master_xactor_rg_rd_data[63:48] ;
  assign master_xactor_rg_rd_data_BITS_63_TO_56__q14 =
	     master_xactor_rg_rd_data[63:56] ;
  assign master_xactor_rg_rd_data_BITS_7_TO_0__q1 =
	     master_xactor_rg_rd_data[7:0] ;
  assign mem_req_wr_addr_awaddr__h19474 = { 32'd0, x__h19498 } ;
  assign new_ld_val7408_BITS_15_TO_0__q42 = new_ld_val__h27408[15:0] ;
  assign new_ld_val7408_BITS_31_TO_0__q43 = new_ld_val__h27408[31:0] ;
  assign new_ld_val7408_BITS_7_TO_0__q41 = new_ld_val__h27408[7:0] ;
  assign new_st_val__h13523 = { 32'd0, _theResult_____2__h13519[31:0] } ;
  assign new_st_val__h13615 =
	     IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_IF_rg_f3_30_E_ETC___d294 +
	     IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_rg_st_amo_val_ETC___d358 ;
  assign new_st_val__h14595 = w1__h13511 ^ w2__h27765 ;
  assign new_st_val__h14599 = w1__h13511 & w2__h27765 ;
  assign new_st_val__h14603 = w1__h13511 | w2__h27765 ;
  assign new_st_val__h14607 =
	     (w1__h13511 < w2__h27765) ? w1__h13511 : w2__h27765 ;
  assign new_st_val__h14612 =
	     (w1__h13511 <= w2__h27765) ? w2__h27765 : w1__h13511 ;
  assign new_st_val__h14618 =
	     ((IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_IF_rg_f3_30_E_ETC___d294 ^
	       64'h8000000000000000) <
	      (IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_rg_st_amo_val_ETC___d358 ^
	       64'h8000000000000000)) ?
	       w1__h13511 :
	       w2__h27765 ;
  assign new_st_val__h14623 =
	     ((IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_IF_rg_f3_30_E_ETC___d294 ^
	       64'h8000000000000000) <=
	      (IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_rg_st_amo_val_ETC___d358 ^
	       64'h8000000000000000)) ?
	       w2__h27765 :
	       w1__h13511 ;
  assign new_st_val__h27775 = { 32'd0, _theResult_____2__h27771[31:0] } ;
  assign new_st_val__h27866 =
	     new_ld_val__h27408 +
	     IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_rg_st_amo_val_ETC___d358 ;
  assign new_st_val__h28820 = w1__h27763 ^ w2__h27765 ;
  assign new_st_val__h28824 = w1__h27763 & w2__h27765 ;
  assign new_st_val__h28828 = w1__h27763 | w2__h27765 ;
  assign new_st_val__h28832 =
	     (w1__h27763 < w2__h27765) ? w1__h27763 : w2__h27765 ;
  assign new_st_val__h28837 =
	     (w1__h27763 <= w2__h27765) ? w2__h27765 : w1__h27763 ;
  assign new_st_val__h28843 =
	     ((new_ld_val__h27408 ^ 64'h8000000000000000) <
	      (IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_rg_st_amo_val_ETC___d358 ^
	       64'h8000000000000000)) ?
	       w1__h27763 :
	       w2__h27765 ;
  assign new_st_val__h28848 =
	     ((new_ld_val__h27408 ^ 64'h8000000000000000) <=
	      (IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_rg_st_amo_val_ETC___d358 ^
	       64'h8000000000000000)) ?
	       w2__h27765 :
	       w1__h27763 ;
  assign new_st_val__h5344 =
	     (rg_f3 == 3'b010) ?
	       new_st_val__h13523 :
	       _theResult_____2__h13519 ;
  assign new_value404_BITS_31_TO_0__q36 = new_value__h5404[31:0] ;
  assign pa_ctag__h5040 = { 2'd0, rg_addr[31:12] } ;
  assign ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71 =
	     ram_state_and_ctag_cset$DOB[21:0] == pa_ctag__h5040 ;
  assign ram_state_and_ctag_cset_b_read__5_BIT_22_6_AND_ETC___d112 =
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71 &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 ||
	     NOT_ram_state_and_ctag_cset_b_read__5_BIT_22_6_ETC___d111 ;
  assign req_f3_BITS_1_TO_0_09_EQ_0b0_10_OR_req_f3_BITS_ETC___d939 =
	     req_f3[1:0] == 2'b0 || req_f3[1:0] == 2'b01 && !req_addr[0] ||
	     req_f3[1:0] == 2'b10 && req_addr[1:0] == 2'b0 ||
	     req_f3[1:0] == 2'b11 && req_addr[2:0] == 3'b0 ;
  assign result__h11815 =
	     { {56{word64182_BITS_15_TO_8__q24[7]}},
	       word64182_BITS_15_TO_8__q24 } ;
  assign result__h11843 =
	     { {56{word64182_BITS_23_TO_16__q25[7]}},
	       word64182_BITS_23_TO_16__q25 } ;
  assign result__h11871 =
	     { {56{word64182_BITS_31_TO_24__q27[7]}},
	       word64182_BITS_31_TO_24__q27 } ;
  assign result__h11899 =
	     { {56{word64182_BITS_39_TO_32__q28[7]}},
	       word64182_BITS_39_TO_32__q28 } ;
  assign result__h11927 =
	     { {56{word64182_BITS_47_TO_40__q31[7]}},
	       word64182_BITS_47_TO_40__q31 } ;
  assign result__h11955 =
	     { {56{word64182_BITS_55_TO_48__q32[7]}},
	       word64182_BITS_55_TO_48__q32 } ;
  assign result__h11983 =
	     { {56{word64182_BITS_63_TO_56__q34[7]}},
	       word64182_BITS_63_TO_56__q34 } ;
  assign result__h12028 = { 56'd0, word64__h5182[7:0] } ;
  assign result__h12056 = { 56'd0, word64__h5182[15:8] } ;
  assign result__h12084 = { 56'd0, word64__h5182[23:16] } ;
  assign result__h12112 = { 56'd0, word64__h5182[31:24] } ;
  assign result__h12140 = { 56'd0, word64__h5182[39:32] } ;
  assign result__h12168 = { 56'd0, word64__h5182[47:40] } ;
  assign result__h12196 = { 56'd0, word64__h5182[55:48] } ;
  assign result__h12224 = { 56'd0, word64__h5182[63:56] } ;
  assign result__h12269 =
	     { {48{word64182_BITS_15_TO_0__q22[15]}},
	       word64182_BITS_15_TO_0__q22 } ;
  assign result__h12297 =
	     { {48{word64182_BITS_31_TO_16__q26[15]}},
	       word64182_BITS_31_TO_16__q26 } ;
  assign result__h12325 =
	     { {48{word64182_BITS_47_TO_32__q29[15]}},
	       word64182_BITS_47_TO_32__q29 } ;
  assign result__h12353 =
	     { {48{word64182_BITS_63_TO_48__q33[15]}},
	       word64182_BITS_63_TO_48__q33 } ;
  assign result__h12394 = { 48'd0, word64__h5182[15:0] } ;
  assign result__h12422 = { 48'd0, word64__h5182[31:16] } ;
  assign result__h12450 = { 48'd0, word64__h5182[47:32] } ;
  assign result__h12478 = { 48'd0, word64__h5182[63:48] } ;
  assign result__h12519 =
	     { {32{word64182_BITS_31_TO_0__q23[31]}},
	       word64182_BITS_31_TO_0__q23 } ;
  assign result__h12547 =
	     { {32{word64182_BITS_63_TO_32__q30[31]}},
	       word64182_BITS_63_TO_32__q30 } ;
  assign result__h12586 = { 32'd0, word64__h5182[31:0] } ;
  assign result__h12614 = { 32'd0, word64__h5182[63:32] } ;
  assign result__h23936 =
	     { {56{master_xactor_rg_rd_data_BITS_7_TO_0__q1[7]}},
	       master_xactor_rg_rd_data_BITS_7_TO_0__q1 } ;
  assign result__h23963 = { 56'd0, master_xactor_rg_rd_data[7:0] } ;
  assign result__h23989 =
	     { {48{master_xactor_rg_rd_data_BITS_15_TO_0__q2[15]}},
	       master_xactor_rg_rd_data_BITS_15_TO_0__q2 } ;
  assign result__h24015 = { 48'd0, master_xactor_rg_rd_data[15:0] } ;
  assign result__h24041 =
	     { {32{master_xactor_rg_rd_data_BITS_31_TO_0__q3[31]}},
	       master_xactor_rg_rd_data_BITS_31_TO_0__q3 } ;
  assign result__h24067 = { 32'd0, master_xactor_rg_rd_data[31:0] } ;
  assign result__h24863 =
	     { {56{f_near_mem_io_rspsD_OUT_BITS_7_TO_0__q15[7]}},
	       f_near_mem_io_rspsD_OUT_BITS_7_TO_0__q15 } ;
  assign result__h24890 = { 56'd0, f_near_mem_io_rsps$D_OUT[7:0] } ;
  assign result__h24916 =
	     { {48{f_near_mem_io_rspsD_OUT_BITS_15_TO_0__q17[15]}},
	       f_near_mem_io_rspsD_OUT_BITS_15_TO_0__q17 } ;
  assign result__h24942 = { 48'd0, f_near_mem_io_rsps$D_OUT[15:0] } ;
  assign result__h24968 =
	     { {32{f_near_mem_io_rspsD_OUT_BITS_31_TO_0__q19[31]}},
	       f_near_mem_io_rspsD_OUT_BITS_31_TO_0__q19 } ;
  assign result__h24994 = { 32'd0, f_near_mem_io_rsps$D_OUT[31:0] } ;
  assign result__h25246 =
	     { {56{rg_ld_val_BITS_7_TO_0__q16[7]}},
	       rg_ld_val_BITS_7_TO_0__q16 } ;
  assign result__h25273 = { 56'd0, rg_ld_val[7:0] } ;
  assign result__h25300 =
	     { {48{rg_ld_val_BITS_15_TO_0__q18[15]}},
	       rg_ld_val_BITS_15_TO_0__q18 } ;
  assign result__h25327 = { 48'd0, rg_ld_val[15:0] } ;
  assign result__h25354 =
	     { {32{rg_ld_val_BITS_31_TO_0__q20[31]}},
	       rg_ld_val_BITS_31_TO_0__q20 } ;
  assign result__h25381 = { 32'd0, rg_ld_val[31:0] } ;
  assign result__h27983 =
	     { {56{master_xactor_rg_rd_data_BITS_15_TO_8__q4[7]}},
	       master_xactor_rg_rd_data_BITS_15_TO_8__q4 } ;
  assign result__h28010 =
	     { {56{master_xactor_rg_rd_data_BITS_23_TO_16__q5[7]}},
	       master_xactor_rg_rd_data_BITS_23_TO_16__q5 } ;
  assign result__h28037 =
	     { {56{master_xactor_rg_rd_data_BITS_31_TO_24__q7[7]}},
	       master_xactor_rg_rd_data_BITS_31_TO_24__q7 } ;
  assign result__h28064 =
	     { {56{master_xactor_rg_rd_data_BITS_39_TO_32__q8[7]}},
	       master_xactor_rg_rd_data_BITS_39_TO_32__q8 } ;
  assign result__h28091 =
	     { {56{master_xactor_rg_rd_data_BITS_47_TO_40__q11[7]}},
	       master_xactor_rg_rd_data_BITS_47_TO_40__q11 } ;
  assign result__h28118 =
	     { {56{master_xactor_rg_rd_data_BITS_55_TO_48__q12[7]}},
	       master_xactor_rg_rd_data_BITS_55_TO_48__q12 } ;
  assign result__h28145 =
	     { {56{master_xactor_rg_rd_data_BITS_63_TO_56__q14[7]}},
	       master_xactor_rg_rd_data_BITS_63_TO_56__q14 } ;
  assign result__h28216 = { 56'd0, master_xactor_rg_rd_data[15:8] } ;
  assign result__h28243 = { 56'd0, master_xactor_rg_rd_data[23:16] } ;
  assign result__h28270 = { 56'd0, master_xactor_rg_rd_data[31:24] } ;
  assign result__h28297 = { 56'd0, master_xactor_rg_rd_data[39:32] } ;
  assign result__h28324 = { 56'd0, master_xactor_rg_rd_data[47:40] } ;
  assign result__h28351 = { 56'd0, master_xactor_rg_rd_data[55:48] } ;
  assign result__h28378 = { 56'd0, master_xactor_rg_rd_data[63:56] } ;
  assign result__h28449 =
	     { {48{master_xactor_rg_rd_data_BITS_31_TO_16__q6[15]}},
	       master_xactor_rg_rd_data_BITS_31_TO_16__q6 } ;
  assign result__h28476 =
	     { {48{master_xactor_rg_rd_data_BITS_47_TO_32__q9[15]}},
	       master_xactor_rg_rd_data_BITS_47_TO_32__q9 } ;
  assign result__h28503 =
	     { {48{master_xactor_rg_rd_data_BITS_63_TO_48__q13[15]}},
	       master_xactor_rg_rd_data_BITS_63_TO_48__q13 } ;
  assign result__h28570 = { 48'd0, master_xactor_rg_rd_data[31:16] } ;
  assign result__h28597 = { 48'd0, master_xactor_rg_rd_data[47:32] } ;
  assign result__h28624 = { 48'd0, master_xactor_rg_rd_data[63:48] } ;
  assign result__h28691 =
	     { {32{master_xactor_rg_rd_data_BITS_63_TO_32__q10[31]}},
	       master_xactor_rg_rd_data_BITS_63_TO_32__q10 } ;
  assign result__h28756 = { 32'd0, master_xactor_rg_rd_data[63:32] } ;
  assign result__h29220 =
	     { {56{new_ld_val7408_BITS_7_TO_0__q41[7]}},
	       new_ld_val7408_BITS_7_TO_0__q41 } ;
  assign result__h29250 = { 56'd0, new_ld_val__h27408[7:0] } ;
  assign result__h29277 =
	     { {48{new_ld_val7408_BITS_15_TO_0__q42[15]}},
	       new_ld_val7408_BITS_15_TO_0__q42 } ;
  assign result__h29304 = { 48'd0, new_ld_val__h27408[15:0] } ;
  assign result__h29331 =
	     { {32{new_ld_val7408_BITS_31_TO_0__q43[31]}},
	       new_ld_val7408_BITS_31_TO_0__q43 } ;
  assign result__h29358 = { 32'd0, new_ld_val__h27408[31:0] } ;
  assign result__h5459 =
	     { {56{word64182_BITS_7_TO_0__q21[7]}},
	       word64182_BITS_7_TO_0__q21 } ;
  assign rg_addr_7_EQ_rg_lrsc_pa_4___d109 = rg_addr == rg_lrsc_pa ;
  assign rg_amo_funct7_3_BITS_6_TO_2_4_EQ_0b10_5_AND_NO_ETC___d284 =
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71) &&
	     rg_addr_7_EQ_rg_lrsc_pa_4___d109 &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d12 ;
  assign rg_ld_val_BITS_15_TO_0__q18 = rg_ld_val[15:0] ;
  assign rg_ld_val_BITS_31_TO_0__q20 = rg_ld_val[31:0] ;
  assign rg_ld_val_BITS_7_TO_0__q16 = rg_ld_val[7:0] ;
  assign rg_lrsc_pa_4_EQ_rg_addr_7___d55 = rg_lrsc_pa == rg_addr ;
  assign rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d123 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset_b_read__5_BIT_22_6_AND_ETC___d112 ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d121 ;
  assign rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d125 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71 ;
  assign rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d128 =
	     rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d125 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h13075 ;
  assign rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d267 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71 &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d12 ;
  assign rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d280 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71) &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d12 ;
  assign rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d88 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71) ;
  assign rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d121 =
	     rg_op == 2'd1 && rg_addr_7_EQ_rg_lrsc_pa_4___d109 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	     NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d120 ;
  assign rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d299 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_0_EQ_2_2_0_OR_NOT_rg_amo_funct7_3_BI_ETC___d296 ||
	     NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d298 ;
  assign rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d428 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_4_EQ_rg_addr_7___d55) ;
  assign rg_op_0_EQ_2_2_AND_rg_amo_funct7_3_BITS_6_TO_2_ETC___d494 =
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h13075 &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d12 ;
  assign rg_op_0_EQ_2_2_AND_rg_amo_funct7_3_BITS_6_TO_2_ETC___d64 =
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h13075 ||
	     !master_xactor_crg_wr_addr_full$port2__read &&
	     !master_xactor_crg_wr_data_full$port2__read ;
  assign rg_st_amo_val_BITS_31_TO_0__q37 = rg_st_amo_val[31:0] ;
  assign rg_state_EQ_12_87_AND_rg_op_0_EQ_0_1_OR_rg_op__ETC___d592 =
	     rg_state == 4'd12 &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     !soc_map$m_is_near_mem_IO_addr ;
  assign rg_state_EQ_12_87_AND_rg_op_0_EQ_0_1_OR_rg_op__ETC___d629 =
	     rg_state == 4'd12 &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     soc_map$m_is_near_mem_IO_addr ;
  assign shift_bits__h19481 = { rg_addr[2:0], 3'b0 } ;
  assign shift_bits__h27484 = { rg_pa[2:0], 3'b0 } ;
  assign strobe64__h19678 = 8'b00000001 << rg_addr[2:0] ;
  assign strobe64__h19721 = 8'b00000011 << rg_addr[2:0] ;
  assign strobe64__h19744 = 8'b00001111 << rg_addr[2:0] ;
  assign strobe64__h27752 = 8'b00000001 << rg_pa[2:0] ;
  assign strobe64__h28906 = 8'b00000011 << rg_pa[2:0] ;
  assign strobe64__h28929 = 8'b00001111 << rg_pa[2:0] ;
  assign w17759_BITS_31_TO_0__q40 = w1__h27759[31:0] ;
  assign w1___1__h13582 = { 32'd0, new_value__h5404[31:0] } ;
  assign w1___1__h27834 = { 32'd0, w1__h27759[31:0] } ;
  assign w2___1__h27835 = { 32'd0, rg_st_amo_val[31:0] } ;
  assign w2__h27765 = (rg_f3 == 3'b010) ? w2___1__h27835 : rg_st_amo_val ;
  assign word64182_BITS_15_TO_0__q22 = word64__h5182[15:0] ;
  assign word64182_BITS_15_TO_8__q24 = word64__h5182[15:8] ;
  assign word64182_BITS_23_TO_16__q25 = word64__h5182[23:16] ;
  assign word64182_BITS_31_TO_0__q23 = word64__h5182[31:0] ;
  assign word64182_BITS_31_TO_16__q26 = word64__h5182[31:16] ;
  assign word64182_BITS_31_TO_24__q27 = word64__h5182[31:24] ;
  assign word64182_BITS_39_TO_32__q28 = word64__h5182[39:32] ;
  assign word64182_BITS_47_TO_32__q29 = word64__h5182[47:32] ;
  assign word64182_BITS_47_TO_40__q31 = word64__h5182[47:40] ;
  assign word64182_BITS_55_TO_48__q32 = word64__h5182[55:48] ;
  assign word64182_BITS_63_TO_32__q30 = word64__h5182[63:32] ;
  assign word64182_BITS_63_TO_48__q33 = word64__h5182[63:48] ;
  assign word64182_BITS_63_TO_56__q34 = word64__h5182[63:56] ;
  assign word64182_BITS_7_TO_0__q21 = word64__h5182[7:0] ;
  assign word64__h27481 =
	     (rg_f3 == 3'b010) ?
	       new_st_val__h27775 :
	       _theResult_____2__h27771 ;
  assign word64__h5182 = ram_word64_set$DOB & y__h5495 ;
  assign x__h13085 = { 63'd0, lrsc_result__h13075 } ;
  assign x__h19498 = { rg_addr[31:3], 3'd0 } ;
  assign x__h27501 = { rg_pa[31:3], 3'd0 } ;
  assign y__h5495 =
	     {64{ram_state_and_ctag_cset$DOB[22] &&
		 ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71}} ;
  always@(rg_f3 or strobe64__h27752 or strobe64__h28906 or strobe64__h28929)
  begin
    case (rg_f3[1:0])
      2'b0: io_req_wr_data_wstrb__h27636 = strobe64__h27752;
      2'b01: io_req_wr_data_wstrb__h27636 = strobe64__h28906;
      2'b10: io_req_wr_data_wstrb__h27636 = strobe64__h28929;
      2'b11: io_req_wr_data_wstrb__h27636 = 8'b11111111;
    endcase
  end
  always@(rg_f3 or strobe64__h19678 or strobe64__h19721 or strobe64__h19744)
  begin
    case (rg_f3[1:0])
      2'b0: mem_req_wr_data_wstrb__h19562 = strobe64__h19678;
      2'b01: mem_req_wr_data_wstrb__h19562 = strobe64__h19721;
      2'b10: mem_req_wr_data_wstrb__h19562 = strobe64__h19744;
      2'b11: mem_req_wr_data_wstrb__h19562 = 8'b11111111;
    endcase
  end
  always@(rg_f3 or rg_st_amo_val or _theResult___fst__h18921)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h18803 = _theResult___fst__h18921;
      2'd3: mem_req_wr_data_wdata__h18803 = rg_st_amo_val;
    endcase
  end
  always@(rg_f3 or rg_st_amo_val or _theResult___fst__h26404)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10: value__h26681 = _theResult___fst__h26404;
      2'd3: value__h26681 = rg_st_amo_val;
    endcase
  end
  always@(rg_addr or
	  result__h5459 or
	  result__h11815 or
	  result__h11843 or
	  result__h11871 or
	  result__h11899 or
	  result__h11927 or result__h11955 or result__h11983)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d196 =
	      result__h5459;
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d196 =
	      result__h11815;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d196 =
	      result__h11843;
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d196 =
	      result__h11871;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d196 =
	      result__h11899;
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d196 =
	      result__h11927;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d196 =
	      result__h11955;
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d196 =
	      result__h11983;
    endcase
  end
  always@(rg_addr or
	  result__h12028 or
	  result__h12056 or
	  result__h12084 or
	  result__h12112 or
	  result__h12140 or
	  result__h12168 or result__h12196 or result__h12224)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d213 =
	      result__h12028;
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d213 =
	      result__h12056;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d213 =
	      result__h12084;
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d213 =
	      result__h12112;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d213 =
	      result__h12140;
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d213 =
	      result__h12168;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d213 =
	      result__h12196;
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d213 =
	      result__h12224;
    endcase
  end
  always@(rg_addr or
	  result__h12269 or
	  result__h12297 or result__h12325 or result__h12353)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d226 =
	      result__h12269;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d226 =
	      result__h12297;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d226 =
	      result__h12325;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d226 =
	      result__h12353;
      default: IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d226 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h12394 or
	  result__h12422 or result__h12450 or result__h12478)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d235 =
	      result__h12394;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d235 =
	      result__h12422;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d235 =
	      result__h12450;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d235 =
	      result__h12478;
      default: IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d235 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h12586 or result__h12614)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d247 =
	      result__h12586;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d247 =
	      result__h12614;
      default: IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d247 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h12519 or result__h12547)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result2519_0x4_re_ETC__q35 =
	      result__h12519;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result2519_0x4_re_ETC__q35 =
	      result__h12547;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result2519_0x4_re_ETC__q35 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d196 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d226 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result2519_0x4_re_ETC__q35 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d249 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d213 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d235 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d247)
  begin
    case (rg_f3)
      3'b0:
	  new_value__h5404 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d196;
      3'b001:
	  new_value__h5404 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d226;
      3'b010:
	  new_value__h5404 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result2519_0x4_re_ETC__q35;
      3'b011:
	  new_value__h5404 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d249;
      3'b100:
	  new_value__h5404 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d213;
      3'b101:
	  new_value__h5404 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d235;
      3'b110:
	  new_value__h5404 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d247;
      3'd7: new_value__h5404 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d196 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d226 or
	  w1___1__h13582 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d249 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d213 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d235 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d247)
  begin
    case (rg_f3)
      3'b0:
	  w1__h13511 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d196;
      3'b001:
	  w1__h13511 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d226;
      3'b010: w1__h13511 = w1___1__h13582;
      3'b011:
	  w1__h13511 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d249;
      3'b100:
	  w1__h13511 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d213;
      3'b101:
	  w1__h13511 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d235;
      3'b110:
	  w1__h13511 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d247;
      3'd7: w1__h13511 = 64'd0;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d343 =
	      { ram_word64_set$DOB[63:16], rg_st_amo_val[15:0] };
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d343 =
	      { ram_word64_set$DOB[63:32],
		rg_st_amo_val[15:0],
		ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d343 =
	      { ram_word64_set$DOB[63:48],
		rg_st_amo_val[15:0],
		ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d343 =
	      { rg_st_amo_val[15:0], ram_word64_set$DOB[47:0] };
      default: IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d343 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d334 =
	      { ram_word64_set$DOB[63:8], rg_st_amo_val[7:0] };
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d334 =
	      { ram_word64_set$DOB[63:16],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d334 =
	      { ram_word64_set$DOB[63:24],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d334 =
	      { ram_word64_set$DOB[63:32],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d334 =
	      { ram_word64_set$DOB[63:40],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d334 =
	      { ram_word64_set$DOB[63:48],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d334 =
	      { ram_word64_set$DOB[63:56],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d334 =
	      { rg_st_amo_val[7:0], ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d196 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d226 or
	  new_value404_BITS_31_TO_0__q36 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d249 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d213 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d235 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d247)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_IF_rg_f3_30_E_ETC___d294 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d196;
      3'b001:
	  IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_IF_rg_f3_30_E_ETC___d294 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d226;
      3'b010:
	  IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_IF_rg_f3_30_E_ETC___d294 =
	      { {32{new_value404_BITS_31_TO_0__q36[31]}},
		new_value404_BITS_31_TO_0__q36 };
      3'b011:
	  IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_IF_rg_f3_30_E_ETC___d294 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d249;
      3'b100:
	  IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_IF_rg_f3_30_E_ETC___d294 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d213;
      3'b101:
	  IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_IF_rg_f3_30_E_ETC___d294 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d235;
      3'b110:
	  IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_IF_rg_f3_30_E_ETC___d294 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d247;
      3'd7: IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_IF_rg_f3_30_E_ETC___d294 = 64'd0;
    endcase
  end
  always@(rg_amo_funct7 or
	  new_st_val__h14623 or
	  new_st_val__h13615 or
	  w2__h27765 or
	  new_st_val__h14595 or
	  new_st_val__h14603 or
	  new_st_val__h14599 or
	  new_st_val__h14618 or new_st_val__h14607 or new_st_val__h14612)
  begin
    case (rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h13519 = new_st_val__h13615;
      5'b00001: _theResult_____2__h13519 = w2__h27765;
      5'b00100: _theResult_____2__h13519 = new_st_val__h14595;
      5'b01000: _theResult_____2__h13519 = new_st_val__h14603;
      5'b01100: _theResult_____2__h13519 = new_st_val__h14599;
      5'b10000: _theResult_____2__h13519 = new_st_val__h14618;
      5'b11000: _theResult_____2__h13519 = new_st_val__h14607;
      5'b11100: _theResult_____2__h13519 = new_st_val__h14612;
      default: _theResult_____2__h13519 = new_st_val__h14623;
    endcase
  end
  always@(rg_f3 or new_st_val__h5344 or _theResult___fst__h19679)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h19561 = _theResult___fst__h19679;
      2'd3: mem_req_wr_data_wdata__h19561 = new_st_val__h5344;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or new_st_val__h5344)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d417 =
	      { ram_word64_set$DOB[63:16], new_st_val__h5344[15:0] };
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d417 =
	      { ram_word64_set$DOB[63:32],
		new_st_val__h5344[15:0],
		ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d417 =
	      { ram_word64_set$DOB[63:48],
		new_st_val__h5344[15:0],
		ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d417 =
	      { new_st_val__h5344[15:0], ram_word64_set$DOB[47:0] };
      default: IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d417 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or new_st_val__h5344)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d408 =
	      { ram_word64_set$DOB[63:8], new_st_val__h5344[7:0] };
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d408 =
	      { ram_word64_set$DOB[63:16],
		new_st_val__h5344[7:0],
		ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d408 =
	      { ram_word64_set$DOB[63:24],
		new_st_val__h5344[7:0],
		ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d408 =
	      { ram_word64_set$DOB[63:32],
		new_st_val__h5344[7:0],
		ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d408 =
	      { ram_word64_set$DOB[63:40],
		new_st_val__h5344[7:0],
		ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d408 =
	      { ram_word64_set$DOB[63:48],
		new_st_val__h5344[7:0],
		ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d408 =
	      { ram_word64_set$DOB[63:56],
		new_st_val__h5344[7:0],
		ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d408 =
	      { new_st_val__h5344[7:0], ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q38 =
	      { ram_word64_set$DOB[63:32], rg_st_amo_val[31:0] };
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q38 =
	      { rg_st_amo_val[31:0], ram_word64_set$DOB[31:0] };
      default: CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q38 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or
	  ram_word64_set$DOB or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d334 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d343 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q38 or
	  rg_st_amo_val)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_30_EQ_0b0_31_THEN_IF_rg_addr_7_BITS_2_ETC___d352 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d334;
      3'b001:
	  IF_rg_f3_30_EQ_0b0_31_THEN_IF_rg_addr_7_BITS_2_ETC___d352 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d343;
      3'b010:
	  IF_rg_f3_30_EQ_0b0_31_THEN_IF_rg_addr_7_BITS_2_ETC___d352 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q38;
      3'b011:
	  IF_rg_f3_30_EQ_0b0_31_THEN_IF_rg_addr_7_BITS_2_ETC___d352 =
	      rg_st_amo_val;
      default: IF_rg_f3_30_EQ_0b0_31_THEN_IF_rg_addr_7_BITS_2_ETC___d352 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_addr or result__h24067 or result__h28756)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d796 =
	      result__h24067;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d796 =
	      result__h28756;
      default: IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d796 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h24015 or
	  result__h28570 or result__h28597 or result__h28624)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d789 =
	      result__h24015;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d789 =
	      result__h28570;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d789 =
	      result__h28597;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d789 =
	      result__h28624;
      default: IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d789 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h23989 or
	  result__h28449 or result__h28476 or result__h28503)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d782 =
	      result__h23989;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d782 =
	      result__h28449;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d782 =
	      result__h28476;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d782 =
	      result__h28503;
      default: IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d782 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h23963 or
	  result__h28216 or
	  result__h28243 or
	  result__h28270 or
	  result__h28297 or
	  result__h28324 or result__h28351 or result__h28378)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d772 =
	      result__h23963;
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d772 =
	      result__h28216;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d772 =
	      result__h28243;
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d772 =
	      result__h28270;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d772 =
	      result__h28297;
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d772 =
	      result__h28324;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d772 =
	      result__h28351;
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d772 =
	      result__h28378;
    endcase
  end
  always@(rg_addr or
	  result__h23936 or
	  result__h27983 or
	  result__h28010 or
	  result__h28037 or
	  result__h28064 or
	  result__h28091 or result__h28118 or result__h28145)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d757 =
	      result__h23936;
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d757 =
	      result__h27983;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d757 =
	      result__h28010;
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d757 =
	      result__h28037;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d757 =
	      result__h28064;
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d757 =
	      result__h28091;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d757 =
	      result__h28118;
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d757 =
	      result__h28145;
    endcase
  end
  always@(rg_addr or result__h24041 or result__h28691)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result4041_0x4_re_ETC__q39 =
	      result__h24041;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result4041_0x4_re_ETC__q39 =
	      result__h28691;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result4041_0x4_re_ETC__q39 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d757 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d782 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result4041_0x4_re_ETC__q39 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_mast_ETC___d797 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d772 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d789 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d796)
  begin
    case (rg_f3)
      3'b0:
	  w1__h27759 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d757;
      3'b001:
	  w1__h27759 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d782;
      3'b010:
	  w1__h27759 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result4041_0x4_re_ETC__q39;
      3'b011:
	  w1__h27759 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_mast_ETC___d797;
      3'b100:
	  w1__h27759 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d772;
      3'b101:
	  w1__h27759 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d789;
      3'b110:
	  w1__h27759 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d796;
      3'd7: w1__h27759 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d757 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d782 or
	  w1___1__h27834 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_mast_ETC___d797 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d772 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d789 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d796)
  begin
    case (rg_f3)
      3'b0:
	  w1__h27763 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d757;
      3'b001:
	  w1__h27763 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d782;
      3'b010: w1__h27763 = w1___1__h27834;
      3'b011:
	  w1__h27763 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_mast_ETC___d797;
      3'b100:
	  w1__h27763 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d772;
      3'b101:
	  w1__h27763 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d789;
      3'b110:
	  w1__h27763 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d796;
      3'd7: w1__h27763 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d757 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d782 or
	  w17759_BITS_31_TO_0__q40 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_mast_ETC___d797 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d772 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d789 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d796)
  begin
    case (rg_f3)
      3'b0:
	  new_ld_val__h27408 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d757;
      3'b001:
	  new_ld_val__h27408 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d782;
      3'b010:
	  new_ld_val__h27408 =
	      { {32{w17759_BITS_31_TO_0__q40[31]}},
		w17759_BITS_31_TO_0__q40 };
      3'b011:
	  new_ld_val__h27408 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_mast_ETC___d797;
      3'b100:
	  new_ld_val__h27408 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d772;
      3'b101:
	  new_ld_val__h27408 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d789;
      3'b110:
	  new_ld_val__h27408 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d796;
      3'd7: new_ld_val__h27408 = 64'd0;
    endcase
  end
  always@(rg_amo_funct7 or
	  new_st_val__h28848 or
	  new_st_val__h27866 or
	  w2__h27765 or
	  new_st_val__h28820 or
	  new_st_val__h28828 or
	  new_st_val__h28824 or
	  new_st_val__h28843 or new_st_val__h28832 or new_st_val__h28837)
  begin
    case (rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h27771 = new_st_val__h27866;
      5'b00001: _theResult_____2__h27771 = w2__h27765;
      5'b00100: _theResult_____2__h27771 = new_st_val__h28820;
      5'b01000: _theResult_____2__h27771 = new_st_val__h28828;
      5'b01100: _theResult_____2__h27771 = new_st_val__h28824;
      5'b10000: _theResult_____2__h27771 = new_st_val__h28843;
      5'b11000: _theResult_____2__h27771 = new_st_val__h28832;
      5'b11100: _theResult_____2__h27771 = new_st_val__h28837;
      default: _theResult_____2__h27771 = new_st_val__h28848;
    endcase
  end
  always@(rg_f3 or word64__h27481 or _theResult___fst__h27753)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  io_req_wr_data_wdata__h27635 = _theResult___fst__h27753;
      2'd3: io_req_wr_data_wdata__h27635 = word64__h27481;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or new_st_val__h5344)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q44 =
	      { ram_word64_set$DOB[63:32], new_st_val__h5344[31:0] };
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q44 =
	      { new_st_val__h5344[31:0], ram_word64_set$DOB[31:0] };
      default: CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q44 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or
	  ram_word64_set$DOB or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d408 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d417 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q44 or
	  new_st_val__h5344)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_30_EQ_0b0_31_THEN_IF_rg_addr_7_BITS_2_ETC___d426 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d408;
      3'b001:
	  IF_rg_f3_30_EQ_0b0_31_THEN_IF_rg_addr_7_BITS_2_ETC___d426 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d417;
      3'b010:
	  IF_rg_f3_30_EQ_0b0_31_THEN_IF_rg_addr_7_BITS_2_ETC___d426 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q44;
      3'b011:
	  IF_rg_f3_30_EQ_0b0_31_THEN_IF_rg_addr_7_BITS_2_ETC___d426 =
	      new_st_val__h5344;
      default: IF_rg_f3_30_EQ_0b0_31_THEN_IF_rg_addr_7_BITS_2_ETC___d426 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_1_EL_ETC___d263)
  begin
    case (rg_f3)
      3'b0, 3'b001, 3'b010, 3'b011, 3'b100, 3'b101, 3'b110:
	  new_value__h17673 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_1_EL_ETC___d263;
      3'd7: new_value__h17673 = 64'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	master_xactor_crg_rd_addr_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_rd_data_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_wr_addr_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_wr_data_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_wr_resp_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 7'd0;
	rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_requesting_cline <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (ctr_wr_rsps_pending_crg$EN)
	  ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY
	      ctr_wr_rsps_pending_crg$D_IN;
	if (master_xactor_crg_rd_addr_full$EN)
	  master_xactor_crg_rd_addr_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_rd_addr_full$D_IN;
	if (master_xactor_crg_rd_data_full$EN)
	  master_xactor_crg_rd_data_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_rd_data_full$D_IN;
	if (master_xactor_crg_wr_addr_full$EN)
	  master_xactor_crg_wr_addr_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_wr_addr_full$D_IN;
	if (master_xactor_crg_wr_data_full$EN)
	  master_xactor_crg_wr_data_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_wr_data_full$D_IN;
	if (master_xactor_crg_wr_resp_full$EN)
	  master_xactor_crg_wr_resp_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_wr_resp_full$D_IN;
	if (rg_cset_in_cache$EN)
	  rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY rg_cset_in_cache$D_IN;
	if (rg_lower_word32_full$EN)
	  rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY
	      rg_lower_word32_full$D_IN;
	if (rg_lrsc_valid$EN)
	  rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY rg_lrsc_valid$D_IN;
	if (rg_requesting_cline$EN)
	  rg_requesting_cline <= `BSV_ASSIGNMENT_DELAY
	      rg_requesting_cline$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (master_xactor_rg_rd_addr$EN)
      master_xactor_rg_rd_addr <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_rd_addr$D_IN;
    if (master_xactor_rg_rd_data$EN)
      master_xactor_rg_rd_data <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_rd_data$D_IN;
    if (master_xactor_rg_wr_addr$EN)
      master_xactor_rg_wr_addr <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_wr_addr$D_IN;
    if (master_xactor_rg_wr_data$EN)
      master_xactor_rg_wr_data <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_wr_data$D_IN;
    if (master_xactor_rg_wr_resp$EN)
      master_xactor_rg_wr_resp <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_wr_resp$D_IN;
    if (rg_addr$EN) rg_addr <= `BSV_ASSIGNMENT_DELAY rg_addr$D_IN;
    if (rg_amo_funct7$EN)
      rg_amo_funct7 <= `BSV_ASSIGNMENT_DELAY rg_amo_funct7$D_IN;
    if (rg_error_during_refill$EN)
      rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  rg_error_during_refill$D_IN;
    if (rg_exc_code$EN) rg_exc_code <= `BSV_ASSIGNMENT_DELAY rg_exc_code$D_IN;
    if (rg_f3$EN) rg_f3 <= `BSV_ASSIGNMENT_DELAY rg_f3$D_IN;
    if (rg_ld_val$EN) rg_ld_val <= `BSV_ASSIGNMENT_DELAY rg_ld_val$D_IN;
    if (rg_lower_word32$EN)
      rg_lower_word32 <= `BSV_ASSIGNMENT_DELAY rg_lower_word32$D_IN;
    if (rg_lrsc_pa$EN) rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY rg_lrsc_pa$D_IN;
    if (rg_op$EN) rg_op <= `BSV_ASSIGNMENT_DELAY rg_op$D_IN;
    if (rg_pa$EN) rg_pa <= `BSV_ASSIGNMENT_DELAY rg_pa$D_IN;
    if (rg_pte_pa$EN) rg_pte_pa <= `BSV_ASSIGNMENT_DELAY rg_pte_pa$D_IN;
    if (rg_req_byte_in_cline$EN)
      rg_req_byte_in_cline <= `BSV_ASSIGNMENT_DELAY rg_req_byte_in_cline$D_IN;
    if (rg_st_amo_val$EN)
      rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY rg_st_amo_val$D_IN;
    if (rg_word64_set_in_cache$EN)
      rg_word64_set_in_cache <= `BSV_ASSIGNMENT_DELAY
	  rg_word64_set_in_cache$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    ctr_wr_rsps_pending_crg = 4'hA;
    master_xactor_crg_rd_addr_full = 1'h0;
    master_xactor_crg_rd_data_full = 1'h0;
    master_xactor_crg_wr_addr_full = 1'h0;
    master_xactor_crg_wr_data_full = 1'h0;
    master_xactor_crg_wr_resp_full = 1'h0;
    master_xactor_rg_rd_addr = 67'h2AAAAAAAAAAAAAAAA;
    master_xactor_rg_rd_data = 66'h2AAAAAAAAAAAAAAAA;
    master_xactor_rg_wr_addr = 67'h2AAAAAAAAAAAAAAAA;
    master_xactor_rg_wr_data = 72'hAAAAAAAAAAAAAAAAAA;
    master_xactor_rg_wr_resp = 2'h2;
    rg_addr = 32'hAAAAAAAA;
    rg_amo_funct7 = 7'h2A;
    rg_cset_in_cache = 7'h2A;
    rg_error_during_refill = 1'h0;
    rg_exc_code = 4'hA;
    rg_f3 = 3'h2;
    rg_ld_val = 64'hAAAAAAAAAAAAAAAA;
    rg_lower_word32 = 32'hAAAAAAAA;
    rg_lower_word32_full = 1'h0;
    rg_lrsc_pa = 32'hAAAAAAAA;
    rg_lrsc_valid = 1'h0;
    rg_op = 2'h2;
    rg_pa = 32'hAAAAAAAA;
    rg_pte_pa = 32'hAAAAAAAA;
    rg_req_byte_in_cline = 64'hAAAAAAAAAAAAAAAA;
    rg_requesting_cline = 1'h0;
    rg_st_amo_val = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 4'hA;
    rg_word64_set_in_cache = 9'h0AA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	begin
	  v__h3938 = $stime;
	  #0;
	end
    v__h3932 = v__h3938 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h3932,
		   "D_MMU_Cache",
		   $signed(32'd128),
		   $signed(32'd1));
	else
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h3932,
		   "I_MMU_Cache",
		   $signed(32'd128),
		   $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  f_reset_reqs$D_OUT)
	begin
	  v__h4039 = $stime;
	  #0;
	end
    v__h4033 = v__h4039 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: Flushed", v__h4033, "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_reset: Flushed", v__h4033, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_rereq && NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 rg_addr[11:5],
		 rg_addr[11:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h24459 = $stime;
	  #0;
	end
    v__h24453 = v__h24459 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_near_mem_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h24453,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_near_mem_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h24453,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    ",
		 { 1'd1, fabric_addr__h27023, 72'hAAAAAAAAAAAAAAAAAA });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h24644 = $stime;
	  #0;
	end
    v__h24638 = v__h24644 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_near_mem_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h24638,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_near_mem_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h24638,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("Near_Mem_IO_Rsp { ", "read_not_write: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "ok: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  f_near_mem_io_rsps$D_OUT[64])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  !f_near_mem_io_rsps$D_OUT[64])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", f_near_mem_io_rsps$D_OUT[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  f_near_mem_io_rsps$D_OUT[64] &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h25046 = $stime;
	  #0;
	end
    v__h25040 = v__h25046 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  f_near_mem_io_rsps$D_OUT[64] &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h25040,
		   "D_MMU_Cache",
		   rg_addr,
		   f_near_mem_io_rsps$D_OUT[63:0]);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h25040,
		   "I_MMU_Cache",
		   rg_addr,
		   f_near_mem_io_rsps$D_OUT[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !f_near_mem_io_rsps$D_OUT[64] &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h25153 = $stime;
	  #0;
	end
    v__h25147 = v__h25153 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !f_near_mem_io_rsps$D_OUT[64] &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_near_mem_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h25147,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_near_mem_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h25147,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h25434 = $stime;
	  #0;
	end
    v__h25428 = v__h25434 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h25428,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h25428,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h26621 = $stime;
	  #0;
	end
    v__h26615 = v__h26621 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_near_mem_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h26615,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_near_mem_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h26615,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("Near_Mem_IO_Req { ", "read_not_write: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", fabric_addr__h27023);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", value__h26681);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", io_req_wr_data_wstrb__h27636, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h26763 = $stime;
	  #0;
	end
    v__h26757 = v__h26763 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_near_mem_write_rsp",
		   v__h26757,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_near_mem_write_rsp",
		   v__h26757,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("Near_Mem_IO_Rsp { ", "read_not_write: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "ok: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  f_near_mem_io_rsps$D_OUT[64])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  !f_near_mem_io_rsps$D_OUT[64])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", f_near_mem_io_rsps$D_OUT[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h26943 = $stime;
	  #0;
	end
    v__h26937 = v__h26943 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_AMO_SC_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h26937,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_AMO_SC_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h26937,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    FAIL due to I/O address.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h3573 = $stime;
	  #0;
	end
    v__h3567 = v__h3573 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_reset", v__h3567, "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_start_reset", v__h3567, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_41___d542)
	begin
	  v__h21381 = $stime;
	  #0;
	end
    v__h21375 = v__h21381 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_41___d542)
	if (dmem_not_imem)
	  $write("%0d: %s.rl_cache_refill_req_loop: mem req: ",
		 v__h21375,
		 "D_MMU_Cache");
	else
	  $write("%0d: %s.rl_cache_refill_req_loop: mem req: ",
		 v__h21375,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_41___d542)
	$write("AXI4_Lite_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_41___d542)
	$write("'h%h", cline_fabric_addr__h21215);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_41___d542)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_41___d542)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_41___d542)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_41___d542)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_41___d542)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h4188 = $stime;
	  #0;
	end
    v__h4182 = v__h4188 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h4182,
		   "D_MMU_Cache",
		   rg_addr);
	else
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h4182,
		   "I_MMU_Cache",
		   rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  Word64 0x%0h  Byte 0x%0h}",
		 pa_ctag__h5040,
		 rg_addr[11:5],
		 rg_addr[4:3],
		 rg_addr[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("        CSet 0x%0x: (state, tag):", rg_addr[11:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  !ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  ram_state_and_ctag_cset$DOB[22])
	$write(", 0x%0x", ram_state_and_ctag_cset$DOB[21:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  !ram_state_and_ctag_cset$DOB[22])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(" 0x%0x", ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 4'hA, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && soc_map$m_is_IO_addr &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    => IO_REQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d267)
	begin
	  v__h12698 = $stime;
	  #0;
	end
    v__h12692 = v__h12698 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d267)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h12692,
		   "D_MMU_Cache",
		   rg_addr,
		   word64__h5182,
		   64'd0);
	else
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h12692,
		   "I_MMU_Cache",
		   rg_addr,
		   word64__h5182,
		   64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op == 2'd2 &&
	  rg_amo_funct7[6:2] == 5'b00010 &&
	  ram_state_and_ctag_cset$DOB[22] &&
	  ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("        AMO LR: reserving PA 0x%0h", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d267)
	$display("        Read-hit: addr 0x%0h word64 0x%0h",
		 rg_addr,
		 word64__h5182);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d280)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op == 2'd2 &&
	  rg_amo_funct7_3_BITS_6_TO_2_4_EQ_0b10_5_AND_NO_ETC___d284)
	$display("        AMO LR: cache refill: cancelling LR/SC reservation for PA 0x%0h",
		 rg_lrsc_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op == 2'd1 &&
	  rg_addr_7_EQ_rg_lrsc_pa_4___d109 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("        ST: cancelling LR/SC reservation for PA", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op == 2'd2 &&
	  rg_amo_funct7[6:2] == 5'b00011 &&
	  rg_lrsc_valid &&
	  !rg_lrsc_pa_4_EQ_rg_addr_7___d55 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("        AMO SC: fail: reserved addr 0x%0h, this address 0x%0h",
		 rg_lrsc_pa,
		 rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op == 2'd2 &&
	  rg_amo_funct7[6:2] == 5'b00011 &&
	  !rg_lrsc_valid &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("        AMO SC: fail due to invalid LR/SC reservation");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op == 2'd2 &&
	  rg_amo_funct7[6:2] == 5'b00011 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("        AMO SC result = %0d", lrsc_result__h13075);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d475)
	$display("        Write-Cache-Hit: pa 0x%0h word64 0x%0h",
		 rg_addr,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d475)
	$write("        New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d475)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d475)
	$write(" 0x%0x",
	       IF_rg_f3_30_EQ_0b0_31_THEN_IF_rg_addr_7_BITS_2_ETC___d352);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d475)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op != 2'd0 &&
	  (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	  (rg_op == 2'd1 ||
	   rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	  NOT_rg_op_0_EQ_2_2_0_OR_NOT_rg_amo_funct7_3_BI_ETC___d477)
	$display("        Write-Cache-Miss: pa 0x%0h word64 0x%0h",
		 rg_addr,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d484)
	begin
	  v__h19149 = $stime;
	  #0;
	end
    v__h19143 = v__h19149 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d484)
	$display("%0d: ERROR: CreditCounter: overflow", v__h19143);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d484)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d490)
	$display("        Write-Hit/Miss: eaddr 0x%0h word64 0x%0h",
		 rg_addr,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d490)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d490)
	$write("AXI4_Lite_Wr_Addr { ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d490)
	$write("'h%h", mem_req_wr_addr_awaddr__h19474);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d490)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d490)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d490)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d490)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d490)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d490)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d490)
	$write("AXI4_Lite_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d490)
	$write("'h%h", mem_req_wr_data_wdata__h18803);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d490)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d490)
	$write("'h%h", mem_req_wr_data_wstrb__h19562, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d490)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d490)
	$display("    => rl_write_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op_0_EQ_2_2_AND_rg_amo_funct7_3_BITS_6_TO_2_ETC___d494)
	begin
	  v__h18582 = $stime;
	  #0;
	end
    v__h18576 = v__h18582 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op_0_EQ_2_2_AND_rg_amo_funct7_3_BITS_6_TO_2_ETC___d494)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h18576,
		   "D_MMU_Cache",
		   rg_addr,
		   64'd1,
		   64'd0);
	else
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h18576,
		   "I_MMU_Cache",
		   rg_addr,
		   64'd1,
		   64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op_0_EQ_2_2_AND_rg_amo_funct7_3_BITS_6_TO_2_ETC___d494)
	$display("        AMO SC: Fail response for addr 0x%0h", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op != 2'd0 &&
	  (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d498)
	$display("        AMO Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d504)
	begin
	  v__h19876 = $stime;
	  #0;
	end
    v__h19870 = v__h19876 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d504)
	$display("%0d: ERROR: CreditCounter: overflow", v__h19870);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d504)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op != 2'd0 &&
	  (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d508)
	$display("        AMO_op: cancelling LR/SC reservation for PA",
		 rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d515)
	$display("        AMO: addr 0x%0h amo_f7 0x%0h f3 %0d rs2_val 0x%0h",
		 rg_addr,
		 rg_amo_funct7,
		 rg_f3,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d515)
	$display("          PA 0x%0h ", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d515)
	$display("          Cache word64 0x%0h, load-result 0x%0h",
		 word64__h5182,
		 word64__h5182);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d515)
	$display("          0x%0h  op  0x%0h -> 0x%0h",
		 word64__h5182,
		 word64__h5182,
		 new_st_val__h5344);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d515)
	$write("          New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d515)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d515)
	$write(" 0x%0x",
	       IF_rg_f3_30_EQ_0b0_31_THEN_IF_rg_addr_7_BITS_2_ETC___d426);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d515)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d515)
	$write("          To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d515)
	$write("AXI4_Lite_Wr_Addr { ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d515)
	$write("'h%h", mem_req_wr_addr_awaddr__h19474);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d515)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d515)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d515)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d515)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d515)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d515)
	$write("                     ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d515)
	$write("AXI4_Lite_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d515)
	$write("'h%h", mem_req_wr_data_wdata__h19561);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d515)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d515)
	$write("'h%h", mem_req_wr_data_wstrb__h19562, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d515)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_41___d542)
	begin
	  v__h21531 = $stime;
	  #0;
	end
    v__h21525 = v__h21531 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_41___d542)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h21525,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h21525,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_41___d542)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_41___d542)
	$write("AXI4_Lite_Rd_Data { ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_41___d542 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0)
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_41___d542 &&
	  master_xactor_rg_rd_data[65:64] == 2'd1)
	$write("AXI4_LITE_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_41___d542 &&
	  master_xactor_rg_rd_data[65:64] == 2'd2)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_41___d542 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  master_xactor_rg_rd_data[65:64] != 2'd1 &&
	  master_xactor_rg_rd_data[65:64] != 2'd2)
	$write("AXI4_LITE_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_41___d542)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_41___d542)
	$write("'h%h", master_xactor_rg_rd_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_41___d542)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_41___d542)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_41___d542)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h21777 = $stime;
	  #0;
	end
    v__h21771 = v__h21777 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h21771,
		   "D_MMU_Cache",
		   access_exc_code__h3108);
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h21771,
		   "I_MMU_Cache",
		   access_exc_code__h3108);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  rg_word64_set_in_cache[1:0] == 2'd3 &&
	  (master_xactor_rg_rd_data[65:64] != 2'd0 ||
	   rg_error_during_refill) &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  rg_word64_set_in_cache[1:0] == 2'd3 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !rg_error_during_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_41___d542)
	$display("        Updating Cache [0x%0x] (Word64_Set %0d) old => new",
		 rg_word64_set_in_cache,
		 rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_41___d542)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_41___d542)
	$write(" 0x%0x", ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_41___d542)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_41___d542)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_41___d542)
	$write(" 0x%0x", master_xactor_rg_rd_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_41___d542)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h23554 = $stime;
	  #0;
	end
    v__h23548 = v__h23554 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h23548,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h23548,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    ", { fabric_addr__h27023, 3'd0 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h23720 = $stime;
	  #0;
	end
    v__h23714 = v__h23720 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h23714,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h23714,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Lite_Rd_Data { ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0)
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  master_xactor_rg_rd_data[65:64] == 2'd1)
	$write("AXI4_LITE_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  master_xactor_rg_rd_data[65:64] == 2'd2)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  master_xactor_rg_rd_data[65:64] != 2'd1 &&
	  master_xactor_rg_rd_data[65:64] != 2'd2)
	$write("AXI4_LITE_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", master_xactor_rg_rd_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h24119 = $stime;
	  #0;
	end
    v__h24113 = v__h24119 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h24113,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0]);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h24113,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h24226 = $stime;
	  #0;
	end
    v__h24220 = v__h24226 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h24220,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h24220,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h25956 = $stime;
	  #0;
	end
    v__h25950 = v__h25956 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h25950);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h26101 = $stime;
	  #0;
	end
    v__h26095 = v__h26101 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h26095,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h26095,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Lite_Wr_Addr { ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", io_req_wr_addr_awaddr__h27476);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Lite_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", value__h26681);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", io_req_wr_data_wstrb__h27636, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h27149 = $stime;
	  #0;
	end
    v__h27143 = v__h27149 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_op_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h27143,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_AMO_op_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h27143,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    ", { fabric_addr__h27023, 3'd0 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h27281 = $stime;
	  #0;
	end
    v__h27275 = v__h27281 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h27275,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h27275,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Lite_Rd_Data { ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0)
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  master_xactor_rg_rd_data[65:64] == 2'd1)
	$write("AXI4_LITE_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  master_xactor_rg_rd_data[65:64] == 2'd2)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  master_xactor_rg_rd_data[65:64] != 2'd1 &&
	  master_xactor_rg_rd_data[65:64] != 2'd2)
	$write("AXI4_LITE_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", master_xactor_rg_rd_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h29061 = $stime;
	  #0;
	end
    v__h29055 = v__h29061 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h29055);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h29411 = $stime;
	  #0;
	end
    v__h29405 = v__h29411 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h29405,
		   "D_MMU_Cache",
		   rg_addr,
		   new_ld_val__h27408);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h29405,
		   "I_MMU_Cache",
		   rg_addr,
		   new_ld_val__h27408);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h29527 = $stime;
	  #0;
	end
    v__h29521 = v__h29527 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h29521,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h29521,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Lite_Wr_Addr { ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", io_req_wr_addr_awaddr__h27476);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Lite_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", io_req_wr_data_wdata__h27635);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", io_req_wr_data_wstrb__h27636, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h27562 = $stime;
	  #0;
	end
    v__h27556 = v__h27562 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		   v__h27556,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		   v__h27556,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h30536 = $stime;
	  #0;
	end
    v__h30530 = v__h30536 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $write("%0d: %s.req: op:", v__h30530, "D_MMU_Cache");
	else
	  $write("%0d: %s.req: op:", v__h30530, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12 && req_op == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12 && req_op == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  req_op != 2'd0 &&
	  req_op != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(" f3:%0d addr:0x%0h st_value:0x%0h priv:",
	       req_f3,
	       req_addr,
	       req_st_value);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    amo_funct7 = 0x%0h", req_amo_funct7);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req &&
	  req_f3_BITS_1_TO_0_09_EQ_0b0_10_OR_req_f3_BITS_ETC___d939 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 req_addr[11:5],
		 req_addr[11:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h21161 = $stime;
	  #0;
	end
    v__h21155 = v__h21161 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $write("%0d: %s.rl_start_cache_refill: mem req: ",
		 v__h21155,
		 "D_MMU_Cache");
	else
	  $write("%0d: %s.rl_start_cache_refill: mem req: ",
		 v__h21155,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Lite_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", { 32'd0, cline_addr__h21214 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    Victim way is %0d; => CACHE_REFILL", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h30148 = $stime;
	  #0;
	end
    v__h30142 = v__h30148 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h30142,
		 "D_MMU_Cache",
		 $unsigned(b__h20504));
	else
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h30142,
		 "I_MMU_Cache",
		 $unsigned(b__h20504));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Lite_Wr_Resp { ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	begin
	  v__h30109 = $stime;
	  #0;
	end
    v__h30103 = v__h30109 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h30103,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h30103,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write("AXI4_Lite_Wr_Resp { ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd1)
	$write("AXI4_LITE_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd2)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0 &&
	  master_xactor_rg_wr_resp != 2'd1 &&
	  master_xactor_rg_wr_resp != 2'd2)
	$write("AXI4_LITE_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$finish(32'd1);
  end
  // synopsys translate_on
endmodule  // mkMMU_Cache

