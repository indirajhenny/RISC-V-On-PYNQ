//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Fri Jan 11 23:39:11 EST 2019
//
//
// Ports:
// Name                         I/O  size props
// RDY_hart0_server_reset_request_put  O     1 reg
// RDY_hart0_server_reset_response_get  O     1 reg
// imem_master_awvalid            O     1
// imem_master_awaddr             O    64 reg
// imem_master_awprot             O     3 reg
// imem_master_wvalid             O     1
// imem_master_wdata              O    64 reg
// imem_master_wstrb              O     8 reg
// imem_master_bready             O     1
// imem_master_arvalid            O     1
// imem_master_araddr             O    64 reg
// imem_master_arprot             O     3 reg
// imem_master_rready             O     1
// dmem_master_awvalid            O     1
// dmem_master_awaddr             O    64 reg
// dmem_master_awprot             O     3 reg
// dmem_master_wvalid             O     1
// dmem_master_wdata              O    64 reg
// dmem_master_wstrb              O     8 reg
// dmem_master_bready             O     1
// dmem_master_arvalid            O     1
// dmem_master_araddr             O    64 reg
// dmem_master_arprot             O     3 reg
// dmem_master_rready             O     1
// near_mem_slave_awready         O     1 const
// near_mem_slave_wready          O     1 const
// near_mem_slave_bvalid          O     1 const
// near_mem_slave_bresp           O     2 const
// near_mem_slave_arready         O     1 const
// near_mem_slave_rvalid          O     1 const
// near_mem_slave_rresp           O     2 const
// near_mem_slave_rdata           O    64 const
// RDY_set_verbosity              O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// imem_master_awready            I     1
// imem_master_wready             I     1
// imem_master_bvalid             I     1
// imem_master_bresp              I     2 reg
// imem_master_arready            I     1
// imem_master_rvalid             I     1
// imem_master_rresp              I     2 reg
// imem_master_rdata              I    64 reg
// dmem_master_awready            I     1
// dmem_master_wready             I     1
// dmem_master_bvalid             I     1
// dmem_master_bresp              I     2 reg
// dmem_master_arready            I     1
// dmem_master_rvalid             I     1
// dmem_master_rresp              I     2 reg
// dmem_master_rdata              I    64 reg
// near_mem_slave_awvalid         I     1 unused
// near_mem_slave_awaddr          I    64 unused
// near_mem_slave_awprot          I     3 unused
// near_mem_slave_wvalid          I     1 unused
// near_mem_slave_wdata           I    64 unused
// near_mem_slave_wstrb           I     8 unused
// near_mem_slave_bready          I     1 unused
// near_mem_slave_arvalid         I     1 unused
// near_mem_slave_araddr          I    64 unused
// near_mem_slave_arprot          I     3 unused
// near_mem_slave_rready          I     1 unused
// external_interrupt_req_set_not_clear  I     1 reg
// set_verbosity_verbosity        I     4 reg
// set_verbosity_logdelay         I    64 reg
// EN_hart0_server_reset_request_put  I     1
// EN_hart0_server_reset_response_get  I     1
// EN_set_verbosity               I     1
//
// Combinational paths from inputs to outputs:
//   (imem_master_awready, imem_master_wready) -> imem_master_bready
//   (imem_master_awready,
//    imem_master_wready,
//    imem_master_arready,
//    dmem_master_awready,
//    dmem_master_wready) -> imem_master_rready
//   (imem_master_awready,
//    imem_master_wready,
//    dmem_master_awready,
//    dmem_master_wready,
//    dmem_master_arready) -> dmem_master_rready
//   (dmem_master_awready, dmem_master_wready) -> dmem_master_bready
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCPU(CLK,
	     RST_N,

	     EN_hart0_server_reset_request_put,
	     RDY_hart0_server_reset_request_put,

	     EN_hart0_server_reset_response_get,
	     RDY_hart0_server_reset_response_get,

	     imem_master_awvalid,

	     imem_master_awaddr,

	     imem_master_awprot,

	     imem_master_awready,

	     imem_master_wvalid,

	     imem_master_wdata,

	     imem_master_wstrb,

	     imem_master_wready,

	     imem_master_bvalid,
	     imem_master_bresp,

	     imem_master_bready,

	     imem_master_arvalid,

	     imem_master_araddr,

	     imem_master_arprot,

	     imem_master_arready,

	     imem_master_rvalid,
	     imem_master_rresp,
	     imem_master_rdata,

	     imem_master_rready,

	     dmem_master_awvalid,

	     dmem_master_awaddr,

	     dmem_master_awprot,

	     dmem_master_awready,

	     dmem_master_wvalid,

	     dmem_master_wdata,

	     dmem_master_wstrb,

	     dmem_master_wready,

	     dmem_master_bvalid,
	     dmem_master_bresp,

	     dmem_master_bready,

	     dmem_master_arvalid,

	     dmem_master_araddr,

	     dmem_master_arprot,

	     dmem_master_arready,

	     dmem_master_rvalid,
	     dmem_master_rresp,
	     dmem_master_rdata,

	     dmem_master_rready,

	     near_mem_slave_awvalid,
	     near_mem_slave_awaddr,
	     near_mem_slave_awprot,

	     near_mem_slave_awready,

	     near_mem_slave_wvalid,
	     near_mem_slave_wdata,
	     near_mem_slave_wstrb,

	     near_mem_slave_wready,

	     near_mem_slave_bvalid,

	     near_mem_slave_bresp,

	     near_mem_slave_bready,

	     near_mem_slave_arvalid,
	     near_mem_slave_araddr,
	     near_mem_slave_arprot,

	     near_mem_slave_arready,

	     near_mem_slave_rvalid,

	     near_mem_slave_rresp,

	     near_mem_slave_rdata,

	     near_mem_slave_rready,

	     external_interrupt_req_set_not_clear,

	     set_verbosity_verbosity,
	     set_verbosity_logdelay,
	     EN_set_verbosity,
	     RDY_set_verbosity);
  parameter [63 : 0] pc_reset_value = 64'b0;
  parameter [63 : 0] near_mem_io_addr_base = 64'b0;
  parameter [63 : 0] near_mem_io_addr_lim = 64'b0;
  input  CLK;
  input  RST_N;

  // action method hart0_server_reset_request_put
  input  EN_hart0_server_reset_request_put;
  output RDY_hart0_server_reset_request_put;

  // action method hart0_server_reset_response_get
  input  EN_hart0_server_reset_response_get;
  output RDY_hart0_server_reset_response_get;

  // value method imem_master_m_awvalid
  output imem_master_awvalid;

  // value method imem_master_m_awaddr
  output [63 : 0] imem_master_awaddr;

  // value method imem_master_m_awprot
  output [2 : 0] imem_master_awprot;

  // value method imem_master_m_awuser

  // action method imem_master_m_awready
  input  imem_master_awready;

  // value method imem_master_m_wvalid
  output imem_master_wvalid;

  // value method imem_master_m_wdata
  output [63 : 0] imem_master_wdata;

  // value method imem_master_m_wstrb
  output [7 : 0] imem_master_wstrb;

  // action method imem_master_m_wready
  input  imem_master_wready;

  // action method imem_master_m_bvalid
  input  imem_master_bvalid;
  input  [1 : 0] imem_master_bresp;

  // value method imem_master_m_bready
  output imem_master_bready;

  // value method imem_master_m_arvalid
  output imem_master_arvalid;

  // value method imem_master_m_araddr
  output [63 : 0] imem_master_araddr;

  // value method imem_master_m_arprot
  output [2 : 0] imem_master_arprot;

  // value method imem_master_m_aruser

  // action method imem_master_m_arready
  input  imem_master_arready;

  // action method imem_master_m_rvalid
  input  imem_master_rvalid;
  input  [1 : 0] imem_master_rresp;
  input  [63 : 0] imem_master_rdata;

  // value method imem_master_m_rready
  output imem_master_rready;

  // value method dmem_master_m_awvalid
  output dmem_master_awvalid;

  // value method dmem_master_m_awaddr
  output [63 : 0] dmem_master_awaddr;

  // value method dmem_master_m_awprot
  output [2 : 0] dmem_master_awprot;

  // value method dmem_master_m_awuser

  // action method dmem_master_m_awready
  input  dmem_master_awready;

  // value method dmem_master_m_wvalid
  output dmem_master_wvalid;

  // value method dmem_master_m_wdata
  output [63 : 0] dmem_master_wdata;

  // value method dmem_master_m_wstrb
  output [7 : 0] dmem_master_wstrb;

  // action method dmem_master_m_wready
  input  dmem_master_wready;

  // action method dmem_master_m_bvalid
  input  dmem_master_bvalid;
  input  [1 : 0] dmem_master_bresp;

  // value method dmem_master_m_bready
  output dmem_master_bready;

  // value method dmem_master_m_arvalid
  output dmem_master_arvalid;

  // value method dmem_master_m_araddr
  output [63 : 0] dmem_master_araddr;

  // value method dmem_master_m_arprot
  output [2 : 0] dmem_master_arprot;

  // value method dmem_master_m_aruser

  // action method dmem_master_m_arready
  input  dmem_master_arready;

  // action method dmem_master_m_rvalid
  input  dmem_master_rvalid;
  input  [1 : 0] dmem_master_rresp;
  input  [63 : 0] dmem_master_rdata;

  // value method dmem_master_m_rready
  output dmem_master_rready;

  // action method near_mem_slave_m_awvalid
  input  near_mem_slave_awvalid;
  input  [63 : 0] near_mem_slave_awaddr;
  input  [2 : 0] near_mem_slave_awprot;

  // value method near_mem_slave_m_awready
  output near_mem_slave_awready;

  // action method near_mem_slave_m_wvalid
  input  near_mem_slave_wvalid;
  input  [63 : 0] near_mem_slave_wdata;
  input  [7 : 0] near_mem_slave_wstrb;

  // value method near_mem_slave_m_wready
  output near_mem_slave_wready;

  // value method near_mem_slave_m_bvalid
  output near_mem_slave_bvalid;

  // value method near_mem_slave_m_bresp
  output [1 : 0] near_mem_slave_bresp;

  // value method near_mem_slave_m_buser

  // action method near_mem_slave_m_bready
  input  near_mem_slave_bready;

  // action method near_mem_slave_m_arvalid
  input  near_mem_slave_arvalid;
  input  [63 : 0] near_mem_slave_araddr;
  input  [2 : 0] near_mem_slave_arprot;

  // value method near_mem_slave_m_arready
  output near_mem_slave_arready;

  // value method near_mem_slave_m_rvalid
  output near_mem_slave_rvalid;

  // value method near_mem_slave_m_rresp
  output [1 : 0] near_mem_slave_rresp;

  // value method near_mem_slave_m_rdata
  output [63 : 0] near_mem_slave_rdata;

  // value method near_mem_slave_m_ruser

  // action method near_mem_slave_m_rready
  input  near_mem_slave_rready;

  // action method external_interrupt_req
  input  external_interrupt_req_set_not_clear;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  [63 : 0] set_verbosity_logdelay;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // signals for module outputs
  wire [63 : 0] dmem_master_araddr,
		dmem_master_awaddr,
		dmem_master_wdata,
		imem_master_araddr,
		imem_master_awaddr,
		imem_master_wdata,
		near_mem_slave_rdata;
  wire [7 : 0] dmem_master_wstrb, imem_master_wstrb;
  wire [2 : 0] dmem_master_arprot,
	       dmem_master_awprot,
	       imem_master_arprot,
	       imem_master_awprot;
  wire [1 : 0] near_mem_slave_bresp, near_mem_slave_rresp;
  wire RDY_hart0_server_reset_request_put,
       RDY_hart0_server_reset_response_get,
       RDY_set_verbosity,
       dmem_master_arvalid,
       dmem_master_awvalid,
       dmem_master_bready,
       dmem_master_rready,
       dmem_master_wvalid,
       imem_master_arvalid,
       imem_master_awvalid,
       imem_master_bready,
       imem_master_rready,
       imem_master_wvalid,
       near_mem_slave_arready,
       near_mem_slave_awready,
       near_mem_slave_bvalid,
       near_mem_slave_rvalid,
       near_mem_slave_wready;

  // register cfg_logdelay
  reg [63 : 0] cfg_logdelay;
  wire [63 : 0] cfg_logdelay$D_IN;
  wire cfg_logdelay$EN;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register imem_rg_f3
  reg [2 : 0] imem_rg_f3;
  wire [2 : 0] imem_rg_f3$D_IN;
  wire imem_rg_f3$EN;

  // register imem_rg_instr_15_0
  reg [15 : 0] imem_rg_instr_15_0;
  wire [15 : 0] imem_rg_instr_15_0$D_IN;
  wire imem_rg_instr_15_0$EN;

  // register imem_rg_mstatus_MXR
  reg imem_rg_mstatus_MXR;
  wire imem_rg_mstatus_MXR$D_IN, imem_rg_mstatus_MXR$EN;

  // register imem_rg_pc
  reg [63 : 0] imem_rg_pc;
  reg [63 : 0] imem_rg_pc$D_IN;
  wire imem_rg_pc$EN;

  // register imem_rg_priv
  reg [1 : 0] imem_rg_priv;
  reg [1 : 0] imem_rg_priv$D_IN;
  wire imem_rg_priv$EN;

  // register imem_rg_satp
  reg [63 : 0] imem_rg_satp;
  wire [63 : 0] imem_rg_satp$D_IN;
  wire imem_rg_satp$EN;

  // register imem_rg_sstatus_SUM
  reg imem_rg_sstatus_SUM;
  wire imem_rg_sstatus_SUM$D_IN, imem_rg_sstatus_SUM$EN;

  // register rg_cur_priv
  reg [1 : 0] rg_cur_priv;
  reg [1 : 0] rg_cur_priv$D_IN;
  wire rg_cur_priv$EN;

  // register rg_epoch
  reg rg_epoch;
  reg rg_epoch$D_IN;
  wire rg_epoch$EN;

  // register rg_halt
  reg rg_halt;
  wire rg_halt$D_IN, rg_halt$EN;

  // register rg_next_pc
  reg [63 : 0] rg_next_pc;
  wire [63 : 0] rg_next_pc$D_IN;
  wire rg_next_pc$EN;

  // register rg_start_CPI_cycles
  reg [63 : 0] rg_start_CPI_cycles;
  wire [63 : 0] rg_start_CPI_cycles$D_IN;
  wire rg_start_CPI_cycles$EN;

  // register rg_start_CPI_instrs
  reg [63 : 0] rg_start_CPI_instrs;
  wire [63 : 0] rg_start_CPI_instrs$D_IN;
  wire rg_start_CPI_instrs$EN;

  // register rg_state
  reg [3 : 0] rg_state;
  reg [3 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register stage1_rg_full
  reg stage1_rg_full;
  reg stage1_rg_full$D_IN;
  wire stage1_rg_full$EN;

  // register stage1_rg_stage_input
  reg [400 : 0] stage1_rg_stage_input;
  wire [400 : 0] stage1_rg_stage_input$D_IN;
  wire stage1_rg_stage_input$EN;

  // register stage2_rg_full
  reg stage2_rg_full;
  reg stage2_rg_full$D_IN;
  wire stage2_rg_full$EN;

  // register stage2_rg_stage2
  reg [365 : 0] stage2_rg_stage2;
  wire [365 : 0] stage2_rg_stage2$D_IN;
  wire stage2_rg_stage2$EN;

  // register stage3_rg_full
  reg stage3_rg_full;
  reg stage3_rg_full$D_IN;
  wire stage3_rg_full$EN;

  // register stage3_rg_stage3
  reg [174 : 0] stage3_rg_stage3;
  wire [174 : 0] stage3_rg_stage3$D_IN;
  wire stage3_rg_stage3$EN;

  // register stageD_rg_data
  reg [232 : 0] stageD_rg_data;
  wire [232 : 0] stageD_rg_data$D_IN;
  wire stageD_rg_data$EN;

  // register stageD_rg_full
  reg stageD_rg_full;
  reg stageD_rg_full$D_IN;
  wire stageD_rg_full$EN;

  // register stageF_rg_epoch
  reg stageF_rg_epoch;
  reg stageF_rg_epoch$D_IN;
  wire stageF_rg_epoch$EN;

  // register stageF_rg_full
  reg stageF_rg_full;
  reg stageF_rg_full$D_IN;
  wire stageF_rg_full$EN;

  // register stageF_rg_priv
  reg [1 : 0] stageF_rg_priv;
  reg [1 : 0] stageF_rg_priv$D_IN;
  wire stageF_rg_priv$EN;

  // ports of submodule csr_regfile
  reg [63 : 0] csr_regfile$csr_trap_actions_xtval;
  reg [3 : 0] csr_regfile$csr_trap_actions_exc_code;
  reg [1 : 0] csr_regfile$csr_ret_actions_from_priv;
  wire [193 : 0] csr_regfile$csr_trap_actions;
  wire [129 : 0] csr_regfile$csr_ret_actions;
  wire [64 : 0] csr_regfile$read_csr;
  wire [63 : 0] csr_regfile$csr_trap_actions_pc,
		csr_regfile$mav_csr_write_word,
		csr_regfile$read_csr_mcycle,
		csr_regfile$read_csr_minstret,
		csr_regfile$read_mstatus,
		csr_regfile$read_satp,
		csr_regfile$read_sstatus;
  wire [27 : 0] csr_regfile$read_misa;
  wire [11 : 0] csr_regfile$access_permitted_1_csr_addr,
		csr_regfile$access_permitted_2_csr_addr,
		csr_regfile$csr_counter_read_fault_csr_addr,
		csr_regfile$mav_csr_write_csr_addr,
		csr_regfile$mav_read_csr_csr_addr,
		csr_regfile$read_csr_csr_addr,
		csr_regfile$read_csr_port2_csr_addr;
  wire [4 : 0] csr_regfile$interrupt_pending,
	       csr_regfile$update_fcsr_fflags_flags;
  wire [2 : 0] csr_regfile$read_frm;
  wire [1 : 0] csr_regfile$access_permitted_1_priv,
	       csr_regfile$access_permitted_2_priv,
	       csr_regfile$csr_counter_read_fault_priv,
	       csr_regfile$csr_trap_actions_from_priv,
	       csr_regfile$interrupt_pending_cur_priv;
  wire csr_regfile$EN_csr_minstret_incr,
       csr_regfile$EN_csr_ret_actions,
       csr_regfile$EN_csr_trap_actions,
       csr_regfile$EN_debug,
       csr_regfile$EN_mav_csr_write,
       csr_regfile$EN_mav_read_csr,
       csr_regfile$EN_server_reset_request_put,
       csr_regfile$EN_server_reset_response_get,
       csr_regfile$EN_software_interrupt_req,
       csr_regfile$EN_timer_interrupt_req,
       csr_regfile$EN_update_fcsr_fflags,
       csr_regfile$RDY_server_reset_request_put,
       csr_regfile$RDY_server_reset_response_get,
       csr_regfile$access_permitted_1,
       csr_regfile$access_permitted_1_read_not_write,
       csr_regfile$access_permitted_2,
       csr_regfile$access_permitted_2_read_not_write,
       csr_regfile$csr_trap_actions_interrupt,
       csr_regfile$external_interrupt_req_set_not_clear,
       csr_regfile$software_interrupt_req_set_not_clear,
       csr_regfile$timer_interrupt_req_set_not_clear,
       csr_regfile$wfi_resume;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule fpr_regfile
  wire [63 : 0] fpr_regfile$read_rs1,
		fpr_regfile$read_rs2,
		fpr_regfile$read_rs3,
		fpr_regfile$write_rd_rd_val;
  wire [4 : 0] fpr_regfile$read_rs1_port2_rs1,
	       fpr_regfile$read_rs1_rs1,
	       fpr_regfile$read_rs2_rs2,
	       fpr_regfile$read_rs3_rs3,
	       fpr_regfile$write_rd_rd;
  wire fpr_regfile$EN_server_reset_request_put,
       fpr_regfile$EN_server_reset_response_get,
       fpr_regfile$EN_write_rd,
       fpr_regfile$RDY_server_reset_request_put,
       fpr_regfile$RDY_server_reset_response_get;

  // ports of submodule gpr_regfile
  wire [63 : 0] gpr_regfile$read_rs1,
		gpr_regfile$read_rs2,
		gpr_regfile$write_rd_rd_val;
  wire [4 : 0] gpr_regfile$read_rs1_port2_rs1,
	       gpr_regfile$read_rs1_rs1,
	       gpr_regfile$read_rs2_rs2,
	       gpr_regfile$write_rd_rd;
  wire gpr_regfile$EN_server_reset_request_put,
       gpr_regfile$EN_server_reset_response_get,
       gpr_regfile$EN_write_rd,
       gpr_regfile$RDY_server_reset_request_put,
       gpr_regfile$RDY_server_reset_response_get;

  // ports of submodule near_mem
  reg [63 : 0] near_mem$imem_req_addr;
  reg [1 : 0] near_mem$dmem_req_op, near_mem$imem_req_priv;
  reg near_mem$imem_req_mstatus_MXR, near_mem$imem_req_sstatus_SUM;
  wire [63 : 0] near_mem$dmem_master_araddr,
		near_mem$dmem_master_awaddr,
		near_mem$dmem_master_rdata,
		near_mem$dmem_master_wdata,
		near_mem$dmem_req_addr,
		near_mem$dmem_req_satp,
		near_mem$dmem_req_store_value,
		near_mem$dmem_word64,
		near_mem$imem_master_araddr,
		near_mem$imem_master_awaddr,
		near_mem$imem_master_rdata,
		near_mem$imem_master_wdata,
		near_mem$imem_pc,
		near_mem$imem_req_satp,
		near_mem$near_mem_slave_araddr,
		near_mem$near_mem_slave_awaddr,
		near_mem$near_mem_slave_rdata,
		near_mem$near_mem_slave_wdata;
  wire [31 : 0] near_mem$imem_instr;
  wire [7 : 0] near_mem$dmem_master_wstrb,
	       near_mem$imem_master_wstrb,
	       near_mem$near_mem_slave_wstrb,
	       near_mem$server_fence_request_put;
  wire [6 : 0] near_mem$dmem_req_amo_funct7;
  wire [3 : 0] near_mem$dmem_exc_code, near_mem$imem_exc_code;
  wire [2 : 0] near_mem$dmem_master_arprot,
	       near_mem$dmem_master_awprot,
	       near_mem$dmem_req_f3,
	       near_mem$imem_master_arprot,
	       near_mem$imem_master_awprot,
	       near_mem$imem_req_f3,
	       near_mem$near_mem_slave_arprot,
	       near_mem$near_mem_slave_awprot;
  wire [1 : 0] near_mem$dmem_master_bresp,
	       near_mem$dmem_master_rresp,
	       near_mem$dmem_req_priv,
	       near_mem$imem_master_bresp,
	       near_mem$imem_master_rresp,
	       near_mem$near_mem_slave_bresp,
	       near_mem$near_mem_slave_rresp;
  wire near_mem$EN_dmem_req,
       near_mem$EN_get_sw_interrupt_req_get,
       near_mem$EN_get_timer_interrupt_req_get,
       near_mem$EN_imem_req,
       near_mem$EN_server_fence_i_request_put,
       near_mem$EN_server_fence_i_response_get,
       near_mem$EN_server_fence_request_put,
       near_mem$EN_server_fence_response_get,
       near_mem$EN_server_reset_request_put,
       near_mem$EN_server_reset_response_get,
       near_mem$EN_sfence_vma,
       near_mem$RDY_get_sw_interrupt_req_get,
       near_mem$RDY_get_timer_interrupt_req_get,
       near_mem$RDY_server_fence_i_request_put,
       near_mem$RDY_server_fence_i_response_get,
       near_mem$RDY_server_fence_request_put,
       near_mem$RDY_server_fence_response_get,
       near_mem$RDY_server_reset_request_put,
       near_mem$RDY_server_reset_response_get,
       near_mem$dmem_exc,
       near_mem$dmem_master_arready,
       near_mem$dmem_master_arvalid,
       near_mem$dmem_master_awready,
       near_mem$dmem_master_awvalid,
       near_mem$dmem_master_bready,
       near_mem$dmem_master_bvalid,
       near_mem$dmem_master_rready,
       near_mem$dmem_master_rvalid,
       near_mem$dmem_master_wready,
       near_mem$dmem_master_wvalid,
       near_mem$dmem_req_mstatus_MXR,
       near_mem$dmem_req_sstatus_SUM,
       near_mem$dmem_valid,
       near_mem$get_sw_interrupt_req_get,
       near_mem$get_timer_interrupt_req_get,
       near_mem$imem_exc,
       near_mem$imem_is_i32_not_i16,
       near_mem$imem_master_arready,
       near_mem$imem_master_arvalid,
       near_mem$imem_master_awready,
       near_mem$imem_master_awvalid,
       near_mem$imem_master_bready,
       near_mem$imem_master_bvalid,
       near_mem$imem_master_rready,
       near_mem$imem_master_rvalid,
       near_mem$imem_master_wready,
       near_mem$imem_master_wvalid,
       near_mem$imem_valid,
       near_mem$near_mem_slave_arready,
       near_mem$near_mem_slave_arvalid,
       near_mem$near_mem_slave_awready,
       near_mem$near_mem_slave_awvalid,
       near_mem$near_mem_slave_bready,
       near_mem$near_mem_slave_bvalid,
       near_mem$near_mem_slave_rready,
       near_mem$near_mem_slave_rvalid,
       near_mem$near_mem_slave_wready,
       near_mem$near_mem_slave_wvalid;

  // ports of submodule stage1_f_reset_reqs
  wire stage1_f_reset_reqs$CLR,
       stage1_f_reset_reqs$DEQ,
       stage1_f_reset_reqs$EMPTY_N,
       stage1_f_reset_reqs$ENQ,
       stage1_f_reset_reqs$FULL_N;

  // ports of submodule stage1_f_reset_rsps
  wire stage1_f_reset_rsps$CLR,
       stage1_f_reset_rsps$DEQ,
       stage1_f_reset_rsps$EMPTY_N,
       stage1_f_reset_rsps$ENQ,
       stage1_f_reset_rsps$FULL_N;

  // ports of submodule stage2_f_reset_reqs
  wire stage2_f_reset_reqs$CLR,
       stage2_f_reset_reqs$DEQ,
       stage2_f_reset_reqs$EMPTY_N,
       stage2_f_reset_reqs$ENQ,
       stage2_f_reset_reqs$FULL_N;

  // ports of submodule stage2_f_reset_rsps
  wire stage2_f_reset_rsps$CLR,
       stage2_f_reset_rsps$DEQ,
       stage2_f_reset_rsps$EMPTY_N,
       stage2_f_reset_rsps$ENQ,
       stage2_f_reset_rsps$FULL_N;

  // ports of submodule stage2_fbox
  wire [63 : 0] stage2_fbox$req_v1,
		stage2_fbox$req_v2,
		stage2_fbox$req_v3,
		stage2_fbox$word_fst;
  wire [6 : 0] stage2_fbox$req_f7, stage2_fbox$req_opcode;
  wire [4 : 0] stage2_fbox$req_rs2, stage2_fbox$word_snd;
  wire [3 : 0] stage2_fbox$set_verbosity_verbosity;
  wire [2 : 0] stage2_fbox$req_rm;
  wire stage2_fbox$EN_req, stage2_fbox$EN_set_verbosity, stage2_fbox$valid;

  // ports of submodule stage2_mbox
  wire [63 : 0] stage2_mbox$req_v1, stage2_mbox$req_v2, stage2_mbox$word;
  wire [3 : 0] stage2_mbox$set_verbosity_verbosity;
  wire [2 : 0] stage2_mbox$req_f3;
  wire stage2_mbox$EN_req,
       stage2_mbox$EN_req_reset,
       stage2_mbox$EN_rsp_reset,
       stage2_mbox$EN_set_verbosity,
       stage2_mbox$req_is_OP_not_OP_32,
       stage2_mbox$valid;

  // ports of submodule stage3_f_reset_reqs
  wire stage3_f_reset_reqs$CLR,
       stage3_f_reset_reqs$DEQ,
       stage3_f_reset_reqs$EMPTY_N,
       stage3_f_reset_reqs$ENQ,
       stage3_f_reset_reqs$FULL_N;

  // ports of submodule stage3_f_reset_rsps
  wire stage3_f_reset_rsps$CLR,
       stage3_f_reset_rsps$DEQ,
       stage3_f_reset_rsps$EMPTY_N,
       stage3_f_reset_rsps$ENQ,
       stage3_f_reset_rsps$FULL_N;

  // ports of submodule stageD_f_reset_reqs
  wire stageD_f_reset_reqs$CLR,
       stageD_f_reset_reqs$DEQ,
       stageD_f_reset_reqs$EMPTY_N,
       stageD_f_reset_reqs$ENQ,
       stageD_f_reset_reqs$FULL_N;

  // ports of submodule stageD_f_reset_rsps
  wire stageD_f_reset_rsps$CLR,
       stageD_f_reset_rsps$DEQ,
       stageD_f_reset_rsps$EMPTY_N,
       stageD_f_reset_rsps$ENQ,
       stageD_f_reset_rsps$FULL_N;

  // ports of submodule stageF_branch_predictor
  reg [63 : 0] stageF_branch_predictor$predict_req_pc;
  wire [64 : 0] stageF_branch_predictor$predict_req_m_old_pc;
  wire [63 : 0] stageF_branch_predictor$predict_rsp;
  wire stageF_branch_predictor$EN_predict_req,
       stageF_branch_predictor$EN_reset,
       stageF_branch_predictor$RDY_predict_req;

  // ports of submodule stageF_f_reset_reqs
  wire stageF_f_reset_reqs$CLR,
       stageF_f_reset_reqs$DEQ,
       stageF_f_reset_reqs$EMPTY_N,
       stageF_f_reset_reqs$ENQ,
       stageF_f_reset_reqs$FULL_N;

  // ports of submodule stageF_f_reset_rsps
  wire stageF_f_reset_rsps$CLR,
       stageF_f_reset_rsps$DEQ,
       stageF_f_reset_rsps$EMPTY_N,
       stageF_f_reset_rsps$ENQ,
       stageF_f_reset_rsps$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_imem_rl_assert_fail,
       CAN_FIRE_RL_imem_rl_fetch_next_32b,
       CAN_FIRE_RL_rl_WFI_resume,
       CAN_FIRE_RL_rl_finish_FENCE,
       CAN_FIRE_RL_rl_finish_FENCE_I,
       CAN_FIRE_RL_rl_finish_SFENCE_VMA,
       CAN_FIRE_RL_rl_pipe,
       CAN_FIRE_RL_rl_relay_sw_interrupts,
       CAN_FIRE_RL_rl_relay_timer_interrupts,
       CAN_FIRE_RL_rl_reset_complete,
       CAN_FIRE_RL_rl_reset_from_WFI,
       CAN_FIRE_RL_rl_reset_start,
       CAN_FIRE_RL_rl_show_pipe,
       CAN_FIRE_RL_rl_stage1_CSRR_S_or_C,
       CAN_FIRE_RL_rl_stage1_CSRR_W,
       CAN_FIRE_RL_rl_stage1_FENCE,
       CAN_FIRE_RL_rl_stage1_FENCE_I,
       CAN_FIRE_RL_rl_stage1_SFENCE_VMA,
       CAN_FIRE_RL_rl_stage1_WFI,
       CAN_FIRE_RL_rl_stage1_interrupt,
       CAN_FIRE_RL_rl_stage1_restart_after_csrrx,
       CAN_FIRE_RL_rl_stage1_trap,
       CAN_FIRE_RL_rl_stage1_xRET,
       CAN_FIRE_RL_rl_stage2_nonpipe,
       CAN_FIRE_RL_stage1_rl_reset,
       CAN_FIRE_RL_stage2_rl_reset,
       CAN_FIRE_RL_stage3_rl_reset,
       CAN_FIRE_RL_stageD_rl_reset,
       CAN_FIRE_RL_stageF_rl_reset,
       CAN_FIRE_dmem_master_m_arready,
       CAN_FIRE_dmem_master_m_awready,
       CAN_FIRE_dmem_master_m_bvalid,
       CAN_FIRE_dmem_master_m_rvalid,
       CAN_FIRE_dmem_master_m_wready,
       CAN_FIRE_external_interrupt_req,
       CAN_FIRE_hart0_server_reset_request_put,
       CAN_FIRE_hart0_server_reset_response_get,
       CAN_FIRE_imem_master_m_arready,
       CAN_FIRE_imem_master_m_awready,
       CAN_FIRE_imem_master_m_bvalid,
       CAN_FIRE_imem_master_m_rvalid,
       CAN_FIRE_imem_master_m_wready,
       CAN_FIRE_near_mem_slave_m_arvalid,
       CAN_FIRE_near_mem_slave_m_awvalid,
       CAN_FIRE_near_mem_slave_m_bready,
       CAN_FIRE_near_mem_slave_m_rready,
       CAN_FIRE_near_mem_slave_m_wvalid,
       CAN_FIRE_set_verbosity,
       WILL_FIRE_RL_imem_rl_assert_fail,
       WILL_FIRE_RL_imem_rl_fetch_next_32b,
       WILL_FIRE_RL_rl_WFI_resume,
       WILL_FIRE_RL_rl_finish_FENCE,
       WILL_FIRE_RL_rl_finish_FENCE_I,
       WILL_FIRE_RL_rl_finish_SFENCE_VMA,
       WILL_FIRE_RL_rl_pipe,
       WILL_FIRE_RL_rl_relay_sw_interrupts,
       WILL_FIRE_RL_rl_relay_timer_interrupts,
       WILL_FIRE_RL_rl_reset_complete,
       WILL_FIRE_RL_rl_reset_from_WFI,
       WILL_FIRE_RL_rl_reset_start,
       WILL_FIRE_RL_rl_show_pipe,
       WILL_FIRE_RL_rl_stage1_CSRR_S_or_C,
       WILL_FIRE_RL_rl_stage1_CSRR_W,
       WILL_FIRE_RL_rl_stage1_FENCE,
       WILL_FIRE_RL_rl_stage1_FENCE_I,
       WILL_FIRE_RL_rl_stage1_SFENCE_VMA,
       WILL_FIRE_RL_rl_stage1_WFI,
       WILL_FIRE_RL_rl_stage1_interrupt,
       WILL_FIRE_RL_rl_stage1_restart_after_csrrx,
       WILL_FIRE_RL_rl_stage1_trap,
       WILL_FIRE_RL_rl_stage1_xRET,
       WILL_FIRE_RL_rl_stage2_nonpipe,
       WILL_FIRE_RL_stage1_rl_reset,
       WILL_FIRE_RL_stage2_rl_reset,
       WILL_FIRE_RL_stage3_rl_reset,
       WILL_FIRE_RL_stageD_rl_reset,
       WILL_FIRE_RL_stageF_rl_reset,
       WILL_FIRE_dmem_master_m_arready,
       WILL_FIRE_dmem_master_m_awready,
       WILL_FIRE_dmem_master_m_bvalid,
       WILL_FIRE_dmem_master_m_rvalid,
       WILL_FIRE_dmem_master_m_wready,
       WILL_FIRE_external_interrupt_req,
       WILL_FIRE_hart0_server_reset_request_put,
       WILL_FIRE_hart0_server_reset_response_get,
       WILL_FIRE_imem_master_m_arready,
       WILL_FIRE_imem_master_m_awready,
       WILL_FIRE_imem_master_m_bvalid,
       WILL_FIRE_imem_master_m_rvalid,
       WILL_FIRE_imem_master_m_wready,
       WILL_FIRE_near_mem_slave_m_arvalid,
       WILL_FIRE_near_mem_slave_m_awvalid,
       WILL_FIRE_near_mem_slave_m_bready,
       WILL_FIRE_near_mem_slave_m_rready,
       WILL_FIRE_near_mem_slave_m_wvalid,
       WILL_FIRE_set_verbosity;

  // inputs to muxes for submodule ports
  reg [63 : 0] MUX_csr_regfile$mav_csr_write_2__VAL_2;
  wire [64 : 0] MUX_stageF_branch_predictor$predict_req_2__VAL_1;
  wire [63 : 0] MUX_near_mem$imem_req_2__VAL_1,
		MUX_near_mem$imem_req_2__VAL_2,
		MUX_near_mem$imem_req_2__VAL_3,
		MUX_near_mem$imem_req_2__VAL_4,
		MUX_near_mem$imem_req_2__VAL_5,
		MUX_near_mem$imem_req_2__VAL_6,
		MUX_near_mem$imem_req_2__VAL_7;
  wire [3 : 0] MUX_rg_state$write_1__VAL_1, MUX_rg_state$write_1__VAL_2;
  wire MUX_csr_regfile$mav_csr_write_1__SEL_1,
       MUX_gpr_regfile$write_rd_1__SEL_2,
       MUX_imem_rg_f3$write_1__SEL_1,
       MUX_imem_rg_f3$write_1__SEL_2,
       MUX_imem_rg_mstatus_MXR$write_1__SEL_2,
       MUX_imem_rg_pc$write_1__SEL_4,
       MUX_imem_rg_pc$write_1__SEL_6,
       MUX_imem_rg_priv$write_1__SEL_2,
       MUX_near_mem$imem_req_1__SEL_7,
       MUX_rg_epoch$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_3,
       MUX_rg_state$write_1__SEL_5,
       MUX_rg_state$write_1__SEL_6,
       MUX_rg_state$write_1__SEL_7,
       MUX_rg_state$write_1__SEL_8,
       MUX_rg_state$write_1__SEL_9,
       MUX_stage1_rg_full$write_1__VAL_2,
       MUX_stage2_rg_full$write_1__VAL_2,
       MUX_stageD_rg_full$write_1__VAL_2;

  // remaining internal signals
  reg [63 : 0] CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q26,
	       CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q27,
	       IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d1224,
	       _theResult_____1_fst__h8932,
	       alu_outputs___1_val1__h7853,
	       rs1_val__h26414,
	       value__h6734,
	       value__h6795,
	       x_out_bypass_rd_val__h7026,
	       x_out_data_to_stage2_addr__h7479,
	       x_out_data_to_stage2_val1__h7480,
	       x_out_data_to_stage3_rd_val__h6492,
	       x_out_fbypass_rd_val__h7171;
  reg [4 : 0] data_to_stage2_rd__h7465,
	      x_out_bypass_rd__h7025,
	      x_out_data_to_stage3_fpr_flags__h6491,
	      x_out_data_to_stage3_rd__h6488,
	      x_out_fbypass_rd__h7170;
  reg [3 : 0] CASE_rg_cur_priv_0b0_8_0b1_9_11__q18,
	      CASE_stage1_rg_stage_input_BITS_112_TO_110_0b0_ETC__q20,
	      CASE_stage1_rg_stage_input_BITS_112_TO_110_0b0_ETC__q21,
	      CASE_stage1_rg_stage_input_BITS_87_TO_76_0b0_C_ETC__q19,
	      IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d937,
	      IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d940,
	      IF_stage1_rg_stage_input_01_BITS_87_TO_76_92_E_ETC___d915,
	      alu_outputs_exc_code__h8369,
	      x_out_trap_info_exc_code__h6771;
  reg [2 : 0] CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q22,
	      CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q23;
  reg [1 : 0] CASE_stage2_rg_stage2_BITS_267_TO_265_0_2_1_IF_ETC__q4,
	      CASE_stage2_rg_stage2_BITS_267_TO_265_0_2_1_IF_ETC__q5,
	      CASE_stage2_rg_stage2_BITS_267_TO_265_1_IF_sta_ETC__q6;
  reg CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q12,
      CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q13,
      CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q14,
      CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q15,
      CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q16,
      CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q17,
      CASE_stage2_rg_stage2_BITS_267_TO_265_1_NOT_st_ETC__q30,
      CASE_stage2_rg_stage2_BITS_267_TO_265_1_stage2_ETC__q29,
      IF_stage1_rg_stage_input_01_BITS_112_TO_110_30_ETC___d376,
      IF_stage1_rg_stage_input_01_BITS_112_TO_110_30_ETC___d684,
      IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d675,
      IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d860,
      IF_stage2_rg_stage2_04_BITS_267_TO_265_05_EQ_1_ETC___d155,
      IF_stage2_rg_stage2_04_BITS_267_TO_265_05_EQ_1_ETC___d165;
  wire [127 : 0] csr_regfile_read_csr_mcycle__7_MINUS_rg_start__ETC___d2289;
  wire [63 : 0] IF_csr_regfile_read_csr_IF_stage1_rg_full_00_T_ETC___d2220,
		IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC___d1106,
		IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d1225,
		IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d1226,
		IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d1243,
		IF_stage1_rg_stage_input_01_BIT_333_095_THEN_s_ETC___d1098,
		SEXT_stage1_rg_stage_input_01_BITS_87_TO_76_92___d1105,
		_theResult_____1_fst__h8925,
		_theResult_____1_fst__h8960,
		_theResult____h33032,
		_theResult___fst__h9050,
		_theResult___fst__h9057,
		_theResult___fst__h9137,
		_theResult___fst_rd_val__h7004,
		_theResult___fst_rd_val__h7015,
		_theResult___snd__h11047,
		_theResult___snd_rd_val__h7156,
		_theResult___snd_rd_val__h7162,
		alu_outputs___1_addr__h7618,
		alu_outputs___1_addr__h7643,
		alu_outputs___1_addr__h7672,
		alu_outputs___1_addr__h7938,
		alu_outputs___1_val1__h7760,
		alu_outputs___1_val1__h7801,
		alu_outputs___1_val1__h7827,
		alu_outputs___1_val1__h7872,
		alu_outputs___1_val1__h7891,
		alu_outputs___1_val1__h8215,
		alu_outputs___1_val1__h8239,
		alu_outputs___1_val1__h8342,
		alu_outputs___1_val2__h7940,
		branch_target__h7598,
		cpi__h33034,
		cpifrac__h33035,
		data_to_stage2_addr__h7466,
		data_to_stage3_rd_val__h6442,
		delta_CPI_cycles__h33030,
		delta_CPI_instrs___1__h33067,
		delta_CPI_instrs__h33031,
		fall_through_pc__h7413,
		frs1_val_bypassed__h4006,
		frs2_val_bypassed__h4011,
		next_pc___1__h10417,
		next_pc__h10414,
		next_pc__h24373,
		next_pc__h7414,
		rd_val___1__h11078,
		rd_val___1__h11109,
		rd_val___1__h11162,
		rd_val___1__h11191,
		rd_val___1__h11245,
		rd_val___1__h11293,
		rd_val___1__h11299,
		rd_val___1__h11344,
		rd_val___1__h8913,
		rd_val___1__h8921,
		rd_val___1__h8928,
		rd_val___1__h8935,
		rd_val___1__h8942,
		rd_val___1__h8949,
		rd_val__h10942,
		rd_val__h10993,
		rd_val__h11015,
		rd_val__h11611,
		rd_val__h11674,
		rd_val__h11735,
		rd_val__h7365,
		rd_val__h7390,
		rs1_val__h25921,
		rs1_val_bypassed__h3995,
		rs2_val_bypassed__h4001,
		stage1_rg_stage_input_BITS_400_TO_337_PLUS_SEX_ETC__q3,
		trap_info_tval__h10681,
		val__h7367,
		val__h7392,
		value__h10732,
		x__h33033,
		x_out_data_to_stage2_val2__h7481,
		x_out_data_to_stage2_val3__h7482,
		x_out_next_pc__h7429,
		y__h26718;
  wire [31 : 0] IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1622,
		IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1623,
		IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1624,
		IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1625,
		IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1626,
		IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1627,
		IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1629,
		IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1631,
		IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1633,
		IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1635,
		IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1636,
		IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1637,
		IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1639,
		IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1640,
		IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1641,
		IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1643,
		IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1645,
		IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1646,
		IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1648,
		IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1649,
		IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1650,
		IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1651,
		IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1652,
		IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1653,
		IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1654,
		IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1655,
		IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC__q25,
		_theResult____h4353,
		_theResult___fst__h19505,
		_theResult___fst__h19533,
		d_instr__h19473,
		instr___1__h11885,
		instr__h12062,
		instr__h12207,
		instr__h12399,
		instr__h12594,
		instr__h12823,
		instr__h13276,
		instr__h13392,
		instr__h13457,
		instr__h13774,
		instr__h14112,
		instr__h14296,
		instr__h14425,
		instr__h14652,
		instr__h14907,
		instr__h15079,
		instr__h15248,
		instr__h15437,
		instr__h15626,
		instr__h15743,
		instr__h15921,
		instr__h16040,
		instr__h16135,
		instr__h16271,
		instr__h16407,
		instr__h16543,
		instr__h16681,
		instr__h16819,
		instr__h16977,
		instr__h17073,
		instr__h17226,
		instr__h17425,
		instr__h17576,
		instr__h18615,
		instr__h18768,
		instr__h19118,
		instr_out___1__h19475,
		instr_out___1__h19507,
		instr_out___1__h19535,
		rs1_val_bypassed995_BITS_31_TO_0_MINUS_rs2_val_ETC__q11,
		rs1_val_bypassed995_BITS_31_TO_0_PLUS_rs2_val__ETC__q10,
		rs1_val_bypassed995_BITS_31_TO_0_SRL_rs2_val_b_ETC__q9,
		rs1_val_bypassed995_BITS_31_TO_0__q8,
		stage1_rg_stage_input_BITS_263_TO_232__q28,
		tmp__h11190,
		v32__h7861,
		x__h11112,
		x__h11165,
		x__h11302,
		x__h11347,
		x_out_data_to_stage1_instr__h11849;
  wire [20 : 0] SEXT_stageD_rg_data_365_BIT_76_382_CONCAT_stag_ETC___d1435,
		decoded_instr_imm21_UJ__h23259,
		stage1_rg_stage_input_BITS_30_TO_10__q2;
  wire [19 : 0] imm20__h14164;
  wire [12 : 0] SEXT_stageD_rg_data_365_BIT_76_382_CONCAT_stag_ETC___d1460,
		decoded_instr_imm13_SB__h23257,
		stage1_rg_stage_input_BITS_63_TO_51__q1;
  wire [11 : 0] decoded_instr_imm12_S__h23256,
		imm12__h12063,
		imm12__h12400,
		imm12__h14036,
		imm12__h14705,
		imm12__h14920,
		imm12__h15116,
		imm12__h15453,
		imm12__h17074,
		imm12__h17426,
		offset__h12770,
		stage1_rg_stage_input_BITS_75_TO_64__q7,
		stage1_rg_stage_input_BITS_87_TO_76__q24;
  wire [9 : 0] decoded_instr_funct10__h23254,
	       nzimm10__h14703,
	       nzimm10__h14918;
  wire [8 : 0] offset__h13401, offset__h16988;
  wire [7 : 0] offset__h11935, offset__h17360;
  wire [6 : 0] offset__h12342;
  wire [5 : 0] imm6__h14034, shamt__h7745;
  wire [4 : 0] offset_BITS_4_TO_0___h12331,
	       offset_BITS_4_TO_0___h12762,
	       offset_BITS_4_TO_0___h17701,
	       rd__h12402,
	       rs1__h12401,
	       x_out_data_to_stage2_rd__h7478;
  wire [3 : 0] IF_IF_stage1_rg_stage_input_01_BITS_151_TO_145_ETC___d925,
	       IF_NOT_stage1_rg_stage_input_01_BITS_112_TO_11_ETC___d875,
	       IF_NOT_stage1_rg_stage_input_01_BITS_112_TO_11_ETC___d878,
	       IF_NOT_stage1_rg_stage_input_01_BITS_112_TO_11_ETC___d879,
	       IF_rg_cur_priv_8_EQ_0b11_84_OR_rg_cur_priv_8_E_ETC___d913,
	       IF_stage1_rg_stage_input_01_BITS_144_TO_140_82_ETC___d917,
	       IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943,
	       alu_outputs___1_exc_code__h8211,
	       cur_verbosity__h2644,
	       x_out_trap_info_exc_code__h10686;
  wire [2 : 0] IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d1037,
	       rm__h8326,
	       x_out_data_to_stage2_rounding_mode__h7484;
  wire [1 : 0] IF_NOT_stage2_rg_full_03_36_OR_stage2_rg_stage_ETC___d284,
	       IF_near_mem_dmem_valid__27_AND_NOT_near_mem_dm_ETC___d254,
	       IF_near_mem_dmem_valid__27_THEN_IF_near_mem_dm_ETC___d130,
	       IF_stage2_fbox_valid__33_THEN_2_ELSE_1___d134,
	       IF_stage2_mbox_valid__31_THEN_2_ELSE_1___d132,
	       IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139,
	       IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d262,
	       IF_stage2_rg_stage2_04_BIT_3_94_OR_stage2_rg_s_ETC___d255,
	       IF_stage2_rg_stage2_04_BIT_3_94_THEN_IF_near_m_ETC___d279,
	       sxl__h5383,
	       uxl__h5384;
  wire IF_IF_stage1_rg_stage_input_01_BITS_151_TO_145_ETC___d1355,
       IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d1955,
       IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d1958,
       IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2090,
       IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2131,
       IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2144,
       IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2150,
       IF_NOT_stage1_rg_full_00_72_OR_NOT_stage1_rg_s_ETC___d2019,
       IF_NOT_stage1_rg_full_00_72_OR_NOT_stage1_rg_s_ETC___d2286,
       IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC___d365,
       IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC___d367,
       IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC___d369,
       IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d663,
       IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d678,
       IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d689,
       IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d848,
       IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d863,
       IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d865,
       IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d1972,
       IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d2010,
       IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d2012,
       IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d305,
       IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d307,
       IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d868,
       NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46,
       NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d1948,
       NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692,
       NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d1930,
       NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d1959,
       NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d2253,
       NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d2265,
       NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_75_ETC___d1780,
       NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_75_ETC___d1782,
       NOT_rg_cur_priv_8_EQ_0b11_84_334_AND_NOT_rg_cu_ETC___d1340,
       NOT_rg_halt_939_940_AND_NOT_csr_regfile_interr_ETC___d1951,
       NOT_stage1_rg_full_00_72_OR_stage1_rg_stage_in_ETC___d1975,
       NOT_stage1_rg_stage_input_01_BITS_112_TO_110_3_ETC___d412,
       NOT_stage1_rg_stage_input_01_BIT_334_02_EQ_rg__ETC___d1016,
       NOT_stage1_rg_stage_input_01_BIT_334_02_EQ_rg__ETC___d696,
       csr_regfile_RDY_server_reset_request_put__889__ETC___d1901,
       csr_regfile_read_misa__6_BIT_2_370_AND_stageD__ETC___d1445,
       csr_regfile_read_misa__6_BIT_2_370_AND_stageD__ETC___d1451,
       epoch__h24371,
       gpr_regfile_RDY_server_reset_request_put__886__ETC___d1904,
       near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8,
       near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1786,
       near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788,
       near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9___d1753,
       near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1884,
       rg_cur_priv_8_EQ_0b11_84_OR_rg_cur_priv_8_EQ_0_ETC___d1329,
       rg_cur_priv_8_EQ_0b11_84_OR_rg_cur_priv_8_EQ_0_ETC___d911,
       rg_state_7_EQ_2_961_AND_NOT_rg_halt_939_940_AN_ETC___d2186,
       rg_state_7_EQ_2_961_AND_NOT_rg_halt_939_940_AN_ETC___d2237,
       rg_state_7_EQ_2_961_AND_NOT_rg_halt_939_940_AN_ETC___d2249,
       rg_state_7_EQ_2_961_AND_NOT_rg_halt_939_940_AN_ETC___d2261,
       rg_state_7_EQ_2_961_AND_NOT_stage3_rg_full_8_9_ETC___d2174,
       rg_state_7_EQ_2_961_AND_stage3_rg_full_8_OR_NO_ETC___d1971,
       rg_state_7_EQ_3_280_OR_rg_state_7_EQ_2_961_AND_ETC___d2284,
       rg_state_7_EQ_4_229_AND_NOT_stageF_rg_full_771_ETC___d2230,
       rg_state_7_EQ_8_4_AND_csr_regfile_wfi_resume___ETC___d2276,
       stage1_rg_full_00_AND_NOT_stage1_rg_stage_inpu_ETC___d2140,
       stage1_rg_full_00_AND_NOT_stage1_rg_stage_inpu_ETC___d2303,
       stage1_rg_full_00_AND_NOT_stage1_rg_stage_inpu_ETC___d871,
       stage1_rg_stage_input_01_BITS_112_TO_110_30_EQ_ETC___d716,
       stage1_rg_stage_input_01_BITS_144_TO_140_82_EQ_ETC___d890,
       stage1_rg_stage_input_01_BITS_151_TO_145_28_EQ_ETC___d709,
       stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoc_ETC___d1297,
       stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoc_ETC___d321,
       stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303,
       stage3_rg_full_8_OR_NOT_IF_stage2_rg_full_03_T_ETC___d1969,
       stage3_rg_stage3_0_BITS_75_TO_71_9_EQ_stage1_r_ETC___d351,
       stage3_rg_stage3_0_BITS_75_TO_71_9_EQ_stage1_r_ETC___d359,
       stageF_branch_predictor_RDY_predict_req__913_A_ETC___d1925,
       stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1797,
       stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1803,
       stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1807,
       stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1811,
       stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1815,
       stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1819,
       stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1823,
       stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1827,
       stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1831,
       stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1835,
       stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1839,
       stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1843,
       stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1847,
       stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1851,
       stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1855,
       v__h20777;

  // action method hart0_server_reset_request_put
  assign RDY_hart0_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_hart0_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_hart0_server_reset_request_put =
	     EN_hart0_server_reset_request_put ;

  // action method hart0_server_reset_response_get
  assign RDY_hart0_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_hart0_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_hart0_server_reset_response_get =
	     EN_hart0_server_reset_response_get ;

  // value method imem_master_m_awvalid
  assign imem_master_awvalid = near_mem$imem_master_awvalid ;

  // value method imem_master_m_awaddr
  assign imem_master_awaddr = near_mem$imem_master_awaddr ;

  // value method imem_master_m_awprot
  assign imem_master_awprot = near_mem$imem_master_awprot ;

  // action method imem_master_m_awready
  assign CAN_FIRE_imem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_awready = 1'd1 ;

  // value method imem_master_m_wvalid
  assign imem_master_wvalid = near_mem$imem_master_wvalid ;

  // value method imem_master_m_wdata
  assign imem_master_wdata = near_mem$imem_master_wdata ;

  // value method imem_master_m_wstrb
  assign imem_master_wstrb = near_mem$imem_master_wstrb ;

  // action method imem_master_m_wready
  assign CAN_FIRE_imem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_wready = 1'd1 ;

  // action method imem_master_m_bvalid
  assign CAN_FIRE_imem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_bvalid = 1'd1 ;

  // value method imem_master_m_bready
  assign imem_master_bready = near_mem$imem_master_bready ;

  // value method imem_master_m_arvalid
  assign imem_master_arvalid = near_mem$imem_master_arvalid ;

  // value method imem_master_m_araddr
  assign imem_master_araddr = near_mem$imem_master_araddr ;

  // value method imem_master_m_arprot
  assign imem_master_arprot = near_mem$imem_master_arprot ;

  // action method imem_master_m_arready
  assign CAN_FIRE_imem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_arready = 1'd1 ;

  // action method imem_master_m_rvalid
  assign CAN_FIRE_imem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_rvalid = 1'd1 ;

  // value method imem_master_m_rready
  assign imem_master_rready = near_mem$imem_master_rready ;

  // value method dmem_master_m_awvalid
  assign dmem_master_awvalid = near_mem$dmem_master_awvalid ;

  // value method dmem_master_m_awaddr
  assign dmem_master_awaddr = near_mem$dmem_master_awaddr ;

  // value method dmem_master_m_awprot
  assign dmem_master_awprot = near_mem$dmem_master_awprot ;

  // action method dmem_master_m_awready
  assign CAN_FIRE_dmem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_awready = 1'd1 ;

  // value method dmem_master_m_wvalid
  assign dmem_master_wvalid = near_mem$dmem_master_wvalid ;

  // value method dmem_master_m_wdata
  assign dmem_master_wdata = near_mem$dmem_master_wdata ;

  // value method dmem_master_m_wstrb
  assign dmem_master_wstrb = near_mem$dmem_master_wstrb ;

  // action method dmem_master_m_wready
  assign CAN_FIRE_dmem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_wready = 1'd1 ;

  // action method dmem_master_m_bvalid
  assign CAN_FIRE_dmem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_bvalid = 1'd1 ;

  // value method dmem_master_m_bready
  assign dmem_master_bready = near_mem$dmem_master_bready ;

  // value method dmem_master_m_arvalid
  assign dmem_master_arvalid = near_mem$dmem_master_arvalid ;

  // value method dmem_master_m_araddr
  assign dmem_master_araddr = near_mem$dmem_master_araddr ;

  // value method dmem_master_m_arprot
  assign dmem_master_arprot = near_mem$dmem_master_arprot ;

  // action method dmem_master_m_arready
  assign CAN_FIRE_dmem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_arready = 1'd1 ;

  // action method dmem_master_m_rvalid
  assign CAN_FIRE_dmem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_rvalid = 1'd1 ;

  // value method dmem_master_m_rready
  assign dmem_master_rready = near_mem$dmem_master_rready ;

  // action method near_mem_slave_m_awvalid
  assign CAN_FIRE_near_mem_slave_m_awvalid = 1'd1 ;
  assign WILL_FIRE_near_mem_slave_m_awvalid = 1'd1 ;

  // value method near_mem_slave_m_awready
  assign near_mem_slave_awready = near_mem$near_mem_slave_awready ;

  // action method near_mem_slave_m_wvalid
  assign CAN_FIRE_near_mem_slave_m_wvalid = 1'd1 ;
  assign WILL_FIRE_near_mem_slave_m_wvalid = 1'd1 ;

  // value method near_mem_slave_m_wready
  assign near_mem_slave_wready = near_mem$near_mem_slave_wready ;

  // value method near_mem_slave_m_bvalid
  assign near_mem_slave_bvalid = near_mem$near_mem_slave_bvalid ;

  // value method near_mem_slave_m_bresp
  assign near_mem_slave_bresp = near_mem$near_mem_slave_bresp ;

  // action method near_mem_slave_m_bready
  assign CAN_FIRE_near_mem_slave_m_bready = 1'd1 ;
  assign WILL_FIRE_near_mem_slave_m_bready = 1'd1 ;

  // action method near_mem_slave_m_arvalid
  assign CAN_FIRE_near_mem_slave_m_arvalid = 1'd1 ;
  assign WILL_FIRE_near_mem_slave_m_arvalid = 1'd1 ;

  // value method near_mem_slave_m_arready
  assign near_mem_slave_arready = near_mem$near_mem_slave_arready ;

  // value method near_mem_slave_m_rvalid
  assign near_mem_slave_rvalid = near_mem$near_mem_slave_rvalid ;

  // value method near_mem_slave_m_rresp
  assign near_mem_slave_rresp = near_mem$near_mem_slave_rresp ;

  // value method near_mem_slave_m_rdata
  assign near_mem_slave_rdata = near_mem$near_mem_slave_rdata ;

  // action method near_mem_slave_m_rready
  assign CAN_FIRE_near_mem_slave_m_rready = 1'd1 ;
  assign WILL_FIRE_near_mem_slave_m_rready = 1'd1 ;

  // action method external_interrupt_req
  assign CAN_FIRE_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_external_interrupt_req = 1'd1 ;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // submodule csr_regfile
  mkCSR_RegFile csr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .access_permitted_1_csr_addr(csr_regfile$access_permitted_1_csr_addr),
			    .access_permitted_1_priv(csr_regfile$access_permitted_1_priv),
			    .access_permitted_1_read_not_write(csr_regfile$access_permitted_1_read_not_write),
			    .access_permitted_2_csr_addr(csr_regfile$access_permitted_2_csr_addr),
			    .access_permitted_2_priv(csr_regfile$access_permitted_2_priv),
			    .access_permitted_2_read_not_write(csr_regfile$access_permitted_2_read_not_write),
			    .csr_counter_read_fault_csr_addr(csr_regfile$csr_counter_read_fault_csr_addr),
			    .csr_counter_read_fault_priv(csr_regfile$csr_counter_read_fault_priv),
			    .csr_ret_actions_from_priv(csr_regfile$csr_ret_actions_from_priv),
			    .csr_trap_actions_exc_code(csr_regfile$csr_trap_actions_exc_code),
			    .csr_trap_actions_from_priv(csr_regfile$csr_trap_actions_from_priv),
			    .csr_trap_actions_interrupt(csr_regfile$csr_trap_actions_interrupt),
			    .csr_trap_actions_pc(csr_regfile$csr_trap_actions_pc),
			    .csr_trap_actions_xtval(csr_regfile$csr_trap_actions_xtval),
			    .external_interrupt_req_set_not_clear(csr_regfile$external_interrupt_req_set_not_clear),
			    .interrupt_pending_cur_priv(csr_regfile$interrupt_pending_cur_priv),
			    .mav_csr_write_csr_addr(csr_regfile$mav_csr_write_csr_addr),
			    .mav_csr_write_word(csr_regfile$mav_csr_write_word),
			    .mav_read_csr_csr_addr(csr_regfile$mav_read_csr_csr_addr),
			    .read_csr_csr_addr(csr_regfile$read_csr_csr_addr),
			    .read_csr_port2_csr_addr(csr_regfile$read_csr_port2_csr_addr),
			    .software_interrupt_req_set_not_clear(csr_regfile$software_interrupt_req_set_not_clear),
			    .timer_interrupt_req_set_not_clear(csr_regfile$timer_interrupt_req_set_not_clear),
			    .update_fcsr_fflags_flags(csr_regfile$update_fcsr_fflags_flags),
			    .EN_server_reset_request_put(csr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(csr_regfile$EN_server_reset_response_get),
			    .EN_mav_read_csr(csr_regfile$EN_mav_read_csr),
			    .EN_mav_csr_write(csr_regfile$EN_mav_csr_write),
			    .EN_update_fcsr_fflags(csr_regfile$EN_update_fcsr_fflags),
			    .EN_csr_trap_actions(csr_regfile$EN_csr_trap_actions),
			    .EN_csr_ret_actions(csr_regfile$EN_csr_ret_actions),
			    .EN_csr_minstret_incr(csr_regfile$EN_csr_minstret_incr),
			    .EN_timer_interrupt_req(csr_regfile$EN_timer_interrupt_req),
			    .EN_software_interrupt_req(csr_regfile$EN_software_interrupt_req),
			    .EN_debug(csr_regfile$EN_debug),
			    .RDY_server_reset_request_put(csr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(csr_regfile$RDY_server_reset_response_get),
			    .read_csr(csr_regfile$read_csr),
			    .read_csr_port2(),
			    .mav_read_csr(),
			    .mav_csr_write(),
			    .read_frm(csr_regfile$read_frm),
			    .read_misa(csr_regfile$read_misa),
			    .read_mstatus(csr_regfile$read_mstatus),
			    .read_sstatus(csr_regfile$read_sstatus),
			    .read_ustatus(),
			    .read_satp(csr_regfile$read_satp),
			    .csr_trap_actions(csr_regfile$csr_trap_actions),
			    .RDY_csr_trap_actions(),
			    .csr_ret_actions(csr_regfile$csr_ret_actions),
			    .RDY_csr_ret_actions(),
			    .read_csr_minstret(csr_regfile$read_csr_minstret),
			    .read_csr_mcycle(csr_regfile$read_csr_mcycle),
			    .read_csr_mtime(),
			    .access_permitted_1(csr_regfile$access_permitted_1),
			    .access_permitted_2(csr_regfile$access_permitted_2),
			    .csr_counter_read_fault(),
			    .csr_mip_read(),
			    .RDY_timer_interrupt_req(),
			    .RDY_software_interrupt_req(),
			    .interrupt_pending(csr_regfile$interrupt_pending),
			    .wfi_resume(csr_regfile$wfi_resume),
			    .RDY_debug());

  // submodule f_reset_reqs
  FIFO20 #(.guarded(32'd1)) f_reset_reqs(.RST(RST_N),
					 .CLK(CLK),
					 .ENQ(f_reset_reqs$ENQ),
					 .DEQ(f_reset_reqs$DEQ),
					 .CLR(f_reset_reqs$CLR),
					 .FULL_N(f_reset_reqs$FULL_N),
					 .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO20 #(.guarded(32'd1)) f_reset_rsps(.RST(RST_N),
					 .CLK(CLK),
					 .ENQ(f_reset_rsps$ENQ),
					 .DEQ(f_reset_rsps$DEQ),
					 .CLR(f_reset_rsps$CLR),
					 .FULL_N(f_reset_rsps$FULL_N),
					 .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule fpr_regfile
  mkFPR_RegFile fpr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .read_rs1_port2_rs1(fpr_regfile$read_rs1_port2_rs1),
			    .read_rs1_rs1(fpr_regfile$read_rs1_rs1),
			    .read_rs2_rs2(fpr_regfile$read_rs2_rs2),
			    .read_rs3_rs3(fpr_regfile$read_rs3_rs3),
			    .write_rd_rd(fpr_regfile$write_rd_rd),
			    .write_rd_rd_val(fpr_regfile$write_rd_rd_val),
			    .EN_server_reset_request_put(fpr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(fpr_regfile$EN_server_reset_response_get),
			    .EN_write_rd(fpr_regfile$EN_write_rd),
			    .RDY_server_reset_request_put(fpr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(fpr_regfile$RDY_server_reset_response_get),
			    .read_rs1(fpr_regfile$read_rs1),
			    .read_rs1_port2(),
			    .read_rs2(fpr_regfile$read_rs2),
			    .read_rs3(fpr_regfile$read_rs3));

  // submodule gpr_regfile
  mkGPR_RegFile gpr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .read_rs1_port2_rs1(gpr_regfile$read_rs1_port2_rs1),
			    .read_rs1_rs1(gpr_regfile$read_rs1_rs1),
			    .read_rs2_rs2(gpr_regfile$read_rs2_rs2),
			    .write_rd_rd(gpr_regfile$write_rd_rd),
			    .write_rd_rd_val(gpr_regfile$write_rd_rd_val),
			    .EN_server_reset_request_put(gpr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(gpr_regfile$EN_server_reset_response_get),
			    .EN_write_rd(gpr_regfile$EN_write_rd),
			    .RDY_server_reset_request_put(gpr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(gpr_regfile$RDY_server_reset_response_get),
			    .read_rs1(gpr_regfile$read_rs1),
			    .read_rs1_port2(),
			    .read_rs2(gpr_regfile$read_rs2));

  // submodule near_mem
  mkNear_Mem #(.near_mem_io_addr_base(near_mem_io_addr_base),
	       .near_mem_io_addr_lim(near_mem_io_addr_lim)) near_mem(.CLK(CLK),
								     .RST_N(RST_N),
								     .dmem_master_arready(near_mem$dmem_master_arready),
								     .dmem_master_awready(near_mem$dmem_master_awready),
								     .dmem_master_bresp(near_mem$dmem_master_bresp),
								     .dmem_master_bvalid(near_mem$dmem_master_bvalid),
								     .dmem_master_rdata(near_mem$dmem_master_rdata),
								     .dmem_master_rresp(near_mem$dmem_master_rresp),
								     .dmem_master_rvalid(near_mem$dmem_master_rvalid),
								     .dmem_master_wready(near_mem$dmem_master_wready),
								     .dmem_req_addr(near_mem$dmem_req_addr),
								     .dmem_req_amo_funct7(near_mem$dmem_req_amo_funct7),
								     .dmem_req_f3(near_mem$dmem_req_f3),
								     .dmem_req_mstatus_MXR(near_mem$dmem_req_mstatus_MXR),
								     .dmem_req_op(near_mem$dmem_req_op),
								     .dmem_req_priv(near_mem$dmem_req_priv),
								     .dmem_req_satp(near_mem$dmem_req_satp),
								     .dmem_req_sstatus_SUM(near_mem$dmem_req_sstatus_SUM),
								     .dmem_req_store_value(near_mem$dmem_req_store_value),
								     .imem_master_arready(near_mem$imem_master_arready),
								     .imem_master_awready(near_mem$imem_master_awready),
								     .imem_master_bresp(near_mem$imem_master_bresp),
								     .imem_master_bvalid(near_mem$imem_master_bvalid),
								     .imem_master_rdata(near_mem$imem_master_rdata),
								     .imem_master_rresp(near_mem$imem_master_rresp),
								     .imem_master_rvalid(near_mem$imem_master_rvalid),
								     .imem_master_wready(near_mem$imem_master_wready),
								     .imem_req_addr(near_mem$imem_req_addr),
								     .imem_req_f3(near_mem$imem_req_f3),
								     .imem_req_mstatus_MXR(near_mem$imem_req_mstatus_MXR),
								     .imem_req_priv(near_mem$imem_req_priv),
								     .imem_req_satp(near_mem$imem_req_satp),
								     .imem_req_sstatus_SUM(near_mem$imem_req_sstatus_SUM),
								     .near_mem_slave_araddr(near_mem$near_mem_slave_araddr),
								     .near_mem_slave_arprot(near_mem$near_mem_slave_arprot),
								     .near_mem_slave_arvalid(near_mem$near_mem_slave_arvalid),
								     .near_mem_slave_awaddr(near_mem$near_mem_slave_awaddr),
								     .near_mem_slave_awprot(near_mem$near_mem_slave_awprot),
								     .near_mem_slave_awvalid(near_mem$near_mem_slave_awvalid),
								     .near_mem_slave_bready(near_mem$near_mem_slave_bready),
								     .near_mem_slave_rready(near_mem$near_mem_slave_rready),
								     .near_mem_slave_wdata(near_mem$near_mem_slave_wdata),
								     .near_mem_slave_wstrb(near_mem$near_mem_slave_wstrb),
								     .near_mem_slave_wvalid(near_mem$near_mem_slave_wvalid),
								     .server_fence_request_put(near_mem$server_fence_request_put),
								     .EN_server_reset_request_put(near_mem$EN_server_reset_request_put),
								     .EN_server_reset_response_get(near_mem$EN_server_reset_response_get),
								     .EN_imem_req(near_mem$EN_imem_req),
								     .EN_dmem_req(near_mem$EN_dmem_req),
								     .EN_server_fence_i_request_put(near_mem$EN_server_fence_i_request_put),
								     .EN_server_fence_i_response_get(near_mem$EN_server_fence_i_response_get),
								     .EN_server_fence_request_put(near_mem$EN_server_fence_request_put),
								     .EN_server_fence_response_get(near_mem$EN_server_fence_response_get),
								     .EN_sfence_vma(near_mem$EN_sfence_vma),
								     .EN_get_timer_interrupt_req_get(near_mem$EN_get_timer_interrupt_req_get),
								     .EN_get_sw_interrupt_req_get(near_mem$EN_get_sw_interrupt_req_get),
								     .RDY_server_reset_request_put(near_mem$RDY_server_reset_request_put),
								     .RDY_server_reset_response_get(near_mem$RDY_server_reset_response_get),
								     .imem_valid(near_mem$imem_valid),
								     .imem_is_i32_not_i16(near_mem$imem_is_i32_not_i16),
								     .imem_pc(near_mem$imem_pc),
								     .imem_instr(near_mem$imem_instr),
								     .imem_exc(near_mem$imem_exc),
								     .imem_exc_code(near_mem$imem_exc_code),
								     .imem_tval(),
								     .imem_master_awvalid(near_mem$imem_master_awvalid),
								     .imem_master_awaddr(near_mem$imem_master_awaddr),
								     .imem_master_awprot(near_mem$imem_master_awprot),
								     .imem_master_wvalid(near_mem$imem_master_wvalid),
								     .imem_master_wdata(near_mem$imem_master_wdata),
								     .imem_master_wstrb(near_mem$imem_master_wstrb),
								     .imem_master_bready(near_mem$imem_master_bready),
								     .imem_master_arvalid(near_mem$imem_master_arvalid),
								     .imem_master_araddr(near_mem$imem_master_araddr),
								     .imem_master_arprot(near_mem$imem_master_arprot),
								     .imem_master_rready(near_mem$imem_master_rready),
								     .dmem_valid(near_mem$dmem_valid),
								     .dmem_word64(near_mem$dmem_word64),
								     .dmem_st_amo_val(),
								     .dmem_exc(near_mem$dmem_exc),
								     .dmem_exc_code(near_mem$dmem_exc_code),
								     .dmem_master_awvalid(near_mem$dmem_master_awvalid),
								     .dmem_master_awaddr(near_mem$dmem_master_awaddr),
								     .dmem_master_awprot(near_mem$dmem_master_awprot),
								     .dmem_master_wvalid(near_mem$dmem_master_wvalid),
								     .dmem_master_wdata(near_mem$dmem_master_wdata),
								     .dmem_master_wstrb(near_mem$dmem_master_wstrb),
								     .dmem_master_bready(near_mem$dmem_master_bready),
								     .dmem_master_arvalid(near_mem$dmem_master_arvalid),
								     .dmem_master_araddr(near_mem$dmem_master_araddr),
								     .dmem_master_arprot(near_mem$dmem_master_arprot),
								     .dmem_master_rready(near_mem$dmem_master_rready),
								     .RDY_server_fence_i_request_put(near_mem$RDY_server_fence_i_request_put),
								     .RDY_server_fence_i_response_get(near_mem$RDY_server_fence_i_response_get),
								     .RDY_server_fence_request_put(near_mem$RDY_server_fence_request_put),
								     .RDY_server_fence_response_get(near_mem$RDY_server_fence_response_get),
								     .RDY_sfence_vma(),
								     .get_timer_interrupt_req_get(near_mem$get_timer_interrupt_req_get),
								     .RDY_get_timer_interrupt_req_get(near_mem$RDY_get_timer_interrupt_req_get),
								     .get_sw_interrupt_req_get(near_mem$get_sw_interrupt_req_get),
								     .RDY_get_sw_interrupt_req_get(near_mem$RDY_get_sw_interrupt_req_get),
								     .near_mem_slave_awready(near_mem$near_mem_slave_awready),
								     .near_mem_slave_wready(near_mem$near_mem_slave_wready),
								     .near_mem_slave_bvalid(near_mem$near_mem_slave_bvalid),
								     .near_mem_slave_bresp(near_mem$near_mem_slave_bresp),
								     .near_mem_slave_arready(near_mem$near_mem_slave_arready),
								     .near_mem_slave_rvalid(near_mem$near_mem_slave_rvalid),
								     .near_mem_slave_rresp(near_mem$near_mem_slave_rresp),
								     .near_mem_slave_rdata(near_mem$near_mem_slave_rdata));

  // submodule stage1_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage1_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage1_f_reset_reqs$ENQ),
						.DEQ(stage1_f_reset_reqs$DEQ),
						.CLR(stage1_f_reset_reqs$CLR),
						.FULL_N(stage1_f_reset_reqs$FULL_N),
						.EMPTY_N(stage1_f_reset_reqs$EMPTY_N));

  // submodule stage1_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage1_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage1_f_reset_rsps$ENQ),
						.DEQ(stage1_f_reset_rsps$DEQ),
						.CLR(stage1_f_reset_rsps$CLR),
						.FULL_N(stage1_f_reset_rsps$FULL_N),
						.EMPTY_N(stage1_f_reset_rsps$EMPTY_N));

  // submodule stage2_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage2_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage2_f_reset_reqs$ENQ),
						.DEQ(stage2_f_reset_reqs$DEQ),
						.CLR(stage2_f_reset_reqs$CLR),
						.FULL_N(stage2_f_reset_reqs$FULL_N),
						.EMPTY_N(stage2_f_reset_reqs$EMPTY_N));

  // submodule stage2_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage2_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage2_f_reset_rsps$ENQ),
						.DEQ(stage2_f_reset_rsps$DEQ),
						.CLR(stage2_f_reset_rsps$CLR),
						.FULL_N(stage2_f_reset_rsps$FULL_N),
						.EMPTY_N(stage2_f_reset_rsps$EMPTY_N));

  // submodule stage2_fbox
  mkRISCV_FBox stage2_fbox(.CLK(CLK),
			   .RST_N(RST_N),
			   .req_f7(stage2_fbox$req_f7),
			   .req_opcode(stage2_fbox$req_opcode),
			   .req_rm(stage2_fbox$req_rm),
			   .req_rs2(stage2_fbox$req_rs2),
			   .req_v1(stage2_fbox$req_v1),
			   .req_v2(stage2_fbox$req_v2),
			   .req_v3(stage2_fbox$req_v3),
			   .set_verbosity_verbosity(stage2_fbox$set_verbosity_verbosity),
			   .EN_set_verbosity(stage2_fbox$EN_set_verbosity),
			   .EN_req(stage2_fbox$EN_req),
			   .RDY_set_verbosity(),
			   .valid(stage2_fbox$valid),
			   .word_fst(stage2_fbox$word_fst),
			   .word_snd(stage2_fbox$word_snd));

  // submodule stage2_mbox
  mkRISCV_MBox stage2_mbox(.CLK(CLK),
			   .RST_N(RST_N),
			   .req_f3(stage2_mbox$req_f3),
			   .req_is_OP_not_OP_32(stage2_mbox$req_is_OP_not_OP_32),
			   .req_v1(stage2_mbox$req_v1),
			   .req_v2(stage2_mbox$req_v2),
			   .set_verbosity_verbosity(stage2_mbox$set_verbosity_verbosity),
			   .EN_set_verbosity(stage2_mbox$EN_set_verbosity),
			   .EN_req_reset(stage2_mbox$EN_req_reset),
			   .EN_rsp_reset(stage2_mbox$EN_rsp_reset),
			   .EN_req(stage2_mbox$EN_req),
			   .RDY_set_verbosity(),
			   .RDY_req_reset(),
			   .RDY_rsp_reset(),
			   .valid(stage2_mbox$valid),
			   .word(stage2_mbox$word));

  // submodule stage3_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage3_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage3_f_reset_reqs$ENQ),
						.DEQ(stage3_f_reset_reqs$DEQ),
						.CLR(stage3_f_reset_reqs$CLR),
						.FULL_N(stage3_f_reset_reqs$FULL_N),
						.EMPTY_N(stage3_f_reset_reqs$EMPTY_N));

  // submodule stage3_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage3_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage3_f_reset_rsps$ENQ),
						.DEQ(stage3_f_reset_rsps$DEQ),
						.CLR(stage3_f_reset_rsps$CLR),
						.FULL_N(stage3_f_reset_rsps$FULL_N),
						.EMPTY_N(stage3_f_reset_rsps$EMPTY_N));

  // submodule stageD_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stageD_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stageD_f_reset_reqs$ENQ),
						.DEQ(stageD_f_reset_reqs$DEQ),
						.CLR(stageD_f_reset_reqs$CLR),
						.FULL_N(stageD_f_reset_reqs$FULL_N),
						.EMPTY_N(stageD_f_reset_reqs$EMPTY_N));

  // submodule stageD_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stageD_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stageD_f_reset_rsps$ENQ),
						.DEQ(stageD_f_reset_rsps$DEQ),
						.CLR(stageD_f_reset_rsps$CLR),
						.FULL_N(stageD_f_reset_rsps$FULL_N),
						.EMPTY_N(stageD_f_reset_rsps$EMPTY_N));

  // submodule stageF_branch_predictor
  mkBranch_Predictor stageF_branch_predictor(.CLK(CLK),
					     .RST_N(RST_N),
					     .predict_req_m_old_pc(stageF_branch_predictor$predict_req_m_old_pc),
					     .predict_req_pc(stageF_branch_predictor$predict_req_pc),
					     .EN_reset(stageF_branch_predictor$EN_reset),
					     .EN_predict_req(stageF_branch_predictor$EN_predict_req),
					     .RDY_reset(),
					     .RDY_predict_req(stageF_branch_predictor$RDY_predict_req),
					     .predict_rsp(stageF_branch_predictor$predict_rsp));

  // submodule stageF_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stageF_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stageF_f_reset_reqs$ENQ),
						.DEQ(stageF_f_reset_reqs$DEQ),
						.CLR(stageF_f_reset_reqs$CLR),
						.FULL_N(stageF_f_reset_reqs$FULL_N),
						.EMPTY_N(stageF_f_reset_reqs$EMPTY_N));

  // submodule stageF_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stageF_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stageF_f_reset_rsps$ENQ),
						.DEQ(stageF_f_reset_rsps$DEQ),
						.CLR(stageF_f_reset_rsps$CLR),
						.FULL_N(stageF_f_reset_rsps$FULL_N),
						.EMPTY_N(stageF_f_reset_rsps$EMPTY_N));

  // rule RL_rl_show_pipe
  assign CAN_FIRE_RL_rl_show_pipe =
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46 &&
	     rg_state != 4'd0 &&
	     rg_state != 4'd1 &&
	     rg_state != 4'd8 ;
  assign WILL_FIRE_RL_rl_show_pipe = CAN_FIRE_RL_rl_show_pipe ;

  // rule RL_rl_reset_complete
  assign CAN_FIRE_RL_rl_reset_complete =
	     NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d1930 &&
	     rg_state == 4'd1 ;
  assign WILL_FIRE_RL_rl_reset_complete = CAN_FIRE_RL_rl_reset_complete ;

  // rule RL_rl_stage2_nonpipe
  assign CAN_FIRE_RL_rl_stage2_nonpipe =
	     NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d1959 &&
	     rg_state_7_EQ_2_961_AND_NOT_stage3_rg_full_8_9_ETC___d2174 ;
  assign WILL_FIRE_RL_rl_stage2_nonpipe = CAN_FIRE_RL_rl_stage2_nonpipe ;

  // rule RL_rl_stage1_CSRR_W
  assign CAN_FIRE_RL_rl_stage1_CSRR_W = MUX_rg_state$write_1__SEL_1 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_W = MUX_rg_state$write_1__SEL_1 ;

  // rule RL_rl_stage1_CSRR_S_or_C
  assign CAN_FIRE_RL_rl_stage1_CSRR_S_or_C = MUX_rg_state$write_1__SEL_2 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_S_or_C = MUX_rg_state$write_1__SEL_2 ;

  // rule RL_rl_stage1_restart_after_csrrx
  assign CAN_FIRE_RL_rl_stage1_restart_after_csrrx =
	     NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d1959 &&
	     rg_state_7_EQ_4_229_AND_NOT_stageF_rg_full_771_ETC___d2230 ;
  assign WILL_FIRE_RL_rl_stage1_restart_after_csrrx =
	     CAN_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // rule RL_rl_stage1_xRET
  assign CAN_FIRE_RL_rl_stage1_xRET =
	     NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d1959 &&
	     rg_state_7_EQ_2_961_AND_NOT_rg_halt_939_940_AN_ETC___d2237 ;
  assign WILL_FIRE_RL_rl_stage1_xRET = CAN_FIRE_RL_rl_stage1_xRET ;

  // rule RL_rl_stage1_FENCE_I
  assign CAN_FIRE_RL_rl_stage1_FENCE_I = MUX_rg_state$write_1__SEL_6 ;
  assign WILL_FIRE_RL_rl_stage1_FENCE_I = MUX_rg_state$write_1__SEL_6 ;

  // rule RL_rl_finish_FENCE_I
  assign CAN_FIRE_RL_rl_finish_FENCE_I =
	     NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d2253 &&
	     rg_state == 4'd5 ;
  assign WILL_FIRE_RL_rl_finish_FENCE_I = CAN_FIRE_RL_rl_finish_FENCE_I ;

  // rule RL_rl_stage1_FENCE
  assign CAN_FIRE_RL_rl_stage1_FENCE = MUX_rg_state$write_1__SEL_7 ;
  assign WILL_FIRE_RL_rl_stage1_FENCE = MUX_rg_state$write_1__SEL_7 ;

  // rule RL_rl_finish_FENCE
  assign CAN_FIRE_RL_rl_finish_FENCE =
	     NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d2265 &&
	     rg_state == 4'd6 ;
  assign WILL_FIRE_RL_rl_finish_FENCE = CAN_FIRE_RL_rl_finish_FENCE ;

  // rule RL_rl_finish_SFENCE_VMA
  assign CAN_FIRE_RL_rl_finish_SFENCE_VMA =
	     NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d1959 &&
	     rg_state == 4'd7 ;
  assign WILL_FIRE_RL_rl_finish_SFENCE_VMA =
	     CAN_FIRE_RL_rl_finish_SFENCE_VMA ;

  // rule RL_rl_stage1_WFI
  assign CAN_FIRE_RL_rl_stage1_WFI = MUX_rg_state$write_1__SEL_9 ;
  assign WILL_FIRE_RL_rl_stage1_WFI = MUX_rg_state$write_1__SEL_9 ;

  // rule RL_rl_WFI_resume
  assign CAN_FIRE_RL_rl_WFI_resume =
	     NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d1959 &&
	     rg_state_7_EQ_8_4_AND_csr_regfile_wfi_resume___ETC___d2276 ;
  assign WILL_FIRE_RL_rl_WFI_resume = CAN_FIRE_RL_rl_WFI_resume ;

  // rule RL_rl_reset_from_WFI
  assign CAN_FIRE_RL_rl_reset_from_WFI =
	     rg_state == 4'd8 && f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_reset_from_WFI = MUX_rg_state$write_1__SEL_3 ;

  // rule RL_rl_stage1_trap
  assign CAN_FIRE_RL_rl_stage1_trap =
	     NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d1959 &&
	     rg_state_7_EQ_3_280_OR_rg_state_7_EQ_2_961_AND_ETC___d2284 ;
  assign WILL_FIRE_RL_rl_stage1_trap = CAN_FIRE_RL_rl_stage1_trap ;

  // rule RL_rl_stage1_interrupt
  assign CAN_FIRE_RL_rl_stage1_interrupt =
	     NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d1959 &&
	     csr_regfile$interrupt_pending[4] &&
	     rg_state == 4'd2 &&
	     stage1_rg_full_00_AND_NOT_stage1_rg_stage_inpu_ETC___d2303 ;
  assign WILL_FIRE_RL_rl_stage1_interrupt = CAN_FIRE_RL_rl_stage1_interrupt ;

  // rule RL_imem_rl_assert_fail
  assign CAN_FIRE_RL_imem_rl_assert_fail = !near_mem$imem_is_i32_not_i16 ;
  assign WILL_FIRE_RL_imem_rl_assert_fail = CAN_FIRE_RL_imem_rl_assert_fail ;

  // rule RL_rl_pipe
  assign CAN_FIRE_RL_rl_pipe =
	     (IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d1958 ||
	      NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d1959) &&
	     rg_state_7_EQ_2_961_AND_stage3_rg_full_8_OR_NO_ETC___d1971 &&
	     (!rg_halt && !csr_regfile$interrupt_pending[4] ||
	      NOT_stage1_rg_full_00_72_OR_stage1_rg_stage_in_ETC___d1975 ||
	      IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 !=
	      2'd0 ||
	      stage3_rg_full) ;
  assign WILL_FIRE_RL_rl_pipe =
	     CAN_FIRE_RL_rl_pipe && !WILL_FIRE_RL_imem_rl_fetch_next_32b ;

  // rule RL_rl_stage1_SFENCE_VMA
  assign CAN_FIRE_RL_rl_stage1_SFENCE_VMA =
	     rg_state_7_EQ_2_961_AND_NOT_rg_halt_939_940_AN_ETC___d2186 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 ==
	     4'd7 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788) ;
  assign WILL_FIRE_RL_rl_stage1_SFENCE_VMA = MUX_rg_state$write_1__SEL_8 ;

  // rule RL_rl_reset_start
  assign CAN_FIRE_RL_rl_reset_start =
	     gpr_regfile_RDY_server_reset_request_put__886__ETC___d1904 &&
	     rg_state == 4'd0 ;
  assign WILL_FIRE_RL_rl_reset_start = CAN_FIRE_RL_rl_reset_start ;

  // rule RL_rl_relay_sw_interrupts
  assign CAN_FIRE_RL_rl_relay_sw_interrupts =
	     near_mem$RDY_get_sw_interrupt_req_get ;
  assign WILL_FIRE_RL_rl_relay_sw_interrupts =
	     near_mem$RDY_get_sw_interrupt_req_get ;

  // rule RL_rl_relay_timer_interrupts
  assign CAN_FIRE_RL_rl_relay_timer_interrupts =
	     near_mem$RDY_get_timer_interrupt_req_get ;
  assign WILL_FIRE_RL_rl_relay_timer_interrupts =
	     near_mem$RDY_get_timer_interrupt_req_get ;

  // rule RL_imem_rl_fetch_next_32b
  assign CAN_FIRE_RL_imem_rl_fetch_next_32b =
	     near_mem$imem_valid &&
	     near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 &&
	     imem_rg_pc[1:0] != 2'b0 &&
	     near_mem$imem_instr[17:16] == 2'b11 ;
  assign WILL_FIRE_RL_imem_rl_fetch_next_32b =
	     CAN_FIRE_RL_imem_rl_fetch_next_32b ;

  // rule RL_stage3_rl_reset
  assign CAN_FIRE_RL_stage3_rl_reset =
	     stage3_f_reset_reqs$EMPTY_N && stage3_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage3_rl_reset = CAN_FIRE_RL_stage3_rl_reset ;

  // rule RL_stage2_rl_reset
  assign CAN_FIRE_RL_stage2_rl_reset =
	     stage2_f_reset_reqs$EMPTY_N && stage2_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage2_rl_reset = CAN_FIRE_RL_stage2_rl_reset ;

  // rule RL_stage1_rl_reset
  assign CAN_FIRE_RL_stage1_rl_reset =
	     stage1_f_reset_reqs$EMPTY_N && stage1_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage1_rl_reset = CAN_FIRE_RL_stage1_rl_reset ;

  // rule RL_stageD_rl_reset
  assign CAN_FIRE_RL_stageD_rl_reset =
	     stageD_f_reset_reqs$EMPTY_N && stageD_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stageD_rl_reset = CAN_FIRE_RL_stageD_rl_reset ;

  // rule RL_stageF_rl_reset
  assign CAN_FIRE_RL_stageF_rl_reset =
	     stageF_f_reset_reqs$EMPTY_N && stageF_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stageF_rl_reset = CAN_FIRE_RL_stageF_rl_reset ;

  // inputs to muxes for submodule ports
  assign MUX_csr_regfile$mav_csr_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_W && csr_regfile$access_permitted_1 ;
  assign MUX_gpr_regfile$write_rd_1__SEL_2 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     csr_regfile$access_permitted_2 ;
  assign MUX_imem_rg_f3$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2131 ;
  assign MUX_imem_rg_f3$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_reset_complete ;
  assign MUX_imem_rg_mstatus_MXR$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_stage1_trap || WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_reset_complete ;
  assign MUX_imem_rg_pc$write_1__SEL_4 =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign MUX_imem_rg_pc$write_1__SEL_6 =
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;
  assign MUX_imem_rg_priv$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_complete ;
  assign MUX_near_mem$imem_req_1__SEL_7 =
	     WILL_FIRE_RL_rl_stage1_trap || WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign MUX_rg_epoch$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2131 &&
	     stage1_rg_full_00_AND_NOT_stage1_rg_stage_inpu_ETC___d2140 &&
	     !IF_IF_stage1_rg_stage_input_01_BITS_151_TO_145_ETC___d1355 ;
  assign MUX_rg_state$write_1__SEL_1 =
	     rg_state_7_EQ_2_961_AND_NOT_rg_halt_939_940_AN_ETC___d2186 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 ==
	     4'd3 ;
  assign MUX_rg_state$write_1__SEL_2 =
	     rg_state_7_EQ_2_961_AND_NOT_rg_halt_939_940_AN_ETC___d2186 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 ==
	     4'd4 ;
  assign MUX_rg_state$write_1__SEL_3 =
	     CAN_FIRE_RL_rl_reset_from_WFI && !WILL_FIRE_RL_rl_WFI_resume ;
  assign MUX_rg_state$write_1__SEL_5 =
	     WILL_FIRE_RL_rl_stage1_trap || WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_complete ;
  assign MUX_rg_state$write_1__SEL_6 =
	     near_mem$RDY_server_fence_i_request_put &&
	     rg_state_7_EQ_2_961_AND_NOT_rg_halt_939_940_AN_ETC___d2249 ;
  assign MUX_rg_state$write_1__SEL_7 =
	     near_mem$RDY_server_fence_request_put &&
	     rg_state_7_EQ_2_961_AND_NOT_rg_halt_939_940_AN_ETC___d2261 ;
  assign MUX_rg_state$write_1__SEL_8 =
	     CAN_FIRE_RL_rl_stage1_SFENCE_VMA &&
	     !WILL_FIRE_RL_imem_rl_fetch_next_32b ;
  assign MUX_rg_state$write_1__SEL_9 =
	     rg_state_7_EQ_2_961_AND_NOT_rg_halt_939_940_AN_ETC___d2186 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 ==
	     4'd11 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788) ;
  always@(stage1_rg_stage_input_BITS_263_TO_232__q28 or
	  csr_regfile$read_csr or
	  y__h26718 or
	  IF_csr_regfile_read_csr_IF_stage1_rg_full_00_T_ETC___d2220)
  begin
    case (stage1_rg_stage_input_BITS_263_TO_232__q28[14:12])
      3'b010, 3'b110:
	  MUX_csr_regfile$mav_csr_write_2__VAL_2 =
	      IF_csr_regfile_read_csr_IF_stage1_rg_full_00_T_ETC___d2220;
      default: MUX_csr_regfile$mav_csr_write_2__VAL_2 =
		   csr_regfile$read_csr[63:0] & y__h26718;
    endcase
  end
  assign MUX_near_mem$imem_req_2__VAL_1 = { next_pc__h24373[63:2], 2'b0 } ;
  assign MUX_near_mem$imem_req_2__VAL_2 = imem_rg_pc + 64'd2 ;
  assign MUX_near_mem$imem_req_2__VAL_3 = { pc_reset_value[63:2], 2'b0 } ;
  assign MUX_near_mem$imem_req_2__VAL_4 =
	     { x_out_next_pc__h7429[63:2], 2'b0 } ;
  assign MUX_near_mem$imem_req_2__VAL_5 =
	     { csr_regfile$csr_ret_actions[129:68], 2'b0 } ;
  assign MUX_near_mem$imem_req_2__VAL_6 = { rg_next_pc[63:2], 2'b0 } ;
  assign MUX_near_mem$imem_req_2__VAL_7 =
	     { csr_regfile$csr_trap_actions[193:132], 2'b0 } ;
  assign MUX_rg_state$write_1__VAL_1 =
	     csr_regfile$access_permitted_1 ? 4'd4 : 4'd3 ;
  assign MUX_rg_state$write_1__VAL_2 =
	     csr_regfile$access_permitted_2 ? 4'd4 : 4'd3 ;
  assign MUX_stage1_rg_full$write_1__VAL_2 =
	     IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2090 &&
	     stageD_rg_full ||
	     IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d1955 ;
  assign MUX_stage2_rg_full$write_1__VAL_2 =
	     NOT_rg_halt_939_940_AND_NOT_csr_regfile_interr_ETC___d1951 ?
	       IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 !=
	       4'd0 &&
	       IF_NOT_stage1_rg_full_00_72_OR_NOT_stage1_rg_s_ETC___d2019 :
	       IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 !=
	       2'd2 &&
	       IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 !=
	       2'd0 ;
  assign MUX_stageD_rg_full$write_1__VAL_2 =
	     IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2131 ||
	     IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d1955 &&
	     stageD_rg_full ;
  assign MUX_stageF_branch_predictor$predict_req_2__VAL_1 =
	     { stage1_rg_full_00_AND_NOT_stage1_rg_stage_inpu_ETC___d2140 &&
	       !IF_IF_stage1_rg_stage_input_01_BITS_151_TO_145_ETC___d1355,
	       stage1_rg_stage_input[400:337] } ;

  // register cfg_logdelay
  assign cfg_logdelay$D_IN = set_verbosity_logdelay ;
  assign cfg_logdelay$EN = EN_set_verbosity ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cfg_verbosity$EN = EN_set_verbosity ;

  // register imem_rg_f3
  assign imem_rg_f3$D_IN = 3'b010 ;
  assign imem_rg_f3$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2131 ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_reset_complete ;

  // register imem_rg_instr_15_0
  assign imem_rg_instr_15_0$D_IN = near_mem$imem_instr[31:16] ;
  assign imem_rg_instr_15_0$EN = CAN_FIRE_RL_imem_rl_fetch_next_32b ;

  // register imem_rg_mstatus_MXR
  assign imem_rg_mstatus_MXR$D_IN =
	     (MUX_imem_rg_f3$write_1__SEL_1 ||
	      MUX_imem_rg_mstatus_MXR$write_1__SEL_2) ?
	       csr_regfile$read_mstatus[19] :
	       csr_regfile$csr_trap_actions[85] ;
  assign imem_rg_mstatus_MXR$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2131 ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_interrupt ;

  // register imem_rg_pc
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  next_pc__h24373 or
	  WILL_FIRE_RL_rl_reset_complete or
	  pc_reset_value or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  x_out_next_pc__h7429 or
	  MUX_imem_rg_pc$write_1__SEL_4 or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or
	  MUX_imem_rg_pc$write_1__SEL_6 or rg_next_pc)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1: imem_rg_pc$D_IN = next_pc__h24373;
      WILL_FIRE_RL_rl_reset_complete: imem_rg_pc$D_IN = pc_reset_value;
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	  imem_rg_pc$D_IN = x_out_next_pc__h7429;
      MUX_imem_rg_pc$write_1__SEL_4:
	  imem_rg_pc$D_IN = csr_regfile$csr_trap_actions[193:130];
      WILL_FIRE_RL_rl_stage1_xRET:
	  imem_rg_pc$D_IN = csr_regfile$csr_ret_actions[129:66];
      MUX_imem_rg_pc$write_1__SEL_6: imem_rg_pc$D_IN = rg_next_pc;
      default: imem_rg_pc$D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign imem_rg_pc$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2131 ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;

  // register imem_rg_priv
  always@(WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or
	  MUX_imem_rg_pc$write_1__SEL_4 or
	  csr_regfile$csr_trap_actions or
	  MUX_imem_rg_f3$write_1__SEL_1 or
	  MUX_imem_rg_priv$write_1__SEL_2 or rg_cur_priv)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_stage1_xRET:
	  imem_rg_priv$D_IN = csr_regfile$csr_ret_actions[65:64];
      MUX_imem_rg_pc$write_1__SEL_4:
	  imem_rg_priv$D_IN = csr_regfile$csr_trap_actions[1:0];
      MUX_imem_rg_f3$write_1__SEL_1 || MUX_imem_rg_priv$write_1__SEL_2:
	  imem_rg_priv$D_IN = rg_cur_priv;
      default: imem_rg_priv$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign imem_rg_priv$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2131 ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_xRET ;

  // register imem_rg_satp
  assign imem_rg_satp$D_IN = csr_regfile$read_satp ;
  assign imem_rg_satp$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2131 ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_reset_complete ;

  // register imem_rg_sstatus_SUM
  assign imem_rg_sstatus_SUM$D_IN =
	     (MUX_imem_rg_f3$write_1__SEL_1 ||
	      MUX_imem_rg_mstatus_MXR$write_1__SEL_2) ?
	       csr_regfile$read_sstatus[18] :
	       csr_regfile$csr_trap_actions[84] ;
  assign imem_rg_sstatus_SUM$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2131 ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_interrupt ;

  // register rg_cur_priv
  always@(MUX_imem_rg_pc$write_1__SEL_4 or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or WILL_FIRE_RL_rl_reset_start)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_pc$write_1__SEL_4:
	  rg_cur_priv$D_IN = csr_regfile$csr_trap_actions[1:0];
      WILL_FIRE_RL_rl_stage1_xRET:
	  rg_cur_priv$D_IN = csr_regfile$csr_ret_actions[65:64];
      WILL_FIRE_RL_rl_reset_start: rg_cur_priv$D_IN = 2'b11;
      default: rg_cur_priv$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign rg_cur_priv$EN =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_epoch
  always@(MUX_rg_epoch$write_1__SEL_1 or
	  v__h20777 or
	  MUX_imem_rg_f3$write_1__SEL_2 or WILL_FIRE_RL_rl_reset_start)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_epoch$write_1__SEL_1: rg_epoch$D_IN = v__h20777;
      MUX_imem_rg_f3$write_1__SEL_2: rg_epoch$D_IN = v__h20777;
      WILL_FIRE_RL_rl_reset_start: rg_epoch$D_IN = 1'd0;
      default: rg_epoch$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_epoch$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2131 &&
	     stage1_rg_full_00_AND_NOT_stage1_rg_stage_inpu_ETC___d2140 &&
	     !IF_IF_stage1_rg_stage_input_01_BITS_151_TO_145_ETC___d1355 ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_halt
  assign rg_halt$D_IN = 1'd0 ;
  assign rg_halt$EN = CAN_FIRE_RL_rl_reset_start ;

  // register rg_next_pc
  assign rg_next_pc$D_IN = x_out_next_pc__h7429 ;
  assign rg_next_pc$EN =
	     WILL_FIRE_RL_rl_stage1_WFI || WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ;

  // register rg_start_CPI_cycles
  assign rg_start_CPI_cycles$D_IN = csr_regfile$read_csr_mcycle ;
  assign rg_start_CPI_cycles$EN = CAN_FIRE_RL_rl_reset_complete ;

  // register rg_start_CPI_instrs
  assign rg_start_CPI_instrs$D_IN = csr_regfile$read_csr_minstret ;
  assign rg_start_CPI_instrs$EN = CAN_FIRE_RL_rl_reset_complete ;

  // register rg_state
  always@(WILL_FIRE_RL_rl_stage1_CSRR_W or
	  MUX_rg_state$write_1__VAL_1 or
	  WILL_FIRE_RL_rl_stage1_CSRR_S_or_C or
	  MUX_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_reset_from_WFI or
	  WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_state$write_1__SEL_5 or
	  WILL_FIRE_RL_rl_stage1_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_FENCE or
	  WILL_FIRE_RL_rl_stage1_SFENCE_VMA or WILL_FIRE_RL_rl_stage1_WFI)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_stage1_CSRR_W:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_1;
      WILL_FIRE_RL_rl_stage1_CSRR_S_or_C:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_2;
      WILL_FIRE_RL_rl_reset_from_WFI: rg_state$D_IN = 4'd0;
      WILL_FIRE_RL_rl_reset_start: rg_state$D_IN = 4'd1;
      MUX_rg_state$write_1__SEL_5: rg_state$D_IN = 4'd2;
      WILL_FIRE_RL_rl_stage1_FENCE_I: rg_state$D_IN = 4'd5;
      WILL_FIRE_RL_rl_stage1_FENCE: rg_state$D_IN = 4'd6;
      WILL_FIRE_RL_rl_stage1_SFENCE_VMA: rg_state$D_IN = 4'd7;
      WILL_FIRE_RL_rl_stage1_WFI: rg_state$D_IN = 4'd8;
      default: rg_state$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_reset_from_WFI ||
	     WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_stage1_WFI ;

  // register stage1_rg_full
  always@(WILL_FIRE_RL_stage1_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage1_rg_full$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_stage1_interrupt or
	  WILL_FIRE_RL_rl_stage1_trap or
	  WILL_FIRE_RL_rl_WFI_resume or
	  WILL_FIRE_RL_rl_finish_SFENCE_VMA or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_stage2_nonpipe or WILL_FIRE_RL_rl_reset_complete)
  case (1'b1)
    WILL_FIRE_RL_stage1_rl_reset: stage1_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage1_rg_full$D_IN = MUX_stage1_rg_full$write_1__VAL_2;
    WILL_FIRE_RL_rl_stage1_interrupt || WILL_FIRE_RL_rl_stage1_trap ||
    WILL_FIRE_RL_rl_WFI_resume ||
    WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
    WILL_FIRE_RL_rl_finish_FENCE ||
    WILL_FIRE_RL_rl_finish_FENCE_I ||
    WILL_FIRE_RL_rl_stage1_xRET ||
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
    WILL_FIRE_RL_rl_stage2_nonpipe ||
    WILL_FIRE_RL_rl_reset_complete:
	stage1_rg_full$D_IN = 1'd0;
    default: stage1_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage1_rg_full$EN =
	     WILL_FIRE_RL_rl_pipe || WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_stage1_rl_reset ||
	     WILL_FIRE_RL_rl_reset_complete ;

  // register stage1_rg_stage_input
  assign stage1_rg_stage_input$D_IN =
	     { stageD_rg_data[232:169],
	       stageD_rg_data[167:166],
	       stageD_rg_data[168],
	       stageD_rg_data[165:96],
	       _theResult____h4353,
	       stageD_rg_data[79:0],
	       _theResult____h4353[6:0],
	       _theResult____h4353[11:7],
	       _theResult____h4353[19:15],
	       _theResult____h4353[24:20],
	       _theResult____h4353[31:27],
	       _theResult____h4353[31:20],
	       _theResult____h4353[14:12],
	       _theResult____h4353[31:27],
	       _theResult____h4353[31:25],
	       decoded_instr_funct10__h23254,
	       _theResult____h4353[31:20],
	       decoded_instr_imm12_S__h23256,
	       decoded_instr_imm13_SB__h23257,
	       _theResult____h4353[31:12],
	       decoded_instr_imm21_UJ__h23259,
	       _theResult____h4353[27:20],
	       _theResult____h4353[26:25] } ;
  assign stage1_rg_stage_input$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2090 &&
	     stageD_rg_full ;

  // register stage2_rg_full
  always@(WILL_FIRE_RL_stage2_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage2_rg_full$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_stage2_nonpipe or WILL_FIRE_RL_rl_reset_complete)
  case (1'b1)
    WILL_FIRE_RL_stage2_rl_reset: stage2_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage2_rg_full$D_IN = MUX_stage2_rg_full$write_1__VAL_2;
    WILL_FIRE_RL_rl_stage2_nonpipe || WILL_FIRE_RL_rl_reset_complete:
	stage2_rg_full$D_IN = 1'd0;
    default: stage2_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage2_rg_full$EN =
	     WILL_FIRE_RL_rl_pipe || WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_stage2_rl_reset ||
	     WILL_FIRE_RL_rl_reset_complete ;

  // register stage2_rg_stage2
  assign stage2_rg_stage2$D_IN =
	     { rg_cur_priv,
	       stage1_rg_stage_input[400:337],
	       stage1_rg_stage_input[263:232],
	       IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d1037,
	       x_out_data_to_stage2_rd__h7478,
	       x_out_data_to_stage2_addr__h7479,
	       x_out_data_to_stage2_val1__h7480,
	       x_out_data_to_stage2_val2__h7481,
	       x_out_data_to_stage2_val3__h7482,
	       stage1_rg_stage_input[151:145] == 7'b0000111 ||
	       (stage1_rg_stage_input[151:145] == 7'b1010011 ||
		stage1_rg_stage_input[151:145] == 7'b1000011 ||
		stage1_rg_stage_input[151:145] == 7'b1000111 ||
		stage1_rg_stage_input[151:145] == 7'b1001011 ||
		stage1_rg_stage_input[151:145] == 7'b1001111) &&
	       (stage1_rg_stage_input[104:98] != 7'h61 ||
		stage1_rg_stage_input[134:130] != 5'd0) &&
	       (stage1_rg_stage_input[104:98] != 7'h61 ||
		stage1_rg_stage_input[134:130] != 5'd1) &&
	       (stage1_rg_stage_input[104:98] != 7'h61 ||
		stage1_rg_stage_input[134:130] != 5'd2) &&
	       (stage1_rg_stage_input[104:98] != 7'h61 ||
		stage1_rg_stage_input[134:130] != 5'd3) &&
	       stage1_rg_stage_input[104:98] != 7'h71 &&
	       stage1_rg_stage_input[104:98] != 7'h51 &&
	       (stage1_rg_stage_input[104:98] != 7'h60 ||
		stage1_rg_stage_input[134:130] != 5'd2) &&
	       (stage1_rg_stage_input[104:98] != 7'h60 ||
		stage1_rg_stage_input[134:130] != 5'd3) &&
	       (stage1_rg_stage_input[104:98] != 7'h60 ||
		stage1_rg_stage_input[134:130] != 5'd0) &&
	       (stage1_rg_stage_input[104:98] != 7'h60 ||
		stage1_rg_stage_input[134:130] != 5'd1) &&
	       stage1_rg_stage_input[104:98] != 7'h70 &&
	       stage1_rg_stage_input[104:98] != 7'h50,
	       x_out_data_to_stage2_rounding_mode__h7484 } ;
  assign stage2_rg_stage2$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_939_940_AND_NOT_csr_regfile_interr_ETC___d1951 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 !=
	     4'd0 &&
	     IF_NOT_stage1_rg_full_00_72_OR_NOT_stage1_rg_s_ETC___d2019 ;

  // register stage3_rg_full
  always@(WILL_FIRE_RL_stage3_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 or
	  WILL_FIRE_RL_rl_reset_complete)
  case (1'b1)
    WILL_FIRE_RL_stage3_rl_reset: stage3_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage3_rg_full$D_IN =
	    IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd2;
    WILL_FIRE_RL_rl_reset_complete: stage3_rg_full$D_IN = 1'd0;
    default: stage3_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage3_rg_full$EN =
	     WILL_FIRE_RL_rl_pipe || WILL_FIRE_RL_stage3_rl_reset ||
	     WILL_FIRE_RL_rl_reset_complete ;

  // register stage3_rg_stage3
  assign stage3_rg_stage3$D_IN =
	     { stage2_rg_stage2[363:268],
	       stage2_rg_stage2[365:364],
	       stage2_rg_stage2[267:265] == 3'd0 ||
	       IF_stage2_rg_stage2_04_BITS_267_TO_265_05_EQ_1_ETC___d165,
	       x_out_data_to_stage3_rd__h6488,
	       stage2_rg_stage2[267:265] != 3'd0 &&
	       stage2_rg_stage2[267:265] != 3'd1 &&
	       stage2_rg_stage2[267:265] != 3'd4 &&
	       stage2_rg_stage2[267:265] != 3'd2 &&
	       stage2_rg_stage2[267:265] != 3'd3,
	       stage2_rg_stage2[267:265] != 3'd0 &&
	       CASE_stage2_rg_stage2_BITS_267_TO_265_1_stage2_ETC__q29,
	       x_out_data_to_stage3_fpr_flags__h6491,
	       x_out_data_to_stage3_rd_val__h6492 } ;
  assign stage3_rg_stage3$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 ==
	     2'd2 ;

  // register stageD_rg_data
  assign stageD_rg_data$D_IN =
	     { imem_rg_pc,
	       stageF_rg_epoch,
	       stageF_rg_priv,
	       near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1786,
	       near_mem$imem_exc,
	       near_mem$imem_exc_code,
	       near_mem$imem_pc,
	       d_instr__h19473,
	       stageF_branch_predictor$predict_rsp } ;
  assign stageD_rg_data$EN = MUX_imem_rg_f3$write_1__SEL_1 ;

  // register stageD_rg_full
  always@(WILL_FIRE_RL_stageD_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stageD_rg_full$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_stage1_interrupt or
	  WILL_FIRE_RL_rl_stage1_trap or
	  WILL_FIRE_RL_rl_WFI_resume or
	  WILL_FIRE_RL_rl_finish_SFENCE_VMA or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_stage2_nonpipe or WILL_FIRE_RL_rl_reset_complete)
  case (1'b1)
    WILL_FIRE_RL_stageD_rl_reset: stageD_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stageD_rg_full$D_IN = MUX_stageD_rg_full$write_1__VAL_2;
    WILL_FIRE_RL_rl_stage1_interrupt || WILL_FIRE_RL_rl_stage1_trap ||
    WILL_FIRE_RL_rl_WFI_resume ||
    WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
    WILL_FIRE_RL_rl_finish_FENCE ||
    WILL_FIRE_RL_rl_finish_FENCE_I ||
    WILL_FIRE_RL_rl_stage1_xRET ||
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
    WILL_FIRE_RL_rl_stage2_nonpipe ||
    WILL_FIRE_RL_rl_reset_complete:
	stageD_rg_full$D_IN = 1'd0;
    default: stageD_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stageD_rg_full$EN =
	     WILL_FIRE_RL_rl_pipe || WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_stageD_rl_reset ||
	     WILL_FIRE_RL_rl_reset_complete ;

  // register stageF_rg_epoch
  always@(WILL_FIRE_RL_stageF_rl_reset or
	  MUX_imem_rg_f3$write_1__SEL_1 or
	  epoch__h24371 or
	  WILL_FIRE_RL_rl_stage1_interrupt or
	  v__h20777 or
	  WILL_FIRE_RL_rl_stage1_trap or
	  WILL_FIRE_RL_rl_WFI_resume or
	  WILL_FIRE_RL_rl_finish_SFENCE_VMA or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_stage2_nonpipe or WILL_FIRE_RL_rl_reset_complete)
  case (1'b1)
    WILL_FIRE_RL_stageF_rl_reset: stageF_rg_epoch$D_IN = 1'd0;
    MUX_imem_rg_f3$write_1__SEL_1: stageF_rg_epoch$D_IN = epoch__h24371;
    WILL_FIRE_RL_rl_stage1_interrupt: stageF_rg_epoch$D_IN = v__h20777;
    WILL_FIRE_RL_rl_stage1_trap: stageF_rg_epoch$D_IN = v__h20777;
    WILL_FIRE_RL_rl_WFI_resume: stageF_rg_epoch$D_IN = v__h20777;
    WILL_FIRE_RL_rl_finish_SFENCE_VMA: stageF_rg_epoch$D_IN = v__h20777;
    WILL_FIRE_RL_rl_finish_FENCE: stageF_rg_epoch$D_IN = v__h20777;
    WILL_FIRE_RL_rl_finish_FENCE_I: stageF_rg_epoch$D_IN = v__h20777;
    WILL_FIRE_RL_rl_stage1_xRET: stageF_rg_epoch$D_IN = v__h20777;
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	stageF_rg_epoch$D_IN = v__h20777;
    WILL_FIRE_RL_rl_stage2_nonpipe: stageF_rg_epoch$D_IN = v__h20777;
    WILL_FIRE_RL_rl_reset_complete: stageF_rg_epoch$D_IN = v__h20777;
    default: stageF_rg_epoch$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stageF_rg_epoch$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2131 ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_stageF_rl_reset ;

  // register stageF_rg_full
  always@(WILL_FIRE_RL_stageF_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  stageF_rg_full or
	  WILL_FIRE_RL_rl_stage1_interrupt or
	  WILL_FIRE_RL_rl_stage1_trap or
	  WILL_FIRE_RL_rl_WFI_resume or
	  WILL_FIRE_RL_rl_finish_SFENCE_VMA or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_stage2_nonpipe or WILL_FIRE_RL_rl_reset_complete)
  case (1'b1)
    WILL_FIRE_RL_stageF_rl_reset: stageF_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe: stageF_rg_full$D_IN = stageF_rg_full;
    WILL_FIRE_RL_rl_stage1_interrupt || WILL_FIRE_RL_rl_stage1_trap ||
    WILL_FIRE_RL_rl_WFI_resume ||
    WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
    WILL_FIRE_RL_rl_finish_FENCE ||
    WILL_FIRE_RL_rl_finish_FENCE_I ||
    WILL_FIRE_RL_rl_stage1_xRET ||
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
    WILL_FIRE_RL_rl_stage2_nonpipe ||
    WILL_FIRE_RL_rl_reset_complete:
	stageF_rg_full$D_IN = 1'd1;
    default: stageF_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stageF_rg_full$EN =
	     WILL_FIRE_RL_rl_pipe || WILL_FIRE_RL_stageF_rl_reset ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_reset_complete ;

  // register stageF_rg_priv
  always@(WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or
	  MUX_imem_rg_pc$write_1__SEL_4 or
	  csr_regfile$csr_trap_actions or
	  MUX_imem_rg_f3$write_1__SEL_1 or
	  MUX_imem_rg_priv$write_1__SEL_2 or rg_cur_priv)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_stage1_xRET:
	  stageF_rg_priv$D_IN = csr_regfile$csr_ret_actions[65:64];
      MUX_imem_rg_pc$write_1__SEL_4:
	  stageF_rg_priv$D_IN = csr_regfile$csr_trap_actions[1:0];
      MUX_imem_rg_f3$write_1__SEL_1 || MUX_imem_rg_priv$write_1__SEL_2:
	  stageF_rg_priv$D_IN = rg_cur_priv;
      default: stageF_rg_priv$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign stageF_rg_priv$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2131 ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_xRET ;

  // submodule csr_regfile
  assign csr_regfile$access_permitted_1_csr_addr =
	     stage1_rg_stage_input_BITS_263_TO_232__q28[31:20] ;
  assign csr_regfile$access_permitted_1_priv = rg_cur_priv ;
  assign csr_regfile$access_permitted_1_read_not_write = 1'd0 ;
  assign csr_regfile$access_permitted_2_csr_addr =
	     stage1_rg_stage_input_BITS_263_TO_232__q28[31:20] ;
  assign csr_regfile$access_permitted_2_priv = rg_cur_priv ;
  assign csr_regfile$access_permitted_2_read_not_write =
	     rs1_val__h26414 == 64'd0 ;
  assign csr_regfile$csr_counter_read_fault_csr_addr = 12'h0 ;
  assign csr_regfile$csr_counter_read_fault_priv = 2'h0 ;
  always@(IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943)
  begin
    case (IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943)
      4'd8: csr_regfile$csr_ret_actions_from_priv = 2'b11;
      4'd9: csr_regfile$csr_ret_actions_from_priv = 2'b01;
      default: csr_regfile$csr_ret_actions_from_priv = 2'b0;
    endcase
  end
  always@(WILL_FIRE_RL_rl_stage1_interrupt or
	  csr_regfile$interrupt_pending or
	  WILL_FIRE_RL_rl_stage2_nonpipe or
	  x_out_trap_info_exc_code__h6771 or
	  WILL_FIRE_RL_rl_stage1_trap or x_out_trap_info_exc_code__h10686)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_stage1_interrupt:
	  csr_regfile$csr_trap_actions_exc_code =
	      csr_regfile$interrupt_pending[3:0];
      WILL_FIRE_RL_rl_stage2_nonpipe:
	  csr_regfile$csr_trap_actions_exc_code =
	      x_out_trap_info_exc_code__h6771;
      WILL_FIRE_RL_rl_stage1_trap:
	  csr_regfile$csr_trap_actions_exc_code =
	      x_out_trap_info_exc_code__h10686;
      default: csr_regfile$csr_trap_actions_exc_code =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign csr_regfile$csr_trap_actions_from_priv = rg_cur_priv ;
  assign csr_regfile$csr_trap_actions_interrupt =
	     !WILL_FIRE_RL_rl_stage2_nonpipe && !WILL_FIRE_RL_rl_stage1_trap ;
  assign csr_regfile$csr_trap_actions_pc =
	     (WILL_FIRE_RL_rl_stage1_interrupt ||
	      WILL_FIRE_RL_rl_stage1_trap) ?
	       stage1_rg_stage_input[400:337] :
	       value__h6734 ;
  always@(WILL_FIRE_RL_rl_stage1_interrupt or
	  WILL_FIRE_RL_rl_stage2_nonpipe or
	  value__h6795 or WILL_FIRE_RL_rl_stage1_trap or value__h10732)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_stage1_interrupt:
	  csr_regfile$csr_trap_actions_xtval = 64'd0;
      WILL_FIRE_RL_rl_stage2_nonpipe:
	  csr_regfile$csr_trap_actions_xtval = value__h6795;
      WILL_FIRE_RL_rl_stage1_trap:
	  csr_regfile$csr_trap_actions_xtval = value__h10732;
      default: csr_regfile$csr_trap_actions_xtval =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign csr_regfile$external_interrupt_req_set_not_clear =
	     external_interrupt_req_set_not_clear ;
  assign csr_regfile$interrupt_pending_cur_priv = rg_cur_priv ;
  assign csr_regfile$mav_csr_write_csr_addr =
	     stage1_rg_stage_input_BITS_263_TO_232__q28[31:20] ;
  assign csr_regfile$mav_csr_write_word =
	     MUX_csr_regfile$mav_csr_write_1__SEL_1 ?
	       rs1_val__h25921 :
	       MUX_csr_regfile$mav_csr_write_2__VAL_2 ;
  assign csr_regfile$mav_read_csr_csr_addr = 12'h0 ;
  assign csr_regfile$read_csr_csr_addr =
	     stage1_rg_stage_input_BITS_263_TO_232__q28[31:20] ;
  assign csr_regfile$read_csr_port2_csr_addr = 12'h0 ;
  assign csr_regfile$software_interrupt_req_set_not_clear =
	     near_mem$get_sw_interrupt_req_get ;
  assign csr_regfile$timer_interrupt_req_set_not_clear =
	     near_mem$get_timer_interrupt_req_get ;
  assign csr_regfile$update_fcsr_fflags_flags = stage3_rg_stage3[68:64] ;
  assign csr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign csr_regfile$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_reset_complete ;
  assign csr_regfile$EN_mav_read_csr = 1'b0 ;
  assign csr_regfile$EN_mav_csr_write =
	     WILL_FIRE_RL_rl_stage1_CSRR_W &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     csr_regfile$access_permitted_2 &&
	     stage1_rg_stage_input_BITS_263_TO_232__q28[19:15] != 5'd0 ;
  assign csr_regfile$EN_update_fcsr_fflags =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[76] &&
	     stage3_rg_stage3[70] ;
  assign csr_regfile$EN_csr_trap_actions =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_trap ;
  assign csr_regfile$EN_csr_ret_actions = CAN_FIRE_RL_rl_stage1_xRET ;
  assign csr_regfile$EN_csr_minstret_incr =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 ==
	     2'd2 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ;
  assign csr_regfile$EN_timer_interrupt_req =
	     near_mem$RDY_get_timer_interrupt_req_get ;
  assign csr_regfile$EN_software_interrupt_req =
	     near_mem$RDY_get_sw_interrupt_req_get ;
  assign csr_regfile$EN_debug = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$ENQ = EN_hart0_server_reset_request_put ;
  assign f_reset_reqs$DEQ =
	     gpr_regfile_RDY_server_reset_request_put__886__ETC___d1904 &&
	     rg_state == 4'd0 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$ENQ =
	     NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d1930 &&
	     rg_state == 4'd1 ;
  assign f_reset_rsps$DEQ = EN_hart0_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule fpr_regfile
  assign fpr_regfile$read_rs1_port2_rs1 = 5'h0 ;
  assign fpr_regfile$read_rs1_rs1 = stage1_rg_stage_input[139:135] ;
  assign fpr_regfile$read_rs2_rs2 = stage1_rg_stage_input[134:130] ;
  assign fpr_regfile$read_rs3_rs3 = stage1_rg_stage_input[129:125] ;
  assign fpr_regfile$write_rd_rd = stage3_rg_stage3[75:71] ;
  assign fpr_regfile$write_rd_rd_val = stage3_rg_stage3[63:0] ;
  assign fpr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign fpr_regfile$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_reset_complete ;
  assign fpr_regfile$EN_write_rd =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[76] &&
	     stage3_rg_stage3[69] ;

  // submodule gpr_regfile
  assign gpr_regfile$read_rs1_port2_rs1 = 5'h0 ;
  assign gpr_regfile$read_rs1_rs1 = stage1_rg_stage_input[139:135] ;
  assign gpr_regfile$read_rs2_rs2 = stage1_rg_stage_input[134:130] ;
  assign gpr_regfile$write_rd_rd =
	     (MUX_csr_regfile$mav_csr_write_1__SEL_1 ||
	      MUX_gpr_regfile$write_rd_1__SEL_2) ?
	       stage1_rg_stage_input_BITS_263_TO_232__q28[11:7] :
	       stage3_rg_stage3[75:71] ;
  assign gpr_regfile$write_rd_rd_val =
	     (MUX_csr_regfile$mav_csr_write_1__SEL_1 ||
	      MUX_gpr_regfile$write_rd_1__SEL_2) ?
	       csr_regfile$read_csr[63:0] :
	       stage3_rg_stage3[63:0] ;
  assign gpr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign gpr_regfile$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_reset_complete ;
  assign gpr_regfile$EN_write_rd =
	     WILL_FIRE_RL_rl_stage1_CSRR_W &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[76] &&
	     !stage3_rg_stage3[69] ;

  // submodule near_mem
  assign near_mem$dmem_master_arready = dmem_master_arready ;
  assign near_mem$dmem_master_awready = dmem_master_awready ;
  assign near_mem$dmem_master_bresp = dmem_master_bresp ;
  assign near_mem$dmem_master_bvalid = dmem_master_bvalid ;
  assign near_mem$dmem_master_rdata = dmem_master_rdata ;
  assign near_mem$dmem_master_rresp = dmem_master_rresp ;
  assign near_mem$dmem_master_rvalid = dmem_master_rvalid ;
  assign near_mem$dmem_master_wready = dmem_master_wready ;
  assign near_mem$dmem_req_addr = x_out_data_to_stage2_addr__h7479 ;
  assign near_mem$dmem_req_amo_funct7 =
	     x_out_data_to_stage2_val1__h7480[6:0] ;
  assign near_mem$dmem_req_f3 =
	     stage1_rg_stage_input_BITS_263_TO_232__q28[14:12] ;
  assign near_mem$dmem_req_mstatus_MXR = csr_regfile$read_mstatus[19] ;
  always@(IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d1037)
  begin
    case (IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d1037)
      3'd1: near_mem$dmem_req_op = 2'd0;
      3'd2: near_mem$dmem_req_op = 2'd1;
      default: near_mem$dmem_req_op = 2'd2;
    endcase
  end
  assign near_mem$dmem_req_priv =
	     csr_regfile$read_mstatus[17] ?
	       csr_regfile$read_mstatus[12:11] :
	       rg_cur_priv ;
  assign near_mem$dmem_req_satp = csr_regfile$read_satp ;
  assign near_mem$dmem_req_sstatus_SUM = csr_regfile$read_sstatus[18] ;
  assign near_mem$dmem_req_store_value = x_out_data_to_stage2_val2__h7481 ;
  assign near_mem$imem_master_arready = imem_master_arready ;
  assign near_mem$imem_master_awready = imem_master_awready ;
  assign near_mem$imem_master_bresp = imem_master_bresp ;
  assign near_mem$imem_master_bvalid = imem_master_bvalid ;
  assign near_mem$imem_master_rdata = imem_master_rdata ;
  assign near_mem$imem_master_rresp = imem_master_rresp ;
  assign near_mem$imem_master_rvalid = imem_master_rvalid ;
  assign near_mem$imem_master_wready = imem_master_wready ;
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  MUX_near_mem$imem_req_2__VAL_1 or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or
	  MUX_near_mem$imem_req_2__VAL_2 or
	  WILL_FIRE_RL_rl_reset_complete or
	  MUX_near_mem$imem_req_2__VAL_3 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  MUX_near_mem$imem_req_2__VAL_4 or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  MUX_near_mem$imem_req_2__VAL_5 or
	  MUX_imem_rg_pc$write_1__SEL_6 or
	  MUX_near_mem$imem_req_2__VAL_6 or
	  MUX_near_mem$imem_req_1__SEL_7 or
	  MUX_near_mem$imem_req_2__VAL_7 or WILL_FIRE_RL_rl_stage1_interrupt)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_1;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_2;
      WILL_FIRE_RL_rl_reset_complete:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_3;
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_4;
      WILL_FIRE_RL_rl_stage1_xRET:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_5;
      MUX_imem_rg_pc$write_1__SEL_6:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_6;
      MUX_near_mem$imem_req_1__SEL_7:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_7;
      WILL_FIRE_RL_rl_stage1_interrupt:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_7;
      default: near_mem$imem_req_addr =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign near_mem$imem_req_f3 =
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ? imem_rg_f3 : 3'b010 ;
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_reset_complete or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  MUX_imem_rg_pc$write_1__SEL_6 or
	  MUX_near_mem$imem_req_1__SEL_7 or
	  csr_regfile$read_mstatus or
	  WILL_FIRE_RL_rl_stage1_interrupt or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or imem_rg_mstatus_MXR)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1 || WILL_FIRE_RL_rl_reset_complete ||
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
      WILL_FIRE_RL_rl_stage1_xRET ||
      MUX_imem_rg_pc$write_1__SEL_6 ||
      MUX_near_mem$imem_req_1__SEL_7:
	  near_mem$imem_req_mstatus_MXR = csr_regfile$read_mstatus[19];
      WILL_FIRE_RL_rl_stage1_interrupt:
	  near_mem$imem_req_mstatus_MXR = csr_regfile$csr_trap_actions[85];
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  near_mem$imem_req_mstatus_MXR = imem_rg_mstatus_MXR;
      default: near_mem$imem_req_mstatus_MXR = 1'b0 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or
	  MUX_near_mem$imem_req_1__SEL_7 or
	  WILL_FIRE_RL_rl_stage1_interrupt or
	  csr_regfile$csr_trap_actions or
	  MUX_imem_rg_f3$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_reset_complete or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  MUX_imem_rg_pc$write_1__SEL_6 or
	  rg_cur_priv or WILL_FIRE_RL_imem_rl_fetch_next_32b or imem_rg_priv)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_stage1_xRET:
	  near_mem$imem_req_priv = csr_regfile$csr_ret_actions[65:64];
      MUX_near_mem$imem_req_1__SEL_7 || WILL_FIRE_RL_rl_stage1_interrupt:
	  near_mem$imem_req_priv = csr_regfile$csr_trap_actions[1:0];
      MUX_imem_rg_f3$write_1__SEL_1 || WILL_FIRE_RL_rl_reset_complete ||
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
      MUX_imem_rg_pc$write_1__SEL_6:
	  near_mem$imem_req_priv = rg_cur_priv;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  near_mem$imem_req_priv = imem_rg_priv;
      default: near_mem$imem_req_priv = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign near_mem$imem_req_satp =
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ?
	       imem_rg_satp :
	       csr_regfile$read_satp ;
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_reset_complete or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  MUX_imem_rg_pc$write_1__SEL_6 or
	  MUX_near_mem$imem_req_1__SEL_7 or
	  csr_regfile$read_sstatus or
	  WILL_FIRE_RL_rl_stage1_interrupt or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or imem_rg_sstatus_SUM)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1 || WILL_FIRE_RL_rl_reset_complete ||
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
      WILL_FIRE_RL_rl_stage1_xRET ||
      MUX_imem_rg_pc$write_1__SEL_6 ||
      MUX_near_mem$imem_req_1__SEL_7:
	  near_mem$imem_req_sstatus_SUM = csr_regfile$read_sstatus[18];
      WILL_FIRE_RL_rl_stage1_interrupt:
	  near_mem$imem_req_sstatus_SUM = csr_regfile$csr_trap_actions[84];
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  near_mem$imem_req_sstatus_SUM = imem_rg_sstatus_SUM;
      default: near_mem$imem_req_sstatus_SUM = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign near_mem$near_mem_slave_araddr = near_mem_slave_araddr ;
  assign near_mem$near_mem_slave_arprot = near_mem_slave_arprot ;
  assign near_mem$near_mem_slave_arvalid = near_mem_slave_arvalid ;
  assign near_mem$near_mem_slave_awaddr = near_mem_slave_awaddr ;
  assign near_mem$near_mem_slave_awprot = near_mem_slave_awprot ;
  assign near_mem$near_mem_slave_awvalid = near_mem_slave_awvalid ;
  assign near_mem$near_mem_slave_bready = near_mem_slave_bready ;
  assign near_mem$near_mem_slave_rready = near_mem_slave_rready ;
  assign near_mem$near_mem_slave_wdata = near_mem_slave_wdata ;
  assign near_mem$near_mem_slave_wstrb = near_mem_slave_wstrb ;
  assign near_mem$near_mem_slave_wvalid = near_mem_slave_wvalid ;
  assign near_mem$server_fence_request_put =
	     8'b10101010 /* unspecified value */  ;
  assign near_mem$EN_server_reset_request_put = CAN_FIRE_RL_rl_reset_start ;
  assign near_mem$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_reset_complete ;
  assign near_mem$EN_imem_req =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2131 ||
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_interrupt ;
  assign near_mem$EN_dmem_req =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_939_940_AND_NOT_csr_regfile_interr_ETC___d1951 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 !=
	     4'd0 &&
	     IF_NOT_stage1_rg_full_00_72_OR_NOT_stage1_rg_s_ETC___d2019 &&
	     (IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d1037 ==
	      3'd1 ||
	      IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d1037 ==
	      3'd2 ||
	      IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d1037 ==
	      3'd4) ;
  assign near_mem$EN_server_fence_i_request_put =
	     MUX_rg_state$write_1__SEL_6 ;
  assign near_mem$EN_server_fence_i_response_get =
	     CAN_FIRE_RL_rl_finish_FENCE_I ;
  assign near_mem$EN_server_fence_request_put = MUX_rg_state$write_1__SEL_7 ;
  assign near_mem$EN_server_fence_response_get = CAN_FIRE_RL_rl_finish_FENCE ;
  assign near_mem$EN_sfence_vma = MUX_rg_state$write_1__SEL_8 ;
  assign near_mem$EN_get_timer_interrupt_req_get =
	     near_mem$RDY_get_timer_interrupt_req_get ;
  assign near_mem$EN_get_sw_interrupt_req_get =
	     near_mem$RDY_get_sw_interrupt_req_get ;

  // submodule stage1_f_reset_reqs
  assign stage1_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage1_f_reset_reqs$DEQ = CAN_FIRE_RL_stage1_rl_reset ;
  assign stage1_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage1_f_reset_rsps
  assign stage1_f_reset_rsps$ENQ = CAN_FIRE_RL_stage1_rl_reset ;
  assign stage1_f_reset_rsps$DEQ = CAN_FIRE_RL_rl_reset_complete ;
  assign stage1_f_reset_rsps$CLR = 1'b0 ;

  // submodule stage2_f_reset_reqs
  assign stage2_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage2_f_reset_reqs$DEQ = CAN_FIRE_RL_stage2_rl_reset ;
  assign stage2_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage2_f_reset_rsps
  assign stage2_f_reset_rsps$ENQ = CAN_FIRE_RL_stage2_rl_reset ;
  assign stage2_f_reset_rsps$DEQ = CAN_FIRE_RL_rl_reset_complete ;
  assign stage2_f_reset_rsps$CLR = 1'b0 ;

  // submodule stage2_fbox
  assign stage2_fbox$req_f7 =
	     stage1_rg_stage_input_BITS_263_TO_232__q28[31:25] ;
  assign stage2_fbox$req_opcode =
	     stage1_rg_stage_input_BITS_263_TO_232__q28[6:0] ;
  assign stage2_fbox$req_rm = x_out_data_to_stage2_rounding_mode__h7484 ;
  assign stage2_fbox$req_rs2 =
	     stage1_rg_stage_input_BITS_263_TO_232__q28[24:20] ;
  assign stage2_fbox$req_v1 = x_out_data_to_stage2_val1__h7480 ;
  assign stage2_fbox$req_v2 = x_out_data_to_stage2_val2__h7481 ;
  assign stage2_fbox$req_v3 = x_out_data_to_stage2_val3__h7482 ;
  assign stage2_fbox$set_verbosity_verbosity = 4'h0 ;
  assign stage2_fbox$EN_set_verbosity = 1'b0 ;
  assign stage2_fbox$EN_req =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_939_940_AND_NOT_csr_regfile_interr_ETC___d1951 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 !=
	     4'd0 &&
	     IF_NOT_stage1_rg_full_00_72_OR_NOT_stage1_rg_s_ETC___d2019 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d1037 ==
	     3'd5 ;

  // submodule stage2_mbox
  assign stage2_mbox$req_f3 =
	     stage1_rg_stage_input_BITS_263_TO_232__q28[14:12] ;
  assign stage2_mbox$req_is_OP_not_OP_32 =
	     !stage1_rg_stage_input_BITS_263_TO_232__q28[3] ;
  assign stage2_mbox$req_v1 = x_out_data_to_stage2_val1__h7480 ;
  assign stage2_mbox$req_v2 = x_out_data_to_stage2_val2__h7481 ;
  assign stage2_mbox$set_verbosity_verbosity = 4'h0 ;
  assign stage2_mbox$EN_set_verbosity = 1'b0 ;
  assign stage2_mbox$EN_req_reset = 1'b0 ;
  assign stage2_mbox$EN_rsp_reset = 1'b0 ;
  assign stage2_mbox$EN_req =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_939_940_AND_NOT_csr_regfile_interr_ETC___d1951 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 !=
	     4'd0 &&
	     IF_NOT_stage1_rg_full_00_72_OR_NOT_stage1_rg_s_ETC___d2019 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d1037 ==
	     3'd3 ;

  // submodule stage3_f_reset_reqs
  assign stage3_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage3_f_reset_reqs$DEQ = CAN_FIRE_RL_stage3_rl_reset ;
  assign stage3_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage3_f_reset_rsps
  assign stage3_f_reset_rsps$ENQ = CAN_FIRE_RL_stage3_rl_reset ;
  assign stage3_f_reset_rsps$DEQ = CAN_FIRE_RL_rl_reset_complete ;
  assign stage3_f_reset_rsps$CLR = 1'b0 ;

  // submodule stageD_f_reset_reqs
  assign stageD_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stageD_f_reset_reqs$DEQ = CAN_FIRE_RL_stageD_rl_reset ;
  assign stageD_f_reset_reqs$CLR = 1'b0 ;

  // submodule stageD_f_reset_rsps
  assign stageD_f_reset_rsps$ENQ = CAN_FIRE_RL_stageD_rl_reset ;
  assign stageD_f_reset_rsps$DEQ = CAN_FIRE_RL_rl_reset_complete ;
  assign stageD_f_reset_rsps$CLR = 1'b0 ;

  // submodule stageF_branch_predictor
  assign stageF_branch_predictor$predict_req_m_old_pc =
	     MUX_imem_rg_f3$write_1__SEL_1 ?
	       MUX_stageF_branch_predictor$predict_req_2__VAL_1 :
	       65'h0AAAAAAAAAAAAAAAA ;
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  next_pc__h24373 or
	  WILL_FIRE_RL_rl_reset_complete or
	  pc_reset_value or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  x_out_next_pc__h7429 or
	  MUX_imem_rg_pc$write_1__SEL_4 or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or
	  MUX_imem_rg_pc$write_1__SEL_6 or rg_next_pc)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1:
	  stageF_branch_predictor$predict_req_pc = next_pc__h24373;
      WILL_FIRE_RL_rl_reset_complete:
	  stageF_branch_predictor$predict_req_pc = pc_reset_value;
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	  stageF_branch_predictor$predict_req_pc = x_out_next_pc__h7429;
      MUX_imem_rg_pc$write_1__SEL_4:
	  stageF_branch_predictor$predict_req_pc =
	      csr_regfile$csr_trap_actions[193:130];
      WILL_FIRE_RL_rl_stage1_xRET:
	  stageF_branch_predictor$predict_req_pc =
	      csr_regfile$csr_ret_actions[129:66];
      MUX_imem_rg_pc$write_1__SEL_6:
	  stageF_branch_predictor$predict_req_pc = rg_next_pc;
      default: stageF_branch_predictor$predict_req_pc =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign stageF_branch_predictor$EN_reset = 1'b0 ;
  assign stageF_branch_predictor$EN_predict_req =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2131 ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;

  // submodule stageF_f_reset_reqs
  assign stageF_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stageF_f_reset_reqs$DEQ = CAN_FIRE_RL_stageF_rl_reset ;
  assign stageF_f_reset_reqs$CLR = 1'b0 ;

  // submodule stageF_f_reset_rsps
  assign stageF_f_reset_rsps$ENQ = CAN_FIRE_RL_stageF_rl_reset ;
  assign stageF_f_reset_rsps$DEQ = CAN_FIRE_RL_rl_reset_complete ;
  assign stageF_f_reset_rsps$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_stage1_rg_stage_input_01_BITS_151_TO_145_ETC___d1355 =
	     next_pc__h7414 == stage1_rg_stage_input[215:152] ;
  assign IF_IF_stage1_rg_stage_input_01_BITS_151_TO_145_ETC___d925 =
	     IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d848 ?
	       4'd1 :
	       4'd12 ;
  assign IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d1955 =
	     NOT_rg_halt_939_940_AND_NOT_csr_regfile_interr_ETC___d1951 ?
	       IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 !=
	       4'd0 &&
	       !IF_IF_stage1_rg_stage_input_01_BITS_151_TO_145_ETC___d1355 &&
	       stageF_rg_full &&
	       (!near_mem$imem_valid ||
		NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_75_ETC___d1782) :
	       stage1_rg_full ;
  assign IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d1958 =
	     IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d1955 &&
	     stageD_rg_full ||
	     !stageF_rg_full ||
	     !near_mem$imem_valid ||
	     NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_75_ETC___d1782 ;
  assign IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2090 =
	     NOT_rg_halt_939_940_AND_NOT_csr_regfile_interr_ETC___d1951 ?
	       IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 ==
	       4'd0 ||
	       IF_IF_stage1_rg_stage_input_01_BITS_151_TO_145_ETC___d1355 ||
	       !stageF_rg_full ||
	       near_mem$imem_valid &&
	       near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788 :
	       !stage1_rg_full ;
  assign IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2131 =
	     (IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2090 ||
	      !stageD_rg_full) &&
	     stageF_rg_full &&
	     near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788 ;
  assign IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2144 =
	     IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2131 &&
	     stage1_rg_full_00_AND_NOT_stage1_rg_stage_inpu_ETC___d2140 &&
	     !IF_IF_stage1_rg_stage_input_01_BITS_151_TO_145_ETC___d1355 &&
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46 ;
  assign IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2150 =
	     IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2131 &&
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46 &&
	     (!stage1_rg_full ||
	      stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	      IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d1972 ||
	      IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 ==
	      4'd0 ||
	      IF_IF_stage1_rg_stage_input_01_BITS_151_TO_145_ETC___d1355) ;
  assign IF_NOT_stage1_rg_full_00_72_OR_NOT_stage1_rg_s_ETC___d2019 =
	     IF_IF_stage1_rg_stage_input_01_BITS_151_TO_145_ETC___d1355 ||
	     !stageF_rg_full ||
	     near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788 ;
  assign IF_NOT_stage1_rg_full_00_72_OR_NOT_stage1_rg_s_ETC___d2286 =
	     stage1_rg_stage_input[400:337] ==
	     csr_regfile$csr_trap_actions[193:130] ;
  assign IF_NOT_stage1_rg_stage_input_01_BITS_112_TO_11_ETC___d875 =
	     NOT_stage1_rg_stage_input_01_BITS_112_TO_110_3_ETC___d412 ?
	       4'd12 :
	       4'd1 ;
  assign IF_NOT_stage1_rg_stage_input_01_BITS_112_TO_11_ETC___d878 =
	     (stage1_rg_stage_input[112:110] != 3'b0 &&
	      stage1_rg_stage_input[112:110] != 3'b100 &&
	      stage1_rg_stage_input[112:110] != 3'b001 &&
	      stage1_rg_stage_input[112:110] != 3'b101 &&
	      stage1_rg_stage_input[112:110] != 3'b010 &&
	      stage1_rg_stage_input[112:110] != 3'b110 &&
	      stage1_rg_stage_input[112:110] != 3'b011) ?
	       4'd12 :
	       4'd1 ;
  assign IF_NOT_stage1_rg_stage_input_01_BITS_112_TO_11_ETC___d879 =
	     (stage1_rg_stage_input[112:110] != 3'b0 &&
	      stage1_rg_stage_input[112:110] != 3'b001 &&
	      stage1_rg_stage_input[112:110] != 3'b010 &&
	      stage1_rg_stage_input[112:110] != 3'b011) ?
	       4'd12 :
	       4'd1 ;
  assign IF_NOT_stage2_rg_full_03_36_OR_stage2_rg_stage_ETC___d284 =
	     (!stage2_rg_full || stage2_rg_stage2[267:265] == 3'd0) ?
	       2'd0 :
	       CASE_stage2_rg_stage2_BITS_267_TO_265_1_IF_sta_ETC__q6 ;
  assign IF_csr_regfile_read_csr_IF_stage1_rg_full_00_T_ETC___d2220 =
	     csr_regfile$read_csr[63:0] | rs1_val__h26414 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1622 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b0 &&
	      stageD_rg_data[79:77] == 3'b001) ?
	       instr__h17425 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b0 &&
		 stageD_rg_data[79:77] == 3'b101) ?
		  instr__h19118 :
		  32'h0) ;
  assign IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1623 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	      stageD_rg_data[79:77] == 3'b101) ?
	       instr__h18768 :
	       IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1622 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1624 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	      stageD_rg_data[75:71] != 5'd0 &&
	      stageD_rg_data[79:77] == 3'b001 &&
	      csr_regfile$read_misa[3]) ?
	       instr__h18615 :
	       IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1623 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1625 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b0 &&
	      stageD_rg_data[79:77] == 3'b111) ?
	       instr__h17576 :
	       IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1624 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1626 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b0 &&
	      stageD_rg_data[79:77] == 3'b011) ?
	       instr__h17425 :
	       IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1625 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1627 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	      stageD_rg_data[79:77] == 3'b111) ?
	       instr__h17226 :
	       IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1626 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1629 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	      stageD_rg_data[79:76] == 4'b1001 &&
	      stageD_rg_data[75:71] == 5'd0 &&
	      stageD_rg_data[70:66] == 5'd0) ?
	       instr__h16977 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
		 stageD_rg_data[75:71] != 5'd0 &&
		 stageD_rg_data[79:77] == 3'b011) ?
		  instr__h17073 :
		  IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1627) ;
  assign IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1631 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:74] == 6'b100111 &&
	      stageD_rg_data[70:69] == 2'b01) ?
	       instr__h16681 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
		 stageD_rg_data[79:74] == 6'b100111 &&
		 stageD_rg_data[70:69] == 2'b0) ?
		  instr__h16819 :
		  IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1629) ;
  assign IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1633 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:74] == 6'b100011 &&
	      stageD_rg_data[70:69] == 2'b01) ?
	       instr__h16407 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
		 stageD_rg_data[79:74] == 6'b100011 &&
		 stageD_rg_data[70:69] == 2'b0) ?
		  instr__h16543 :
		  IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1631) ;
  assign IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1635 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:74] == 6'b100011 &&
	      stageD_rg_data[70:69] == 2'b11) ?
	       instr__h16135 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
		 stageD_rg_data[79:74] == 6'b100011 &&
		 stageD_rg_data[70:69] == 2'b10) ?
		  instr__h16271 :
		  IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1633) ;
  assign IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1636 =
	     (csr_regfile_read_misa__6_BIT_2_370_AND_stageD__ETC___d1451 &&
	      stageD_rg_data[70:66] != 5'd0) ?
	       instr__h16040 :
	       IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1635 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1637 =
	     (csr_regfile_read_misa__6_BIT_2_370_AND_stageD__ETC___d1445 &&
	      stageD_rg_data[70:66] != 5'd0) ?
	       instr__h15921 :
	       IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1636 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1639 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b100 &&
	      stageD_rg_data[75:74] == 2'b01 &&
	      imm6__h14034 != 6'd0) ?
	       instr__h15626 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
		 stageD_rg_data[79:77] == 3'b100 &&
		 stageD_rg_data[75:74] == 2'b10) ?
		  instr__h15743 :
		  IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1637) ;
  assign IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1640 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b100 &&
	      stageD_rg_data[75:74] == 2'b0 &&
	      imm6__h14034 != 6'd0) ?
	       instr__h15437 :
	       IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1639 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1641 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	      stageD_rg_data[79:77] == 3'b0 &&
	      stageD_rg_data[75:71] != 5'd0 &&
	      imm6__h14034 != 6'd0) ?
	       instr__h15248 :
	       IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1640 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1643 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b011 &&
	      stageD_rg_data[75:71] == 5'd2 &&
	      nzimm10__h14703 != 10'd0) ?
	       instr__h14907 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b0 &&
		 stageD_rg_data[79:77] == 3'b0 &&
		 nzimm10__h14918 != 10'd0) ?
		  instr__h15079 :
		  IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1641) ;
  assign IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1645 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b0 &&
	      stageD_rg_data[75:71] != 5'd0 &&
	      imm6__h14034 != 6'd0 ||
	      csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b0 &&
	      stageD_rg_data[75:71] == 5'd0 &&
	      imm6__h14034 == 6'd0) ?
	       instr__h14425 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
		 stageD_rg_data[79:77] == 3'b001 &&
		 stageD_rg_data[75:71] != 5'd0) ?
		  instr__h14652 :
		  IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1643) ;
  assign IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1646 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b011 &&
	      stageD_rg_data[75:71] != 5'd0 &&
	      stageD_rg_data[75:71] != 5'd2 &&
	      imm6__h14034 != 6'd0) ?
	       instr__h14296 :
	       IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1645 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1648 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b111) ?
	       instr__h13774 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
		 stageD_rg_data[79:77] == 3'b010 &&
		 stageD_rg_data[75:71] != 5'd0) ?
		  instr__h14112 :
		  IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1646) ;
  assign IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1649 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b110) ?
	       instr__h13457 :
	       IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1648 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1650 =
	     (csr_regfile_read_misa__6_BIT_2_370_AND_stageD__ETC___d1451 &&
	      stageD_rg_data[70:66] == 5'd0) ?
	       instr__h13392 :
	       IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1649 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1651 =
	     (csr_regfile_read_misa__6_BIT_2_370_AND_stageD__ETC___d1445 &&
	      stageD_rg_data[70:66] == 5'd0) ?
	       instr__h13276 :
	       IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1650 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1652 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b101) ?
	       instr__h12823 :
	       IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1651 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1653 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b0 &&
	      stageD_rg_data[79:77] == 3'b110) ?
	       instr__h12594 :
	       IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1652 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1654 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b0 &&
	      stageD_rg_data[79:77] == 3'b010) ?
	       instr__h12399 :
	       IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1653 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1655 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	      stageD_rg_data[79:77] == 3'b110) ?
	       instr__h12207 :
	       IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1654 ;
  assign IF_near_mem_dmem_valid__27_AND_NOT_near_mem_dm_ETC___d254 =
	     (near_mem$dmem_valid && !near_mem$dmem_exc) ? 2'd2 : 2'd1 ;
  assign IF_near_mem_dmem_valid__27_THEN_IF_near_mem_dm_ETC___d130 =
	     near_mem$dmem_valid ? (near_mem$dmem_exc ? 2'd3 : 2'd2) : 2'd1 ;
  assign IF_rg_cur_priv_8_EQ_0b11_84_OR_rg_cur_priv_8_E_ETC___d913 =
	     ((rg_cur_priv == 2'b11 ||
	       rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[22]) &&
	      stage1_rg_stage_input[87:76] == 12'b000100000010) ?
	       4'd9 :
	       (rg_cur_priv_8_EQ_0b11_84_OR_rg_cur_priv_8_EQ_0_ETC___d911 ?
		  4'd11 :
		  4'd12) ;
  assign IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC___d1106 =
	     rs1_val_bypassed__h3995 +
	     SEXT_stage1_rg_stage_input_01_BITS_87_TO_76_92___d1105 ;
  assign IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC___d365 =
	     rs1_val_bypassed__h3995 == rs2_val_bypassed__h4001 ;
  assign IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC___d367 =
	     (rs1_val_bypassed__h3995 ^ 64'h8000000000000000) <
	     (rs2_val_bypassed__h4001 ^ 64'h8000000000000000) ;
  assign IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC___d369 =
	     rs1_val_bypassed__h3995 < rs2_val_bypassed__h4001 ;
  assign IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC__q25 =
	     IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC___d1106[31:0] ;
  assign IF_stage1_rg_stage_input_01_BITS_144_TO_140_82_ETC___d917 =
	     stage1_rg_stage_input_01_BITS_144_TO_140_82_EQ_ETC___d890 ?
	       4'd7 :
	       ((stage1_rg_stage_input[144:140] == 5'd0 &&
		 stage1_rg_stage_input[139:135] == 5'd0) ?
		  IF_stage1_rg_stage_input_01_BITS_87_TO_76_92_E_ETC___d915 :
		  4'd12) ;
  assign IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d1225 =
	     ((stage1_rg_stage_input[151:145] == 7'b0010011 ||
	       stage1_rg_stage_input[151:145] == 7'b0110011) &&
	      (stage1_rg_stage_input[112:110] == 3'b001 ||
	       stage1_rg_stage_input[112:110] == 3'b101)) ?
	       alu_outputs___1_val1__h7760 :
	       IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d1224 ;
  assign IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d1226 =
	     ((stage1_rg_stage_input[151:145] == 7'b0110011 ||
	       stage1_rg_stage_input[151:145] == 7'b0111011) &&
	      stage1_rg_stage_input[104:98] == 7'b0000001) ?
	       rs1_val_bypassed__h3995 :
	       IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d1225 ;
  assign IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d1243 =
	     ((stage1_rg_stage_input[151:145] == 7'b0110011 ||
	       stage1_rg_stage_input[151:145] == 7'b0111011) &&
	      stage1_rg_stage_input[104:98] == 7'b0000001) ?
	       rs2_val_bypassed__h4001 :
	       CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q26 ;
  assign IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d663 =
	     CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q12 ||
	     ((stage1_rg_stage_input[112:110] == 3'b111) ?
		csr_regfile$read_frm == 3'b101 ||
		csr_regfile$read_frm == 3'b110 ||
		csr_regfile$read_frm == 3'b111 :
		stage1_rg_stage_input[112:110] == 3'b101 ||
		stage1_rg_stage_input[112:110] == 3'b110) ;
  assign IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d678 =
	     (stage1_rg_stage_input[151:145] == 7'b1100011) ?
	       stage1_rg_stage_input[112:110] != 3'b0 &&
	       stage1_rg_stage_input[112:110] != 3'b001 &&
	       stage1_rg_stage_input[112:110] != 3'b100 &&
	       stage1_rg_stage_input[112:110] != 3'b101 &&
	       stage1_rg_stage_input[112:110] != 3'b110 &&
	       stage1_rg_stage_input[112:110] != 3'b111 ||
	       IF_stage1_rg_stage_input_01_BITS_112_TO_110_30_ETC___d376 :
	       stage1_rg_stage_input[151:145] == 7'b1101111 ||
	       stage1_rg_stage_input[151:145] == 7'b1100111 ||
	       (stage1_rg_stage_input[151:145] != 7'b0110011 ||
		stage1_rg_stage_input[104:98] != 7'b0000001) &&
	       (stage1_rg_stage_input[151:145] != 7'b0111011 ||
		stage1_rg_stage_input[104:98] != 7'b0000001) &&
	       (stage1_rg_stage_input[151:145] != 7'b0010011 &&
		stage1_rg_stage_input[151:145] != 7'b0110011 ||
		stage1_rg_stage_input[112:110] != 3'b001 &&
		stage1_rg_stage_input[112:110] != 3'b101) &&
	       IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d675 ;
  assign IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d689 =
	     (stage1_rg_stage_input[151:145] == 7'b1100011) ?
	       stage1_rg_stage_input[112:110] != 3'b0 &&
	       stage1_rg_stage_input[112:110] != 3'b001 &&
	       stage1_rg_stage_input[112:110] != 3'b100 &&
	       stage1_rg_stage_input[112:110] != 3'b101 &&
	       stage1_rg_stage_input[112:110] != 3'b110 &&
	       stage1_rg_stage_input[112:110] != 3'b111 ||
	       IF_stage1_rg_stage_input_01_BITS_112_TO_110_30_ETC___d684 :
	       stage1_rg_stage_input[151:145] != 7'b1101111 &&
	       stage1_rg_stage_input[151:145] != 7'b1100111 ;
  assign IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d848 =
	     CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q15 &&
	     ((stage1_rg_stage_input[112:110] == 3'b111) ?
		csr_regfile$read_frm != 3'b101 &&
		csr_regfile$read_frm != 3'b110 &&
		csr_regfile$read_frm != 3'b111 :
		stage1_rg_stage_input[112:110] != 3'b101 &&
		stage1_rg_stage_input[112:110] != 3'b110) ;
  assign IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d863 =
	     (stage1_rg_stage_input[151:145] == 7'b1100011) ?
	       (stage1_rg_stage_input[112:110] == 3'b0 ||
		stage1_rg_stage_input[112:110] == 3'b001 ||
		stage1_rg_stage_input[112:110] == 3'b100 ||
		stage1_rg_stage_input[112:110] == 3'b101 ||
		stage1_rg_stage_input[112:110] == 3'b110 ||
		stage1_rg_stage_input[112:110] == 3'b111) &&
	       IF_stage1_rg_stage_input_01_BITS_112_TO_110_30_ETC___d684 :
	       stage1_rg_stage_input[151:145] != 7'b1101111 &&
	       stage1_rg_stage_input[151:145] != 7'b1100111 &&
	       (stage1_rg_stage_input_01_BITS_151_TO_145_28_EQ_ETC___d709 ||
		IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d860) ;
  assign IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d865 =
	     (stage1_rg_stage_input[151:145] == 7'b1100011) ?
	       (stage1_rg_stage_input[112:110] == 3'b0 ||
		stage1_rg_stage_input[112:110] == 3'b001 ||
		stage1_rg_stage_input[112:110] == 3'b100 ||
		stage1_rg_stage_input[112:110] == 3'b101 ||
		stage1_rg_stage_input[112:110] == 3'b110 ||
		stage1_rg_stage_input[112:110] == 3'b111) &&
	       IF_stage1_rg_stage_input_01_BITS_112_TO_110_30_ETC___d376 :
	       stage1_rg_stage_input[151:145] == 7'b1101111 ||
	       stage1_rg_stage_input[151:145] == 7'b1100111 ;
  assign IF_stage1_rg_stage_input_01_BIT_333_095_THEN_s_ETC___d1098 =
	     stage1_rg_stage_input[333] ?
	       next_pc__h10414 :
	       next_pc___1__h10417 ;
  assign IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d1037 =
	     stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 ?
	       CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q23 :
	       3'd0 ;
  assign IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 =
	     stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 ?
	       (stage1_rg_stage_input[332] ?
		  4'd12 :
		  IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d940) :
	       4'd0 ;
  assign IF_stage2_fbox_valid__33_THEN_2_ELSE_1___d134 =
	     stage2_fbox$valid ? 2'd2 : 2'd1 ;
  assign IF_stage2_mbox_valid__31_THEN_2_ELSE_1___d132 =
	     stage2_mbox$valid ? 2'd2 : 2'd1 ;
  assign IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 =
	     stage2_rg_full ?
	       CASE_stage2_rg_stage2_BITS_267_TO_265_0_2_1_IF_ETC__q4 :
	       2'd0 ;
  assign IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d1972 =
	     IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d262 ==
	     2'd1 &&
	     (IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d305 ||
	      IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d307) ||
	     stage1_rg_stage_input[332] ||
	     IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d678 &&
	     IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d689 ;
  assign IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d2010 =
	     IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 ==
	     2'd2 &&
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46 &&
	     stage2_rg_stage2[267:265] != 3'd0 &&
	     CASE_stage2_rg_stage2_BITS_267_TO_265_1_stage2_ETC__q29 ;
  assign IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d2012 =
	     IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 ==
	     2'd2 &&
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46 &&
	     (stage2_rg_stage2[267:265] == 3'd0 ||
	      CASE_stage2_rg_stage2_BITS_267_TO_265_1_NOT_st_ETC__q30) ;
  assign IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d262 =
	     stage2_rg_full ?
	       CASE_stage2_rg_stage2_BITS_267_TO_265_0_2_1_IF_ETC__q5 :
	       2'd0 ;
  assign IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d305 =
	     x_out_bypass_rd__h7025 == stage1_rg_stage_input[139:135] ;
  assign IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d307 =
	     x_out_bypass_rd__h7025 == stage1_rg_stage_input[134:130] ;
  assign IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d868 =
	     IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d262 ==
	     2'd1 &&
	     (IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d305 ||
	      IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d307) ||
	     !stage1_rg_stage_input[332] &&
	     (IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d863 ||
	      IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d865) ;
  assign IF_stage2_rg_stage2_04_BIT_3_94_OR_stage2_rg_s_ETC___d255 =
	     (stage2_rg_stage2[3] || stage2_rg_stage2[264:260] == 5'd0) ?
	       2'd0 :
	       IF_near_mem_dmem_valid__27_AND_NOT_near_mem_dm_ETC___d254 ;
  assign IF_stage2_rg_stage2_04_BIT_3_94_THEN_IF_near_m_ETC___d279 =
	     stage2_rg_stage2[3] ?
	       IF_near_mem_dmem_valid__27_AND_NOT_near_mem_dm_ETC___d254 :
	       2'd0 ;
  assign NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46 =
	     cur_verbosity__h2644 > 4'd1 ;
  assign NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d1948 =
	     (IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d262 !=
	      2'd1 ||
	      !IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d305 &&
	      !IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d307) &&
	     !stage1_rg_stage_input[332] &&
	     (IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d863 ||
	      IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d865) ;
  assign NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692 =
	     (IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d262 !=
	      2'd1 ||
	      !IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d305 &&
	      !IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d307) &&
	     (stage1_rg_stage_input[332] ||
	      IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d678 &&
	      IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d689) ;
  assign NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d1930 =
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     gpr_regfile$RDY_server_reset_response_get &&
	     fpr_regfile$RDY_server_reset_response_get &&
	     near_mem$RDY_server_reset_response_get &&
	     csr_regfile$RDY_server_reset_response_get &&
	     stageF_branch_predictor_RDY_predict_req__913_A_ETC___d1925 ;
  assign NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d1959 =
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     stageF_branch_predictor$RDY_predict_req ;
  assign NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d2253 =
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     stageF_branch_predictor$RDY_predict_req &&
	     near_mem$RDY_server_fence_i_response_get ;
  assign NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d2265 =
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     stageF_branch_predictor$RDY_predict_req &&
	     near_mem$RDY_server_fence_response_get ;
  assign NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_75_ETC___d1780 =
	     !near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9___d1753 &&
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] != 2'b0 ||
	      near_mem$imem_instr[1:0] != 2'b11) &&
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] == 2'b11) ;
  assign NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_75_ETC___d1782 =
	     NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_75_ETC___d1780 &&
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] != 2'b0 ||
	      near_mem$imem_instr[1:0] == 2'b11) ;
  assign NOT_rg_cur_priv_8_EQ_0b11_84_334_AND_NOT_rg_cu_ETC___d1340 =
	     (rg_cur_priv != 2'b11 &&
	      (rg_cur_priv != 2'b01 || csr_regfile$read_mstatus[20]) ||
	      stage1_rg_stage_input[104:98] != 7'b0001001) &&
	     stage1_rg_stage_input[144:140] == 5'd0 &&
	     stage1_rg_stage_input[139:135] == 5'd0 &&
	     stage1_rg_stage_input[87:76] == 12'b000000000001 ;
  assign NOT_rg_halt_939_940_AND_NOT_csr_regfile_interr_ETC___d1951 =
	     !rg_halt && !csr_regfile$interrupt_pending[4] &&
	     (IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 ==
	      2'd2 ||
	      IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 ==
	      2'd0) &&
	     stage1_rg_full &&
	     (!stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 ||
	      NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d1948) ;
  assign NOT_stage1_rg_full_00_72_OR_stage1_rg_stage_in_ETC___d1975 =
	     (!stage1_rg_full ||
	      stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	      IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d1972) &&
	     (!stage1_rg_full ||
	      !stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 ||
	      IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d868) ;
  assign NOT_stage1_rg_stage_input_01_BITS_112_TO_110_3_ETC___d412 =
	     (stage1_rg_stage_input[112:110] != 3'b0 ||
	      stage1_rg_stage_input[151:145] == 7'b0110011 &&
	      stage1_rg_stage_input[262]) &&
	     (stage1_rg_stage_input[112:110] != 3'b0 ||
	      stage1_rg_stage_input[151:145] != 7'b0110011 ||
	      !stage1_rg_stage_input[262]) &&
	     stage1_rg_stage_input[112:110] != 3'b010 &&
	     stage1_rg_stage_input[112:110] != 3'b011 &&
	     stage1_rg_stage_input[112:110] != 3'b100 &&
	     stage1_rg_stage_input[112:110] != 3'b110 &&
	     stage1_rg_stage_input[112:110] != 3'b111 ;
  assign NOT_stage1_rg_stage_input_01_BIT_334_02_EQ_rg__ETC___d1016 =
	     (!stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 ||
	      IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d868) &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 !=
	     4'd0 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 !=
	     4'd1 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 !=
	     4'd2 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 !=
	     4'd3 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 !=
	     4'd4 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 !=
	     4'd5 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 !=
	     4'd6 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 !=
	     4'd7 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 !=
	     4'd8 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 !=
	     4'd9 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 !=
	     4'd10 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 !=
	     4'd11 ;
  assign NOT_stage1_rg_stage_input_01_BIT_334_02_EQ_rg__ETC___d696 =
	     !stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 ||
	     IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d262 !=
	     2'd1 ||
	     !IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d305 &&
	     !IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d307 ;
  assign SEXT_stage1_rg_stage_input_01_BITS_87_TO_76_92___d1105 =
	     { {52{stage1_rg_stage_input_BITS_87_TO_76__q24[11]}},
	       stage1_rg_stage_input_BITS_87_TO_76__q24 } ;
  assign SEXT_stageD_rg_data_365_BIT_76_382_CONCAT_stag_ETC___d1435 =
	     { {9{offset__h12770[11]}}, offset__h12770 } ;
  assign SEXT_stageD_rg_data_365_BIT_76_382_CONCAT_stag_ETC___d1460 =
	     { {4{offset__h13401[8]}}, offset__h13401 } ;
  assign _theResult_____1_fst__h8925 =
	     (stage1_rg_stage_input[112:110] == 3'b0 &&
	      stage1_rg_stage_input[151:145] == 7'b0110011 &&
	      stage1_rg_stage_input[262]) ?
	       rd_val___1__h8921 :
	       _theResult_____1_fst__h8932 ;
  assign _theResult_____1_fst__h8960 =
	     rs1_val_bypassed__h3995 & _theResult___snd__h11047 ;
  assign _theResult____h33032 =
	     (delta_CPI_instrs__h33031 == 64'd0) ?
	       delta_CPI_instrs___1__h33067 :
	       delta_CPI_instrs__h33031 ;
  assign _theResult____h4353 = x_out_data_to_stage1_instr__h11849 ;
  assign _theResult___fst__h19505 =
	     (near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 &&
	      imem_rg_pc[1:0] == 2'b0 &&
	      near_mem$imem_instr[1:0] != 2'b11) ?
	       instr_out___1__h19507 :
	       _theResult___fst__h19533 ;
  assign _theResult___fst__h19533 =
	     (near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 &&
	      imem_rg_pc[1:0] != 2'b0 &&
	      near_mem$imem_instr[17:16] != 2'b11) ?
	       instr_out___1__h19535 :
	       near_mem$imem_instr ;
  assign _theResult___fst__h9050 =
	     (stage1_rg_stage_input[112:110] == 3'b001 &&
	      !stage1_rg_stage_input[257]) ?
	       rd_val___1__h11109 :
	       _theResult___fst__h9057 ;
  assign _theResult___fst__h9057 =
	     stage1_rg_stage_input[262] ?
	       rd_val___1__h11191 :
	       rd_val___1__h11162 ;
  assign _theResult___fst__h9137 =
	     { {32{rs1_val_bypassed995_BITS_31_TO_0_SRL_rs2_val_b_ETC__q9[31]}},
	       rs1_val_bypassed995_BITS_31_TO_0_SRL_rs2_val_b_ETC__q9 } ;
  assign _theResult___fst_rd_val__h7004 =
	     (stage2_rg_stage2[3] || stage2_rg_stage2[264:260] == 5'd0) ?
	       stage2_rg_stage2[195:132] :
	       near_mem$dmem_word64 ;
  assign _theResult___fst_rd_val__h7015 =
	     stage2_rg_stage2[3] ?
	       stage2_rg_stage2[195:132] :
	       stage2_fbox$word_fst ;
  assign _theResult___snd__h11047 =
	     (stage1_rg_stage_input[151:145] == 7'b0010011) ?
	       SEXT_stage1_rg_stage_input_01_BITS_87_TO_76_92___d1105 :
	       rs2_val_bypassed__h4001 ;
  assign _theResult___snd_rd_val__h7156 =
	     stage2_rg_stage2[3] ?
	       data_to_stage3_rd_val__h6442 :
	       stage2_rg_stage2[195:132] ;
  assign _theResult___snd_rd_val__h7162 =
	     stage2_rg_stage2[3] ?
	       stage2_fbox$word_fst :
	       stage2_rg_stage2[195:132] ;
  assign alu_outputs___1_addr__h7618 =
	     IF_stage1_rg_stage_input_01_BITS_112_TO_110_30_ETC___d376 ?
	       branch_target__h7598 :
	       IF_stage1_rg_stage_input_01_BIT_333_095_THEN_s_ETC___d1098 ;
  assign alu_outputs___1_addr__h7643 =
	     { stage1_rg_stage_input_BITS_400_TO_337_PLUS_SEX_ETC__q3[63:1],
	       1'd0 } ;
  assign alu_outputs___1_addr__h7672 =
	     { IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC___d1106[63:1],
	       1'd0 } ;
  assign alu_outputs___1_addr__h7938 =
	     rs1_val_bypassed__h3995 +
	     { {52{stage1_rg_stage_input_BITS_75_TO_64__q7[11]}},
	       stage1_rg_stage_input_BITS_75_TO_64__q7 } ;
  assign alu_outputs___1_exc_code__h8211 =
	     (stage1_rg_stage_input[112:110] == 3'b0) ?
	       (stage1_rg_stage_input_01_BITS_144_TO_140_82_EQ_ETC___d890 ?
		  4'd2 :
		  ((stage1_rg_stage_input[144:140] == 5'd0 &&
		    stage1_rg_stage_input[139:135] == 5'd0) ?
		     CASE_stage1_rg_stage_input_BITS_87_TO_76_0b0_C_ETC__q19 :
		     4'd2)) :
	       4'd2 ;
  assign alu_outputs___1_val1__h7760 =
	     (stage1_rg_stage_input[112:110] == 3'b001) ?
	       rd_val__h10942 :
	       (stage1_rg_stage_input[262] ?
		  rd_val__h11015 :
		  rd_val__h10993) ;
  assign alu_outputs___1_val1__h7801 =
	     (stage1_rg_stage_input[112:110] == 3'b0 &&
	      (stage1_rg_stage_input[151:145] != 7'b0110011 ||
	       !stage1_rg_stage_input[262])) ?
	       rd_val___1__h8913 :
	       _theResult_____1_fst__h8925 ;
  assign alu_outputs___1_val1__h7827 =
	     (stage1_rg_stage_input[112:110] == 3'b0) ?
	       rd_val___1__h11078 :
	       _theResult___fst__h9050 ;
  assign alu_outputs___1_val1__h7872 = { {32{v32__h7861[31]}}, v32__h7861 } ;
  assign alu_outputs___1_val1__h7891 =
	     stage1_rg_stage_input[400:337] + alu_outputs___1_val1__h7872 ;
  assign alu_outputs___1_val1__h8215 =
	     stage1_rg_stage_input[112] ?
	       { 59'd0, stage1_rg_stage_input[139:135] } :
	       rs1_val_bypassed__h3995 ;
  assign alu_outputs___1_val1__h8239 =
	     { 57'd0, stage1_rg_stage_input[104:98] } ;
  assign alu_outputs___1_val1__h8342 =
	     (stage1_rg_stage_input[151:145] == 7'b1010011 &&
	      (stage1_rg_stage_input[104:98] == 7'h69 &&
	       (stage1_rg_stage_input[134:130] == 5'd0 ||
		stage1_rg_stage_input[134:130] == 5'd1 ||
		stage1_rg_stage_input[134:130] == 5'd2 ||
		stage1_rg_stage_input[134:130] == 5'd3) ||
	       stage1_rg_stage_input[104:98] == 7'h79 ||
	       stage1_rg_stage_input[104:98] == 7'h68 &&
	       (stage1_rg_stage_input[134:130] == 5'd0 ||
		stage1_rg_stage_input[134:130] == 5'd1 ||
		stage1_rg_stage_input[134:130] == 5'd2 ||
		stage1_rg_stage_input[134:130] == 5'd3) ||
	       stage1_rg_stage_input[104:98] == 7'h78)) ?
	       rs1_val_bypassed__h3995 :
	       frs1_val_bypassed__h4006 ;
  assign alu_outputs___1_val2__h7940 =
	     (stage1_rg_stage_input[151:145] == 7'b0100111) ?
	       frs2_val_bypassed__h4011 :
	       rs2_val_bypassed__h4001 ;
  assign branch_target__h7598 =
	     stage1_rg_stage_input[400:337] +
	     { {51{stage1_rg_stage_input_BITS_63_TO_51__q1[12]}},
	       stage1_rg_stage_input_BITS_63_TO_51__q1 } ;
  assign cpi__h33034 = x__h33033 / 64'd10 ;
  assign cpifrac__h33035 = x__h33033 % 64'd10 ;
  assign csr_regfile_RDY_server_reset_request_put__889__ETC___d1901 =
	     csr_regfile$RDY_server_reset_request_put &&
	     f_reset_reqs$EMPTY_N &&
	     stageF_f_reset_reqs$FULL_N &&
	     stageD_f_reset_reqs$FULL_N &&
	     stage1_f_reset_reqs$FULL_N &&
	     stage2_f_reset_reqs$FULL_N &&
	     stage3_f_reset_reqs$FULL_N ;
  assign csr_regfile_read_csr_mcycle__7_MINUS_rg_start__ETC___d2289 =
	     delta_CPI_cycles__h33030 * 64'd10 ;
  assign csr_regfile_read_misa__6_BIT_2_370_AND_stageD__ETC___d1445 =
	     csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	     stageD_rg_data[79:76] == 4'b1000 &&
	     stageD_rg_data[75:71] != 5'd0 ;
  assign csr_regfile_read_misa__6_BIT_2_370_AND_stageD__ETC___d1451 =
	     csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	     stageD_rg_data[79:76] == 4'b1001 &&
	     stageD_rg_data[75:71] != 5'd0 ;
  assign cur_verbosity__h2644 =
	     (csr_regfile$read_csr_minstret < cfg_logdelay) ?
	       4'd0 :
	       cfg_verbosity ;
  assign d_instr__h19473 =
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9___d1753 ?
	       instr_out___1__h19475 :
	       _theResult___fst__h19505 ;
  assign data_to_stage2_addr__h7466 = x_out_data_to_stage2_addr__h7479 ;
  assign data_to_stage3_rd_val__h6442 =
	     stage2_rg_stage2[3] ?
	       ((stage2_rg_stage2[282:280] == 3'b010) ?
		  { 32'hFFFFFFFF, near_mem$dmem_word64[31:0] } :
		  near_mem$dmem_word64) :
	       near_mem$dmem_word64 ;
  assign decoded_instr_funct10__h23254 =
	     { _theResult____h4353[31:25], _theResult____h4353[14:12] } ;
  assign decoded_instr_imm12_S__h23256 =
	     { _theResult____h4353[31:25], _theResult____h4353[11:7] } ;
  assign decoded_instr_imm13_SB__h23257 =
	     { _theResult____h4353[31],
	       _theResult____h4353[7],
	       _theResult____h4353[30:25],
	       _theResult____h4353[11:8],
	       1'b0 } ;
  assign decoded_instr_imm21_UJ__h23259 =
	     { _theResult____h4353[31],
	       _theResult____h4353[19:12],
	       _theResult____h4353[20],
	       _theResult____h4353[30:21],
	       1'b0 } ;
  assign delta_CPI_cycles__h33030 =
	     csr_regfile$read_csr_mcycle - rg_start_CPI_cycles ;
  assign delta_CPI_instrs___1__h33067 = delta_CPI_instrs__h33031 + 64'd1 ;
  assign delta_CPI_instrs__h33031 =
	     csr_regfile$read_csr_minstret - rg_start_CPI_instrs ;
  assign epoch__h24371 =
	     (stage1_rg_full_00_AND_NOT_stage1_rg_stage_inpu_ETC___d2140 &&
	      !IF_IF_stage1_rg_stage_input_01_BITS_151_TO_145_ETC___d1355) ?
	       v__h20777 :
	       stageF_rg_epoch ;
  assign fall_through_pc__h7413 =
	     stage1_rg_stage_input[400:337] +
	     (stage1_rg_stage_input[333] ? 64'd4 : 64'd2) ;
  assign frs1_val_bypassed__h4006 =
	     (IF_NOT_stage2_rg_full_03_36_OR_stage2_rg_stage_ETC___d284 ==
	      2'd2 &&
	      x_out_fbypass_rd__h7170 == stage1_rg_stage_input[139:135]) ?
	       x_out_fbypass_rd_val__h7171 :
	       rd_val__h11611 ;
  assign frs2_val_bypassed__h4011 =
	     (IF_NOT_stage2_rg_full_03_36_OR_stage2_rg_stage_ETC___d284 ==
	      2'd2 &&
	      x_out_fbypass_rd__h7170 == stage1_rg_stage_input[134:130]) ?
	       x_out_fbypass_rd_val__h7171 :
	       rd_val__h11674 ;
  assign gpr_regfile_RDY_server_reset_request_put__886__ETC___d1904 =
	     gpr_regfile$RDY_server_reset_request_put &&
	     fpr_regfile$RDY_server_reset_request_put &&
	     near_mem$RDY_server_reset_request_put &&
	     csr_regfile_RDY_server_reset_request_put__889__ETC___d1901 ;
  assign imm12__h12063 = { 4'd0, offset__h11935 } ;
  assign imm12__h12400 = { 5'd0, offset__h12342 } ;
  assign imm12__h14036 = { {6{imm6__h14034[5]}}, imm6__h14034 } ;
  assign imm12__h14705 = { {2{nzimm10__h14703[9]}}, nzimm10__h14703 } ;
  assign imm12__h14920 = { 2'd0, nzimm10__h14918 } ;
  assign imm12__h15116 = { 6'b0, imm6__h14034 } ;
  assign imm12__h15453 = { 6'b010000, imm6__h14034 } ;
  assign imm12__h17074 = { 3'd0, offset__h16988 } ;
  assign imm12__h17426 = { 4'd0, offset__h17360 } ;
  assign imm20__h14164 = { {14{imm6__h14034[5]}}, imm6__h14034 } ;
  assign imm6__h14034 = { stageD_rg_data[76], stageD_rg_data[70:66] } ;
  assign instr___1__h11885 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	      stageD_rg_data[75:71] != 5'd0 &&
	      stageD_rg_data[79:77] == 3'b010) ?
	       instr__h12062 :
	       IF_csr_regfile_read_misa__6_BIT_2_370_AND_stag_ETC___d1655 ;
  assign instr__h12062 =
	     { imm12__h12063, 8'd18, stageD_rg_data[75:71], 7'b0000011 } ;
  assign instr__h12207 =
	     { 4'd0,
	       stageD_rg_data[72:71],
	       stageD_rg_data[76],
	       stageD_rg_data[70:66],
	       8'd18,
	       offset_BITS_4_TO_0___h12331,
	       7'b0100011 } ;
  assign instr__h12399 =
	     { imm12__h12400, rs1__h12401, 3'b010, rd__h12402, 7'b0000011 } ;
  assign instr__h12594 =
	     { 5'd0,
	       stageD_rg_data[69],
	       stageD_rg_data[76],
	       rd__h12402,
	       rs1__h12401,
	       3'b010,
	       offset_BITS_4_TO_0___h12762,
	       7'b0100011 } ;
  assign instr__h12823 =
	     { SEXT_stageD_rg_data_365_BIT_76_382_CONCAT_stag_ETC___d1435[20],
	       SEXT_stageD_rg_data_365_BIT_76_382_CONCAT_stag_ETC___d1435[10:1],
	       SEXT_stageD_rg_data_365_BIT_76_382_CONCAT_stag_ETC___d1435[11],
	       SEXT_stageD_rg_data_365_BIT_76_382_CONCAT_stag_ETC___d1435[19:12],
	       12'd111 } ;
  assign instr__h13276 = { 12'd0, stageD_rg_data[75:71], 15'd103 } ;
  assign instr__h13392 = { 12'd0, stageD_rg_data[75:71], 15'd231 } ;
  assign instr__h13457 =
	     { SEXT_stageD_rg_data_365_BIT_76_382_CONCAT_stag_ETC___d1460[12],
	       SEXT_stageD_rg_data_365_BIT_76_382_CONCAT_stag_ETC___d1460[10:5],
	       5'd0,
	       rs1__h12401,
	       3'b0,
	       SEXT_stageD_rg_data_365_BIT_76_382_CONCAT_stag_ETC___d1460[4:1],
	       SEXT_stageD_rg_data_365_BIT_76_382_CONCAT_stag_ETC___d1460[11],
	       7'b1100011 } ;
  assign instr__h13774 =
	     { SEXT_stageD_rg_data_365_BIT_76_382_CONCAT_stag_ETC___d1460[12],
	       SEXT_stageD_rg_data_365_BIT_76_382_CONCAT_stag_ETC___d1460[10:5],
	       5'd0,
	       rs1__h12401,
	       3'b001,
	       SEXT_stageD_rg_data_365_BIT_76_382_CONCAT_stag_ETC___d1460[4:1],
	       SEXT_stageD_rg_data_365_BIT_76_382_CONCAT_stag_ETC___d1460[11],
	       7'b1100011 } ;
  assign instr__h14112 =
	     { imm12__h14036, 8'd0, stageD_rg_data[75:71], 7'b0010011 } ;
  assign instr__h14296 =
	     { imm20__h14164, stageD_rg_data[75:71], 7'b0110111 } ;
  assign instr__h14425 =
	     { imm12__h14036,
	       stageD_rg_data[75:71],
	       3'b0,
	       stageD_rg_data[75:71],
	       7'b0010011 } ;
  assign instr__h14652 =
	     { imm12__h14036,
	       stageD_rg_data[75:71],
	       3'b0,
	       stageD_rg_data[75:71],
	       7'b0011011 } ;
  assign instr__h14907 =
	     { imm12__h14705,
	       stageD_rg_data[75:71],
	       3'b0,
	       stageD_rg_data[75:71],
	       7'b0010011 } ;
  assign instr__h15079 = { imm12__h14920, 8'd16, rd__h12402, 7'b0010011 } ;
  assign instr__h15248 =
	     { imm12__h15116,
	       stageD_rg_data[75:71],
	       3'b001,
	       stageD_rg_data[75:71],
	       7'b0010011 } ;
  assign instr__h15437 =
	     { imm12__h15116, rs1__h12401, 3'b101, rs1__h12401, 7'b0010011 } ;
  assign instr__h15626 =
	     { imm12__h15453, rs1__h12401, 3'b101, rs1__h12401, 7'b0010011 } ;
  assign instr__h15743 =
	     { imm12__h14036, rs1__h12401, 3'b111, rs1__h12401, 7'b0010011 } ;
  assign instr__h15921 =
	     { 7'b0,
	       stageD_rg_data[70:66],
	       8'd0,
	       stageD_rg_data[75:71],
	       7'b0110011 } ;
  assign instr__h16040 =
	     { 7'b0,
	       stageD_rg_data[70:66],
	       stageD_rg_data[75:71],
	       3'b0,
	       stageD_rg_data[75:71],
	       7'b0110011 } ;
  assign instr__h16135 =
	     { 7'b0,
	       rd__h12402,
	       rs1__h12401,
	       3'b111,
	       rs1__h12401,
	       7'b0110011 } ;
  assign instr__h16271 =
	     { 7'b0,
	       rd__h12402,
	       rs1__h12401,
	       3'b110,
	       rs1__h12401,
	       7'b0110011 } ;
  assign instr__h16407 =
	     { 7'b0,
	       rd__h12402,
	       rs1__h12401,
	       3'b100,
	       rs1__h12401,
	       7'b0110011 } ;
  assign instr__h16543 =
	     { 7'b0100000,
	       rd__h12402,
	       rs1__h12401,
	       3'b0,
	       rs1__h12401,
	       7'b0110011 } ;
  assign instr__h16681 =
	     { 7'b0,
	       rd__h12402,
	       rs1__h12401,
	       3'b0,
	       rs1__h12401,
	       7'b0111011 } ;
  assign instr__h16819 =
	     { 7'b0100000,
	       rd__h12402,
	       rs1__h12401,
	       3'b0,
	       rs1__h12401,
	       7'b0111011 } ;
  assign instr__h16977 =
	     { 12'b000000000001,
	       stageD_rg_data[75:71],
	       3'b0,
	       stageD_rg_data[75:71],
	       7'b1110011 } ;
  assign instr__h17073 =
	     { imm12__h17074, 8'd19, stageD_rg_data[75:71], 7'b0000011 } ;
  assign instr__h17226 =
	     { 3'd0,
	       stageD_rg_data[73:71],
	       stageD_rg_data[76],
	       stageD_rg_data[70:66],
	       8'd19,
	       offset_BITS_4_TO_0___h17701,
	       7'b0100011 } ;
  assign instr__h17425 =
	     { imm12__h17426, rs1__h12401, 3'b011, rd__h12402, 7'b0000011 } ;
  assign instr__h17576 =
	     { 4'd0,
	       stageD_rg_data[70:69],
	       stageD_rg_data[76],
	       rd__h12402,
	       rs1__h12401,
	       3'b011,
	       offset_BITS_4_TO_0___h17701,
	       7'b0100011 } ;
  assign instr__h18615 =
	     { imm12__h17074, 8'd19, stageD_rg_data[75:71], 7'b0000111 } ;
  assign instr__h18768 =
	     { 3'd0,
	       stageD_rg_data[73:71],
	       stageD_rg_data[76],
	       stageD_rg_data[70:66],
	       8'd19,
	       offset_BITS_4_TO_0___h17701,
	       7'b0100111 } ;
  assign instr__h19118 =
	     { 4'd0,
	       stageD_rg_data[70:69],
	       stageD_rg_data[76],
	       rd__h12402,
	       rs1__h12401,
	       3'b011,
	       offset_BITS_4_TO_0___h17701,
	       7'b0100111 } ;
  assign instr_out___1__h19475 =
	     { near_mem$imem_instr[15:0], imem_rg_instr_15_0 } ;
  assign instr_out___1__h19507 = { 16'b0, near_mem$imem_instr[15:0] } ;
  assign instr_out___1__h19535 = { 16'b0, near_mem$imem_instr[31:16] } ;
  assign near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 =
	     near_mem$imem_pc[63:2] == imem_rg_pc[63:2] ;
  assign near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1786 =
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9___d1753 ||
	     near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 &&
	     imem_rg_pc[1:0] == 2'b0 &&
	     near_mem$imem_instr[1:0] == 2'b11 ;
  assign near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788 =
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1786 ||
	     near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 &&
	     imem_rg_pc[1:0] != 2'b0 &&
	     near_mem$imem_instr[17:16] != 2'b11 ||
	     near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 &&
	     imem_rg_pc[1:0] == 2'b0 &&
	     near_mem$imem_instr[1:0] != 2'b11 ;
  assign near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9___d1753 =
	     near_mem$imem_pc == imem_rg_pc + 64'd2 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1884 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788 &&
	     near_mem$imem_exc &&
	     near_mem$imem_exc_code != 4'd0 &&
	     near_mem$imem_exc_code != 4'd1 &&
	     near_mem$imem_exc_code != 4'd2 &&
	     near_mem$imem_exc_code != 4'd3 &&
	     near_mem$imem_exc_code != 4'd4 &&
	     near_mem$imem_exc_code != 4'd5 &&
	     near_mem$imem_exc_code != 4'd6 &&
	     near_mem$imem_exc_code != 4'd7 &&
	     near_mem$imem_exc_code != 4'd8 &&
	     near_mem$imem_exc_code != 4'd9 &&
	     near_mem$imem_exc_code != 4'd11 &&
	     near_mem$imem_exc_code != 4'd12 &&
	     near_mem$imem_exc_code != 4'd13 &&
	     near_mem$imem_exc_code != 4'd15 ;
  assign next_pc___1__h10417 = stage1_rg_stage_input[400:337] + 64'd2 ;
  assign next_pc__h10414 = stage1_rg_stage_input[400:337] + 64'd4 ;
  assign next_pc__h24373 =
	     (stage1_rg_full_00_AND_NOT_stage1_rg_stage_inpu_ETC___d2140 &&
	      !IF_IF_stage1_rg_stage_input_01_BITS_151_TO_145_ETC___d1355) ?
	       x_out_next_pc__h7429 :
	       stageF_branch_predictor$predict_rsp ;
  assign next_pc__h7414 = x_out_next_pc__h7429 ;
  assign nzimm10__h14703 =
	     { stageD_rg_data[76],
	       stageD_rg_data[68:67],
	       stageD_rg_data[69],
	       stageD_rg_data[66],
	       stageD_rg_data[70],
	       4'b0 } ;
  assign nzimm10__h14918 =
	     { stageD_rg_data[74:71],
	       stageD_rg_data[76:75],
	       stageD_rg_data[69],
	       stageD_rg_data[70],
	       2'b0 } ;
  assign offset_BITS_4_TO_0___h12331 = { stageD_rg_data[75:73], 2'b0 } ;
  assign offset_BITS_4_TO_0___h12762 =
	     { stageD_rg_data[75:74], stageD_rg_data[70], 2'b0 } ;
  assign offset_BITS_4_TO_0___h17701 = { stageD_rg_data[75:74], 3'b0 } ;
  assign offset__h11935 =
	     { stageD_rg_data[67:66],
	       stageD_rg_data[76],
	       stageD_rg_data[70:68],
	       2'b0 } ;
  assign offset__h12342 =
	     { stageD_rg_data[69],
	       stageD_rg_data[76:74],
	       stageD_rg_data[70],
	       2'b0 } ;
  assign offset__h12770 =
	     { stageD_rg_data[76],
	       stageD_rg_data[72],
	       stageD_rg_data[74:73],
	       stageD_rg_data[70],
	       stageD_rg_data[71],
	       stageD_rg_data[66],
	       stageD_rg_data[75],
	       stageD_rg_data[69:67],
	       1'b0 } ;
  assign offset__h13401 =
	     { stageD_rg_data[76],
	       stageD_rg_data[70:69],
	       stageD_rg_data[66],
	       stageD_rg_data[75:74],
	       stageD_rg_data[68:67],
	       1'b0 } ;
  assign offset__h16988 =
	     { stageD_rg_data[68:66],
	       stageD_rg_data[76],
	       stageD_rg_data[70:69],
	       3'b0 } ;
  assign offset__h17360 =
	     { stageD_rg_data[70:69], stageD_rg_data[76:74], 3'b0 } ;
  assign rd__h12402 = { 2'b01, stageD_rg_data[68:66] } ;
  assign rd_val___1__h11078 =
	     { {32{IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC__q25[31]}},
	       IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC__q25 } ;
  assign rd_val___1__h11109 = { {32{x__h11112[31]}}, x__h11112 } ;
  assign rd_val___1__h11162 = { {32{x__h11165[31]}}, x__h11165 } ;
  assign rd_val___1__h11191 = { {32{tmp__h11190[31]}}, tmp__h11190 } ;
  assign rd_val___1__h11245 =
	     { {32{rs1_val_bypassed995_BITS_31_TO_0_PLUS_rs2_val__ETC__q10[31]}},
	       rs1_val_bypassed995_BITS_31_TO_0_PLUS_rs2_val__ETC__q10 } ;
  assign rd_val___1__h11293 =
	     { {32{rs1_val_bypassed995_BITS_31_TO_0_MINUS_rs2_val_ETC__q11[31]}},
	       rs1_val_bypassed995_BITS_31_TO_0_MINUS_rs2_val_ETC__q11 } ;
  assign rd_val___1__h11299 = { {32{x__h11302[31]}}, x__h11302 } ;
  assign rd_val___1__h11344 = { {32{x__h11347[31]}}, x__h11347 } ;
  assign rd_val___1__h8913 =
	     rs1_val_bypassed__h3995 + _theResult___snd__h11047 ;
  assign rd_val___1__h8921 =
	     rs1_val_bypassed__h3995 - _theResult___snd__h11047 ;
  assign rd_val___1__h8928 =
	     ((rs1_val_bypassed__h3995 ^ 64'h8000000000000000) <
	      (_theResult___snd__h11047 ^ 64'h8000000000000000)) ?
	       64'd1 :
	       64'd0 ;
  assign rd_val___1__h8935 =
	     (rs1_val_bypassed__h3995 < _theResult___snd__h11047) ?
	       64'd1 :
	       64'd0 ;
  assign rd_val___1__h8942 =
	     rs1_val_bypassed__h3995 ^ _theResult___snd__h11047 ;
  assign rd_val___1__h8949 =
	     rs1_val_bypassed__h3995 | _theResult___snd__h11047 ;
  assign rd_val__h10942 = rs1_val_bypassed__h3995 << shamt__h7745 ;
  assign rd_val__h10993 = rs1_val_bypassed__h3995 >> shamt__h7745 ;
  assign rd_val__h11015 =
	     rs1_val_bypassed__h3995 >> shamt__h7745 |
	     ~(64'hFFFFFFFFFFFFFFFF >> shamt__h7745) &
	     {64{rs1_val_bypassed__h3995[63]}} ;
  assign rd_val__h11611 =
	     (stage3_rg_stage3[69] && stage3_rg_full &&
	      stage3_rg_stage3[76] &&
	      stage3_rg_stage3_0_BITS_75_TO_71_9_EQ_stage1_r_ETC___d351) ?
	       stage3_rg_stage3[63:0] :
	       fpr_regfile$read_rs1 ;
  assign rd_val__h11674 =
	     (stage3_rg_stage3[69] && stage3_rg_full &&
	      stage3_rg_stage3[76] &&
	      stage3_rg_stage3_0_BITS_75_TO_71_9_EQ_stage1_r_ETC___d359) ?
	       stage3_rg_stage3[63:0] :
	       fpr_regfile$read_rs2 ;
  assign rd_val__h11735 =
	     (stage3_rg_stage3[69] && stage3_rg_full &&
	      stage3_rg_stage3[76] &&
	      stage3_rg_stage3[75:71] == stage1_rg_stage_input[129:125]) ?
	       stage3_rg_stage3[63:0] :
	       fpr_regfile$read_rs3 ;
  assign rd_val__h7365 =
	     (!stage3_rg_stage3[69] && stage3_rg_full &&
	      stage3_rg_stage3[76] &&
	      stage3_rg_stage3_0_BITS_75_TO_71_9_EQ_stage1_r_ETC___d351) ?
	       stage3_rg_stage3[63:0] :
	       gpr_regfile$read_rs1 ;
  assign rd_val__h7390 =
	     (!stage3_rg_stage3[69] && stage3_rg_full &&
	      stage3_rg_stage3[76] &&
	      stage3_rg_stage3_0_BITS_75_TO_71_9_EQ_stage1_r_ETC___d359) ?
	       stage3_rg_stage3[63:0] :
	       gpr_regfile$read_rs2 ;
  assign rg_cur_priv_8_EQ_0b11_84_OR_rg_cur_priv_8_EQ_0_ETC___d1329 =
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[20]) &&
	     stage1_rg_stage_input[104:98] == 7'b0001001 ||
	     stage1_rg_stage_input[144:140] != 5'd0 ||
	     stage1_rg_stage_input[139:135] != 5'd0 ||
	     stage1_rg_stage_input[87:76] != 12'b0 &&
	     stage1_rg_stage_input[87:76] != 12'b000000000001 ;
  assign rg_cur_priv_8_EQ_0b11_84_OR_rg_cur_priv_8_EQ_0_ETC___d911 =
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[21] ||
	      rg_cur_priv == 2'b0 && csr_regfile$read_misa[13]) &&
	     stage1_rg_stage_input[87:76] == 12'b000100000101 ;
  assign rg_state_7_EQ_2_961_AND_NOT_rg_halt_939_940_AN_ETC___d2186 =
	     rg_state == 4'd2 && !rg_halt &&
	     !csr_regfile$interrupt_pending[4] &&
	     !stage3_rg_full &&
	     IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 ==
	     2'd0 &&
	     stage1_rg_full &&
	     stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	     NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692 ;
  assign rg_state_7_EQ_2_961_AND_NOT_rg_halt_939_940_AN_ETC___d2237 =
	     rg_state_7_EQ_2_961_AND_NOT_rg_halt_939_940_AN_ETC___d2186 &&
	     (IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 ==
	      4'd8 ||
	      IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 ==
	      4'd9 ||
	      IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 ==
	      4'd10) &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788) ;
  assign rg_state_7_EQ_2_961_AND_NOT_rg_halt_939_940_AN_ETC___d2249 =
	     rg_state_7_EQ_2_961_AND_NOT_rg_halt_939_940_AN_ETC___d2186 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 ==
	     4'd6 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788) ;
  assign rg_state_7_EQ_2_961_AND_NOT_rg_halt_939_940_AN_ETC___d2261 =
	     rg_state_7_EQ_2_961_AND_NOT_rg_halt_939_940_AN_ETC___d2186 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 ==
	     4'd5 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788) ;
  assign rg_state_7_EQ_2_961_AND_NOT_stage3_rg_full_8_9_ETC___d2174 =
	     rg_state == 4'd2 && !stage3_rg_full &&
	     IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 ==
	     2'd3 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788) ;
  assign rg_state_7_EQ_2_961_AND_stage3_rg_full_8_OR_NO_ETC___d1971 =
	     rg_state == 4'd2 &&
	     (stage3_rg_full ||
	      IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 !=
	      2'd0 ||
	      stage1_rg_full ||
	      stageD_rg_full ||
	      stageF_rg_full) &&
	     (stage3_rg_full ||
	      IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 !=
	      2'd3) &&
	     stage3_rg_full_8_OR_NOT_IF_stage2_rg_full_03_T_ETC___d1969 ;
  assign rg_state_7_EQ_3_280_OR_rg_state_7_EQ_2_961_AND_ETC___d2284 =
	     (rg_state == 4'd3 ||
	      rg_state_7_EQ_2_961_AND_NOT_rg_halt_939_940_AN_ETC___d2186 &&
	      IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 ==
	      4'd12) &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788) ;
  assign rg_state_7_EQ_4_229_AND_NOT_stageF_rg_full_771_ETC___d2230 =
	     rg_state == 4'd4 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788) ;
  assign rg_state_7_EQ_8_4_AND_csr_regfile_wfi_resume___ETC___d2276 =
	     rg_state == 4'd8 && csr_regfile$wfi_resume &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788) ;
  assign rm__h8326 = x_out_data_to_stage2_rounding_mode__h7484 ;
  assign rs1__h12401 = { 2'b01, stageD_rg_data[73:71] } ;
  assign rs1_val__h25921 =
	     (stage1_rg_stage_input_BITS_263_TO_232__q28[14:12] == 3'b001) ?
	       x_out_data_to_stage2_val1__h7480 :
	       { 59'd0, stage1_rg_stage_input_BITS_263_TO_232__q28[19:15] } ;
  assign rs1_val_bypassed995_BITS_31_TO_0_MINUS_rs2_val_ETC__q11 =
	     rs1_val_bypassed__h3995[31:0] - rs2_val_bypassed__h4001[31:0] ;
  assign rs1_val_bypassed995_BITS_31_TO_0_PLUS_rs2_val__ETC__q10 =
	     rs1_val_bypassed__h3995[31:0] + rs2_val_bypassed__h4001[31:0] ;
  assign rs1_val_bypassed995_BITS_31_TO_0_SRL_rs2_val_b_ETC__q9 =
	     rs1_val_bypassed__h3995[31:0] >> rs2_val_bypassed__h4001[4:0] |
	     ~(32'hFFFFFFFF >> rs2_val_bypassed__h4001[4:0]) &
	     {32{rs1_val_bypassed995_BITS_31_TO_0__q8[31]}} ;
  assign rs1_val_bypassed995_BITS_31_TO_0__q8 =
	     rs1_val_bypassed__h3995[31:0] ;
  assign rs1_val_bypassed__h3995 =
	     (stage1_rg_stage_input[139:135] == 5'd0) ? 64'd0 : val__h7367 ;
  assign rs2_val_bypassed__h4001 =
	     (stage1_rg_stage_input[134:130] == 5'd0) ? 64'd0 : val__h7392 ;
  assign shamt__h7745 =
	     (stage1_rg_stage_input[151:145] == 7'b0010011) ?
	       stage1_rg_stage_input[81:76] :
	       rs2_val_bypassed__h4001[5:0] ;
  assign stage1_rg_full_00_AND_NOT_stage1_rg_stage_inpu_ETC___d2140 =
	     stage1_rg_full &&
	     (!stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 ||
	      NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d1948) &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 !=
	     4'd0 ;
  assign stage1_rg_full_00_AND_NOT_stage1_rg_stage_inpu_ETC___d2303 =
	     stage1_rg_full &&
	     (!stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 ||
	      NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d1948 ||
	      NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692) &&
	     IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 ==
	     2'd0 &&
	     !stage3_rg_full &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788) ;
  assign stage1_rg_full_00_AND_NOT_stage1_rg_stage_inpu_ETC___d871 =
	     stage1_rg_full &&
	     NOT_stage1_rg_stage_input_01_BIT_334_02_EQ_rg__ETC___d696 &&
	     (!stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 ||
	      IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d868) ;
  assign stage1_rg_stage_input_01_BITS_112_TO_110_30_EQ_ETC___d716 =
	     stage1_rg_stage_input[112:110] == 3'b0 &&
	     (stage1_rg_stage_input[151:145] != 7'b0110011 ||
	      !stage1_rg_stage_input[262]) ||
	     stage1_rg_stage_input[112:110] == 3'b0 &&
	     stage1_rg_stage_input[151:145] == 7'b0110011 &&
	     stage1_rg_stage_input[262] ||
	     stage1_rg_stage_input[112:110] == 3'b010 ||
	     stage1_rg_stage_input[112:110] == 3'b011 ||
	     stage1_rg_stage_input[112:110] == 3'b100 ||
	     stage1_rg_stage_input[112:110] == 3'b110 ||
	     stage1_rg_stage_input[112:110] == 3'b111 ;
  assign stage1_rg_stage_input_01_BITS_144_TO_140_82_EQ_ETC___d890 =
	     stage1_rg_stage_input[144:140] == 5'd0 &&
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[20]) &&
	     stage1_rg_stage_input[104:98] == 7'b0001001 ;
  assign stage1_rg_stage_input_01_BITS_151_TO_145_28_EQ_ETC___d709 =
	     stage1_rg_stage_input[151:145] == 7'b0110011 &&
	     stage1_rg_stage_input[104:98] == 7'b0000001 ||
	     stage1_rg_stage_input[151:145] == 7'b0111011 &&
	     stage1_rg_stage_input[104:98] == 7'b0000001 ||
	     (stage1_rg_stage_input[151:145] == 7'b0010011 ||
	      stage1_rg_stage_input[151:145] == 7'b0110011) &&
	     (stage1_rg_stage_input[112:110] == 3'b001 ||
	      stage1_rg_stage_input[112:110] == 3'b101) ;
  assign stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoc_ETC___d1297 =
	     stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	     NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 !=
	     4'd0 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 !=
	     4'd1 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 !=
	     4'd2 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 !=
	     4'd3 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 !=
	     4'd4 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 !=
	     4'd5 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 !=
	     4'd6 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 !=
	     4'd7 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 !=
	     4'd8 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 !=
	     4'd9 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 !=
	     4'd10 &&
	     IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 !=
	     4'd11 ;
  assign stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoc_ETC___d321 =
	     stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	     IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d262 ==
	     2'd1 &&
	     (IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d305 ||
	      IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d307) ;
  assign stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 =
	     stage1_rg_stage_input[334] == rg_epoch ;
  assign stage1_rg_stage_input_BITS_263_TO_232__q28 =
	     stage1_rg_stage_input[263:232] ;
  assign stage1_rg_stage_input_BITS_30_TO_10__q2 =
	     stage1_rg_stage_input[30:10] ;
  assign stage1_rg_stage_input_BITS_400_TO_337_PLUS_SEX_ETC__q3 =
	     stage1_rg_stage_input[400:337] +
	     { {43{stage1_rg_stage_input_BITS_30_TO_10__q2[20]}},
	       stage1_rg_stage_input_BITS_30_TO_10__q2 } ;
  assign stage1_rg_stage_input_BITS_63_TO_51__q1 =
	     stage1_rg_stage_input[63:51] ;
  assign stage1_rg_stage_input_BITS_75_TO_64__q7 =
	     stage1_rg_stage_input[75:64] ;
  assign stage1_rg_stage_input_BITS_87_TO_76__q24 =
	     stage1_rg_stage_input[87:76] ;
  assign stage3_rg_full_8_OR_NOT_IF_stage2_rg_full_03_T_ETC___d1969 =
	     stage3_rg_full ||
	     IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 !=
	     2'd0 ||
	     !stage1_rg_full ||
	     !stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 ||
	     IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d868 ;
  assign stage3_rg_stage3_0_BITS_75_TO_71_9_EQ_stage1_r_ETC___d351 =
	     stage3_rg_stage3[75:71] == stage1_rg_stage_input[139:135] ;
  assign stage3_rg_stage3_0_BITS_75_TO_71_9_EQ_stage1_r_ETC___d359 =
	     stage3_rg_stage3[75:71] == stage1_rg_stage_input[134:130] ;
  assign stageF_branch_predictor_RDY_predict_req__913_A_ETC___d1925 =
	     stageF_branch_predictor$RDY_predict_req &&
	     stageF_f_reset_rsps$EMPTY_N &&
	     stageD_f_reset_rsps$EMPTY_N &&
	     stage1_f_reset_rsps$EMPTY_N &&
	     stage2_f_reset_rsps$EMPTY_N &&
	     stage3_f_reset_rsps$EMPTY_N &&
	     f_reset_rsps$FULL_N ;
  assign stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1797 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788 &&
	     !near_mem$imem_exc ;
  assign stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1803 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788 &&
	     near_mem$imem_exc &&
	     near_mem$imem_exc_code == 4'd0 ;
  assign stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1807 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788 &&
	     near_mem$imem_exc &&
	     near_mem$imem_exc_code == 4'd1 ;
  assign stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1811 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788 &&
	     near_mem$imem_exc &&
	     near_mem$imem_exc_code == 4'd2 ;
  assign stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1815 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788 &&
	     near_mem$imem_exc &&
	     near_mem$imem_exc_code == 4'd3 ;
  assign stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1819 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788 &&
	     near_mem$imem_exc &&
	     near_mem$imem_exc_code == 4'd4 ;
  assign stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1823 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788 &&
	     near_mem$imem_exc &&
	     near_mem$imem_exc_code == 4'd5 ;
  assign stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1827 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788 &&
	     near_mem$imem_exc &&
	     near_mem$imem_exc_code == 4'd6 ;
  assign stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1831 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788 &&
	     near_mem$imem_exc &&
	     near_mem$imem_exc_code == 4'd7 ;
  assign stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1835 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788 &&
	     near_mem$imem_exc &&
	     near_mem$imem_exc_code == 4'd8 ;
  assign stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1839 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788 &&
	     near_mem$imem_exc &&
	     near_mem$imem_exc_code == 4'd9 ;
  assign stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1843 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788 &&
	     near_mem$imem_exc &&
	     near_mem$imem_exc_code == 4'd11 ;
  assign stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1847 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788 &&
	     near_mem$imem_exc &&
	     near_mem$imem_exc_code == 4'd12 ;
  assign stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1851 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788 &&
	     near_mem$imem_exc &&
	     near_mem$imem_exc_code == 4'd13 ;
  assign stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1855 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788 &&
	     near_mem$imem_exc &&
	     near_mem$imem_exc_code == 4'd15 ;
  assign sxl__h5383 =
	     (csr_regfile$read_misa[27:26] == 2'd2) ?
	       csr_regfile$read_mstatus[35:34] :
	       2'd0 ;
  assign tmp__h11190 =
	     rs1_val_bypassed__h3995[31:0] >> stage1_rg_stage_input[80:76] |
	     ~(32'hFFFFFFFF >> stage1_rg_stage_input[80:76]) &
	     {32{rs1_val_bypassed995_BITS_31_TO_0__q8[31]}} ;
  assign trap_info_tval__h10681 =
	     (stage1_rg_stage_input[151:145] != 7'b1100011 &&
	      stage1_rg_stage_input[151:145] != 7'b1101111 &&
	      stage1_rg_stage_input[151:145] != 7'b1100111 &&
	      (stage1_rg_stage_input[151:145] != 7'b1110011 ||
	       stage1_rg_stage_input[112:110] != 3'b0 ||
	       rg_cur_priv_8_EQ_0b11_84_OR_rg_cur_priv_8_EQ_0_ETC___d1329)) ?
	       { 32'd0, stage1_rg_stage_input[263:232] } :
	       CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q27 ;
  assign uxl__h5384 =
	     (csr_regfile$read_misa[27:26] == 2'd2) ?
	       csr_regfile$read_mstatus[33:32] :
	       2'd0 ;
  assign v32__h7861 = { stage1_rg_stage_input[50:31], 12'h0 } ;
  assign v__h20777 = rg_epoch + 1'd1 ;
  assign val__h7367 =
	     (IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d262 ==
	      2'd2 &&
	      IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d305) ?
	       x_out_bypass_rd_val__h7026 :
	       rd_val__h7365 ;
  assign val__h7392 =
	     (IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d262 ==
	      2'd2 &&
	      IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d307) ?
	       x_out_bypass_rd_val__h7026 :
	       rd_val__h7390 ;
  assign value__h10732 =
	     stage1_rg_stage_input[332] ?
	       stage1_rg_stage_input[327:264] :
	       trap_info_tval__h10681 ;
  assign x__h11112 =
	     rs1_val_bypassed__h3995[31:0] << stage1_rg_stage_input[80:76] ;
  assign x__h11165 =
	     rs1_val_bypassed__h3995[31:0] >> stage1_rg_stage_input[80:76] ;
  assign x__h11302 =
	     rs1_val_bypassed__h3995[31:0] << rs2_val_bypassed__h4001[4:0] ;
  assign x__h11347 =
	     rs1_val_bypassed__h3995[31:0] >> rs2_val_bypassed__h4001[4:0] ;
  assign x__h33033 =
	     csr_regfile_read_csr_mcycle__7_MINUS_rg_start__ETC___d2289[63:0] /
	     _theResult____h33032 ;
  assign x_out_data_to_stage1_instr__h11849 =
	     stageD_rg_data[165] ? stageD_rg_data[95:64] : instr___1__h11885 ;
  assign x_out_data_to_stage2_rd__h7478 =
	     stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 ?
	       data_to_stage2_rd__h7465 :
	       5'd0 ;
  assign x_out_data_to_stage2_rounding_mode__h7484 =
	     (stage1_rg_stage_input[112:110] == 3'b111) ?
	       csr_regfile$read_frm :
	       stage1_rg_stage_input[112:110] ;
  assign x_out_data_to_stage2_val2__h7481 =
	     (stage1_rg_stage_input[151:145] == 7'b1100011) ?
	       branch_target__h7598 :
	       IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d1243 ;
  assign x_out_data_to_stage2_val3__h7482 =
	     (IF_NOT_stage2_rg_full_03_36_OR_stage2_rg_stage_ETC___d284 ==
	      2'd2 &&
	      x_out_fbypass_rd__h7170 == stage1_rg_stage_input[129:125]) ?
	       x_out_fbypass_rd_val__h7171 :
	       rd_val__h11735 ;
  assign x_out_next_pc__h7429 =
	     IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d865 ?
	       data_to_stage2_addr__h7466 :
	       fall_through_pc__h7413 ;
  assign x_out_trap_info_exc_code__h10686 =
	     stage1_rg_stage_input[332] ?
	       stage1_rg_stage_input[331:328] :
	       alu_outputs_exc_code__h8369 ;
  assign y__h26718 = ~rs1_val__h26414 ;
  always@(stage2_rg_stage2 or near_mem$dmem_exc_code)
  begin
    case (stage2_rg_stage2[267:265])
      3'd1, 3'd2, 3'd4:
	  x_out_trap_info_exc_code__h6771 = near_mem$dmem_exc_code;
      default: x_out_trap_info_exc_code__h6771 = 4'd2;
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[267:265])
      3'd1, 3'd2, 3'd4: value__h6734 = stage2_rg_stage2[363:300];
      default: value__h6734 = stage2_rg_stage2[363:300];
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[267:265])
      3'd1, 3'd2, 3'd4: value__h6795 = stage2_rg_stage2[259:196];
      default: value__h6795 = 64'd0;
    endcase
  end
  always@(stage2_rg_stage2 or stage2_fbox$word_snd)
  begin
    case (stage2_rg_stage2[267:265])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  x_out_data_to_stage3_fpr_flags__h6491 = 5'd0;
      default: x_out_data_to_stage3_fpr_flags__h6491 = stage2_fbox$word_snd;
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[267:265])
      3'd0, 3'd1, 3'd4:
	  x_out_data_to_stage3_rd__h6488 = stage2_rg_stage2[264:260];
      3'd2: x_out_data_to_stage3_rd__h6488 = 5'd0;
      default: x_out_data_to_stage3_rd__h6488 = stage2_rg_stage2[264:260];
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[267:265])
      3'd0, 3'd1, 3'd4: x_out_bypass_rd__h7025 = stage2_rg_stage2[264:260];
      default: x_out_bypass_rd__h7025 = stage2_rg_stage2[264:260];
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[267:265])
      3'd1, 3'd4: x_out_fbypass_rd__h7170 = stage2_rg_stage2[264:260];
      default: x_out_fbypass_rd__h7170 = stage2_rg_stage2[264:260];
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$word_fst or
	  data_to_stage3_rd_val__h6442 or stage2_mbox$word)
  begin
    case (stage2_rg_stage2[267:265])
      3'd0: x_out_data_to_stage3_rd_val__h6492 = stage2_rg_stage2[195:132];
      3'd1, 3'd4:
	  x_out_data_to_stage3_rd_val__h6492 = data_to_stage3_rd_val__h6442;
      3'd3: x_out_data_to_stage3_rd_val__h6492 = stage2_mbox$word;
      default: x_out_data_to_stage3_rd_val__h6492 = stage2_fbox$word_fst;
    endcase
  end
  always@(stage2_rg_stage2 or
	  _theResult___fst_rd_val__h7015 or
	  _theResult___fst_rd_val__h7004 or stage2_mbox$word)
  begin
    case (stage2_rg_stage2[267:265])
      3'd0: x_out_bypass_rd_val__h7026 = stage2_rg_stage2[195:132];
      3'd1, 3'd4: x_out_bypass_rd_val__h7026 = _theResult___fst_rd_val__h7004;
      3'd3: x_out_bypass_rd_val__h7026 = stage2_mbox$word;
      default: x_out_bypass_rd_val__h7026 = _theResult___fst_rd_val__h7015;
    endcase
  end
  always@(stage2_rg_stage2 or
	  _theResult___snd_rd_val__h7162 or _theResult___snd_rd_val__h7156)
  begin
    case (stage2_rg_stage2[267:265])
      3'd1, 3'd4:
	  x_out_fbypass_rd_val__h7171 = _theResult___snd_rd_val__h7156;
      default: x_out_fbypass_rd_val__h7171 = _theResult___snd_rd_val__h7162;
    endcase
  end
  always@(stage1_rg_stage_input)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000011,
      7'b0000111,
      7'b0010011,
      7'b0010111,
      7'b0011011,
      7'b0110011,
      7'b0110111,
      7'b0111011,
      7'b1100111,
      7'b1101111:
	  data_to_stage2_rd__h7465 = stage1_rg_stage_input[144:140];
      7'b1100011: data_to_stage2_rd__h7465 = 5'd0;
      default: data_to_stage2_rd__h7465 = stage1_rg_stage_input[144:140];
    endcase
  end
  always@(stage2_rg_stage2 or
	  IF_stage2_fbox_valid__33_THEN_2_ELSE_1___d134 or
	  IF_near_mem_dmem_valid__27_THEN_IF_near_mem_dm_ETC___d130 or
	  IF_stage2_mbox_valid__31_THEN_2_ELSE_1___d132)
  begin
    case (stage2_rg_stage2[267:265])
      3'd0: CASE_stage2_rg_stage2_BITS_267_TO_265_0_2_1_IF_ETC__q4 = 2'd2;
      3'd1, 3'd2, 3'd4:
	  CASE_stage2_rg_stage2_BITS_267_TO_265_0_2_1_IF_ETC__q4 =
	      IF_near_mem_dmem_valid__27_THEN_IF_near_mem_dm_ETC___d130;
      3'd3:
	  CASE_stage2_rg_stage2_BITS_267_TO_265_0_2_1_IF_ETC__q4 =
	      IF_stage2_mbox_valid__31_THEN_2_ELSE_1___d132;
      default: CASE_stage2_rg_stage2_BITS_267_TO_265_0_2_1_IF_ETC__q4 =
		   IF_stage2_fbox_valid__33_THEN_2_ELSE_1___d134;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or
	  near_mem$dmem_valid or near_mem$dmem_exc or stage2_mbox$valid)
  begin
    case (stage2_rg_stage2[267:265])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_04_BITS_267_TO_265_05_EQ_1_ETC___d155 =
	      !near_mem$dmem_valid || near_mem$dmem_exc;
      3'd3:
	  IF_stage2_rg_stage2_04_BITS_267_TO_265_05_EQ_1_ETC___d155 =
	      !stage2_mbox$valid;
      default: IF_stage2_rg_stage2_04_BITS_267_TO_265_05_EQ_1_ETC___d155 =
		   !stage2_fbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or
	  near_mem$dmem_valid or near_mem$dmem_exc or stage2_mbox$valid)
  begin
    case (stage2_rg_stage2[267:265])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_04_BITS_267_TO_265_05_EQ_1_ETC___d165 =
	      near_mem$dmem_valid && !near_mem$dmem_exc;
      3'd3:
	  IF_stage2_rg_stage2_04_BITS_267_TO_265_05_EQ_1_ETC___d165 =
	      stage2_mbox$valid;
      default: IF_stage2_rg_stage2_04_BITS_267_TO_265_05_EQ_1_ETC___d165 =
		   stage2_fbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  IF_stage2_fbox_valid__33_THEN_2_ELSE_1___d134 or
	  IF_stage2_rg_stage2_04_BIT_3_94_OR_stage2_rg_s_ETC___d255 or
	  IF_stage2_mbox_valid__31_THEN_2_ELSE_1___d132)
  begin
    case (stage2_rg_stage2[267:265])
      3'd0: CASE_stage2_rg_stage2_BITS_267_TO_265_0_2_1_IF_ETC__q5 = 2'd2;
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_267_TO_265_0_2_1_IF_ETC__q5 =
	      IF_stage2_rg_stage2_04_BIT_3_94_OR_stage2_rg_s_ETC___d255;
      3'd2: CASE_stage2_rg_stage2_BITS_267_TO_265_0_2_1_IF_ETC__q5 = 2'd0;
      3'd3:
	  CASE_stage2_rg_stage2_BITS_267_TO_265_0_2_1_IF_ETC__q5 =
	      IF_stage2_mbox_valid__31_THEN_2_ELSE_1___d132;
      default: CASE_stage2_rg_stage2_BITS_267_TO_265_0_2_1_IF_ETC__q5 =
		   stage2_rg_stage2[3] ?
		     2'd0 :
		     IF_stage2_fbox_valid__33_THEN_2_ELSE_1___d134;
    endcase
  end
  always@(stage2_rg_stage2 or
	  IF_stage2_fbox_valid__33_THEN_2_ELSE_1___d134 or
	  IF_stage2_rg_stage2_04_BIT_3_94_THEN_IF_near_m_ETC___d279)
  begin
    case (stage2_rg_stage2[267:265])
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_267_TO_265_1_IF_sta_ETC__q6 =
	      IF_stage2_rg_stage2_04_BIT_3_94_THEN_IF_near_m_ETC___d279;
      3'd2, 3'd3:
	  CASE_stage2_rg_stage2_BITS_267_TO_265_1_IF_sta_ETC__q6 = 2'd0;
      default: CASE_stage2_rg_stage2_BITS_267_TO_265_1_IF_sta_ETC__q6 =
		   stage2_rg_stage2[3] ?
		     IF_stage2_fbox_valid__33_THEN_2_ELSE_1___d134 :
		     2'd0;
    endcase
  end
  always@(stage1_rg_stage_input or
	  _theResult___fst__h9137 or
	  rd_val___1__h11245 or
	  rd_val___1__h11299 or rd_val___1__h11344 or rd_val___1__h11293)
  begin
    case (stage1_rg_stage_input[97:88])
      10'b0: alu_outputs___1_val1__h7853 = rd_val___1__h11245;
      10'b0000000001: alu_outputs___1_val1__h7853 = rd_val___1__h11299;
      10'b0000000101: alu_outputs___1_val1__h7853 = rd_val___1__h11344;
      10'b0100000000: alu_outputs___1_val1__h7853 = rd_val___1__h11293;
      default: alu_outputs___1_val1__h7853 = _theResult___fst__h9137;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC___d369 or
	  IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC___d365 or
	  IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC___d367)
  begin
    case (stage1_rg_stage_input[112:110])
      3'b0:
	  IF_stage1_rg_stage_input_01_BITS_112_TO_110_30_ETC___d684 =
	      !IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC___d365;
      3'b001:
	  IF_stage1_rg_stage_input_01_BITS_112_TO_110_30_ETC___d684 =
	      IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC___d365;
      3'b100:
	  IF_stage1_rg_stage_input_01_BITS_112_TO_110_30_ETC___d684 =
	      !IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC___d367;
      3'b101:
	  IF_stage1_rg_stage_input_01_BITS_112_TO_110_30_ETC___d684 =
	      IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC___d367;
      3'b110:
	  IF_stage1_rg_stage_input_01_BITS_112_TO_110_30_ETC___d684 =
	      !IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC___d369;
      default: IF_stage1_rg_stage_input_01_BITS_112_TO_110_30_ETC___d684 =
		   stage1_rg_stage_input[112:110] != 3'b111 ||
		   IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC___d369;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC___d369 or
	  IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC___d365 or
	  IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC___d367)
  begin
    case (stage1_rg_stage_input[112:110])
      3'b0:
	  IF_stage1_rg_stage_input_01_BITS_112_TO_110_30_ETC___d376 =
	      IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC___d365;
      3'b001:
	  IF_stage1_rg_stage_input_01_BITS_112_TO_110_30_ETC___d376 =
	      !IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC___d365;
      3'b100:
	  IF_stage1_rg_stage_input_01_BITS_112_TO_110_30_ETC___d376 =
	      IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC___d367;
      3'b101:
	  IF_stage1_rg_stage_input_01_BITS_112_TO_110_30_ETC___d376 =
	      !IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC___d367;
      3'b110:
	  IF_stage1_rg_stage_input_01_BITS_112_TO_110_30_ETC___d376 =
	      IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC___d369;
      default: IF_stage1_rg_stage_input_01_BITS_112_TO_110_30_ETC___d376 =
		   stage1_rg_stage_input[112:110] == 3'b111 &&
		   !IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC___d369;
    endcase
  end
  always@(stage1_rg_stage_input or rm__h8326)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b1000011, 7'b1000111, 7'b1001011, 7'b1001111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q12 =
	      stage1_rg_stage_input[99:98] != 2'b0 &&
	      stage1_rg_stage_input[99:98] != 2'b01;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q12 =
		   stage1_rg_stage_input[104:98] != 7'h0 &&
		   stage1_rg_stage_input[104:98] != 7'h04 &&
		   stage1_rg_stage_input[104:98] != 7'h08 &&
		   (stage1_rg_stage_input[104:98] != 7'h10 ||
		    rm__h8326 != 3'd0) &&
		   (stage1_rg_stage_input[104:98] != 7'h10 ||
		    rm__h8326 != 3'd1) &&
		   (stage1_rg_stage_input[104:98] != 7'h10 ||
		    rm__h8326 != 3'd2) &&
		   (stage1_rg_stage_input[104:98] != 7'h60 ||
		    stage1_rg_stage_input[134:130] != 5'd0) &&
		   (stage1_rg_stage_input[104:98] != 7'h60 ||
		    stage1_rg_stage_input[134:130] != 5'd1) &&
		   (stage1_rg_stage_input[104:98] != 7'h60 ||
		    stage1_rg_stage_input[134:130] != 5'd2) &&
		   (stage1_rg_stage_input[104:98] != 7'h60 ||
		    stage1_rg_stage_input[134:130] != 5'd3) &&
		   (stage1_rg_stage_input[104:98] != 7'h68 ||
		    stage1_rg_stage_input[134:130] != 5'd0) &&
		   (stage1_rg_stage_input[104:98] != 7'h68 ||
		    stage1_rg_stage_input[134:130] != 5'd1) &&
		   (stage1_rg_stage_input[104:98] != 7'h68 ||
		    stage1_rg_stage_input[134:130] != 5'd2) &&
		   (stage1_rg_stage_input[104:98] != 7'h68 ||
		    stage1_rg_stage_input[134:130] != 5'd3) &&
		   (stage1_rg_stage_input[104:98] != 7'h14 ||
		    rm__h8326 != 3'd0) &&
		   (stage1_rg_stage_input[104:98] != 7'h14 ||
		    rm__h8326 != 3'd1) &&
		   (stage1_rg_stage_input[104:98] != 7'h50 ||
		    rm__h8326 != 3'd0) &&
		   (stage1_rg_stage_input[104:98] != 7'h50 ||
		    rm__h8326 != 3'd1) &&
		   (stage1_rg_stage_input[104:98] != 7'h50 ||
		    rm__h8326 != 3'd2) &&
		   (stage1_rg_stage_input[104:98] != 7'h70 ||
		    rm__h8326 != 3'd0) &&
		   (stage1_rg_stage_input[104:98] != 7'h78 ||
		    rm__h8326 != 3'd0) &&
		   (stage1_rg_stage_input[104:98] != 7'h70 ||
		    rm__h8326 != 3'd1) &&
		   stage1_rg_stage_input[104:98] != 7'b0000001 &&
		   stage1_rg_stage_input[104:98] != 7'h05 &&
		   stage1_rg_stage_input[104:98] != 7'b0001001 &&
		   (stage1_rg_stage_input[104:98] != 7'h11 ||
		    rm__h8326 != 3'd0) &&
		   (stage1_rg_stage_input[104:98] != 7'h11 ||
		    rm__h8326 != 3'd1) &&
		   (stage1_rg_stage_input[104:98] != 7'h11 ||
		    rm__h8326 != 3'd2) &&
		   (stage1_rg_stage_input[104:98] != 7'h61 ||
		    stage1_rg_stage_input[134:130] != 5'd0) &&
		   (stage1_rg_stage_input[104:98] != 7'h61 ||
		    stage1_rg_stage_input[134:130] != 5'd1) &&
		   (stage1_rg_stage_input[104:98] != 7'h61 ||
		    stage1_rg_stage_input[134:130] != 5'd2) &&
		   (stage1_rg_stage_input[104:98] != 7'h61 ||
		    stage1_rg_stage_input[134:130] != 5'd3) &&
		   (stage1_rg_stage_input[104:98] != 7'h69 ||
		    stage1_rg_stage_input[134:130] != 5'd0) &&
		   (stage1_rg_stage_input[104:98] != 7'h69 ||
		    stage1_rg_stage_input[134:130] != 5'd1) &&
		   (stage1_rg_stage_input[104:98] != 7'h69 ||
		    stage1_rg_stage_input[134:130] != 5'd2) &&
		   (stage1_rg_stage_input[104:98] != 7'h69 ||
		    stage1_rg_stage_input[134:130] != 5'd3) &&
		   (stage1_rg_stage_input[104:98] != 7'h21 ||
		    stage1_rg_stage_input[134:130] != 5'd0) &&
		   (stage1_rg_stage_input[104:98] != 7'h20 ||
		    stage1_rg_stage_input[134:130] != 5'd1) &&
		   (stage1_rg_stage_input[104:98] != 7'h15 ||
		    rm__h8326 != 3'd0) &&
		   (stage1_rg_stage_input[104:98] != 7'h15 ||
		    rm__h8326 != 3'd1) &&
		   (stage1_rg_stage_input[104:98] != 7'h51 ||
		    rm__h8326 != 3'd0) &&
		   (stage1_rg_stage_input[104:98] != 7'h51 ||
		    rm__h8326 != 3'd1) &&
		   (stage1_rg_stage_input[104:98] != 7'h51 ||
		    rm__h8326 != 3'd2) &&
		   (stage1_rg_stage_input[104:98] != 7'h71 ||
		    rm__h8326 != 3'd0) &&
		   (stage1_rg_stage_input[104:98] != 7'h79 ||
		    rm__h8326 != 3'd0) &&
		   (stage1_rg_stage_input[104:98] != 7'h71 ||
		    rm__h8326 != 3'd1);
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d663)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q13 =
	      stage1_rg_stage_input[112:110] != 3'b0 &&
	      stage1_rg_stage_input[112:110] != 3'b100 &&
	      stage1_rg_stage_input[112:110] != 3'b001 &&
	      stage1_rg_stage_input[112:110] != 3'b101 &&
	      stage1_rg_stage_input[112:110] != 3'b010 &&
	      stage1_rg_stage_input[112:110] != 3'b110 &&
	      stage1_rg_stage_input[112:110] != 3'b011;
      7'b0100111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q13 =
	      stage1_rg_stage_input[112:110] != 3'b0 &&
	      stage1_rg_stage_input[112:110] != 3'b001 &&
	      stage1_rg_stage_input[112:110] != 3'b010 &&
	      stage1_rg_stage_input[112:110] != 3'b011;
      7'b0101111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q13 =
	      stage1_rg_stage_input[109:105] != 5'b00010 &&
	      stage1_rg_stage_input[109:105] != 5'b00011 &&
	      stage1_rg_stage_input[109:105] != 5'b0 &&
	      stage1_rg_stage_input[109:105] != 5'b00001 &&
	      stage1_rg_stage_input[109:105] != 5'b01100 &&
	      stage1_rg_stage_input[109:105] != 5'b01000 &&
	      stage1_rg_stage_input[109:105] != 5'b00100 &&
	      stage1_rg_stage_input[109:105] != 5'b10000 &&
	      stage1_rg_stage_input[109:105] != 5'b11000 &&
	      stage1_rg_stage_input[109:105] != 5'b10100 &&
	      stage1_rg_stage_input[109:105] != 5'b11100 ||
	      stage1_rg_stage_input[112:110] != 3'b010 &&
	      stage1_rg_stage_input[112:110] != 3'b011;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q13 =
		   stage1_rg_stage_input[151:145] != 7'b1010011 &&
		   stage1_rg_stage_input[151:145] != 7'b1000011 &&
		   stage1_rg_stage_input[151:145] != 7'b1000111 &&
		   stage1_rg_stage_input[151:145] != 7'b1001011 &&
		   stage1_rg_stage_input[151:145] != 7'b1001111 ||
		   IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d663;
    endcase
  end
  always@(stage1_rg_stage_input or
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q13)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000011:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q14 =
	      stage1_rg_stage_input[112:110] != 3'b0 &&
	      stage1_rg_stage_input[112:110] != 3'b100 &&
	      stage1_rg_stage_input[112:110] != 3'b001 &&
	      stage1_rg_stage_input[112:110] != 3'b101 &&
	      stage1_rg_stage_input[112:110] != 3'b010 &&
	      stage1_rg_stage_input[112:110] != 3'b110 &&
	      stage1_rg_stage_input[112:110] != 3'b011;
      7'b0100011:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q14 =
	      stage1_rg_stage_input[112:110] != 3'b0 &&
	      stage1_rg_stage_input[112:110] != 3'b001 &&
	      stage1_rg_stage_input[112:110] != 3'b010 &&
	      stage1_rg_stage_input[112:110] != 3'b011;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q14 =
		   CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q13;
    endcase
  end
  always@(stage1_rg_stage_input or
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q14 or
	  NOT_stage1_rg_stage_input_01_BITS_112_TO_110_3_ETC___d412)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0010011, 7'b0110011:
	  IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d675 =
	      NOT_stage1_rg_stage_input_01_BITS_112_TO_110_3_ETC___d412;
      7'b0011011:
	  IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d675 =
	      stage1_rg_stage_input[112:110] != 3'b0 &&
	      (stage1_rg_stage_input[112:110] != 3'b001 ||
	       stage1_rg_stage_input[257]) &&
	      (stage1_rg_stage_input[112:110] != 3'b101 ||
	       stage1_rg_stage_input[257]);
      7'b0111011:
	  IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d675 =
	      stage1_rg_stage_input[97:88] != 10'b0 &&
	      stage1_rg_stage_input[97:88] != 10'b0100000000 &&
	      stage1_rg_stage_input[97:88] != 10'b0000000001 &&
	      stage1_rg_stage_input[97:88] != 10'b0000000101 &&
	      stage1_rg_stage_input[97:88] != 10'b0100000101;
      default: IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d675 =
		   stage1_rg_stage_input[151:145] != 7'b0110111 &&
		   stage1_rg_stage_input[151:145] != 7'b0010111 &&
		   CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q14;
    endcase
  end
  always@(stage1_rg_stage_input or rm__h8326)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b1000011, 7'b1000111, 7'b1001011, 7'b1001111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q15 =
	      stage1_rg_stage_input[99:98] == 2'b0 ||
	      stage1_rg_stage_input[99:98] == 2'b01;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q15 =
		   stage1_rg_stage_input[104:98] == 7'h0 ||
		   stage1_rg_stage_input[104:98] == 7'h04 ||
		   stage1_rg_stage_input[104:98] == 7'h08 ||
		   stage1_rg_stage_input[104:98] == 7'h10 &&
		   (rm__h8326 == 3'd0 || rm__h8326 == 3'd1 ||
		    rm__h8326 == 3'd2) ||
		   stage1_rg_stage_input[104:98] == 7'h60 &&
		   stage1_rg_stage_input[134:130] == 5'd0 ||
		   stage1_rg_stage_input[104:98] == 7'h60 &&
		   (stage1_rg_stage_input[134:130] == 5'd1 ||
		    stage1_rg_stage_input[134:130] == 5'd2 ||
		    stage1_rg_stage_input[134:130] == 5'd3) ||
		   stage1_rg_stage_input[104:98] == 7'h68 &&
		   (stage1_rg_stage_input[134:130] == 5'd0 ||
		    stage1_rg_stage_input[134:130] == 5'd1 ||
		    stage1_rg_stage_input[134:130] == 5'd2) ||
		   stage1_rg_stage_input[104:98] == 7'h68 &&
		   stage1_rg_stage_input[134:130] == 5'd3 ||
		   stage1_rg_stage_input[104:98] == 7'h14 &&
		   rm__h8326 == 3'd0 ||
		   stage1_rg_stage_input[104:98] == 7'h14 &&
		   rm__h8326 == 3'd1 ||
		   stage1_rg_stage_input[104:98] == 7'h50 &&
		   (rm__h8326 == 3'd0 || rm__h8326 == 3'd1) ||
		   stage1_rg_stage_input[104:98] == 7'h50 &&
		   rm__h8326 == 3'd2 ||
		   (stage1_rg_stage_input[104:98] == 7'h70 ||
		    stage1_rg_stage_input[104:98] == 7'h78) &&
		   rm__h8326 == 3'd0 ||
		   stage1_rg_stage_input[104:98] == 7'h70 &&
		   rm__h8326 == 3'd1 ||
		   stage1_rg_stage_input[104:98] == 7'b0000001 ||
		   stage1_rg_stage_input[104:98] == 7'h05 ||
		   stage1_rg_stage_input[104:98] == 7'b0001001 ||
		   stage1_rg_stage_input[104:98] == 7'h11 &&
		   (rm__h8326 == 3'd0 || rm__h8326 == 3'd1 ||
		    rm__h8326 == 3'd2) ||
		   stage1_rg_stage_input[104:98] == 7'h61 &&
		   (stage1_rg_stage_input[134:130] == 5'd0 ||
		    stage1_rg_stage_input[134:130] == 5'd1 ||
		    stage1_rg_stage_input[134:130] == 5'd2) ||
		   stage1_rg_stage_input[104:98] == 7'h61 &&
		   stage1_rg_stage_input[134:130] == 5'd3 ||
		   stage1_rg_stage_input[104:98] == 7'h69 &&
		   (stage1_rg_stage_input[134:130] == 5'd0 ||
		    stage1_rg_stage_input[134:130] == 5'd1) ||
		   stage1_rg_stage_input[104:98] == 7'h69 &&
		   (stage1_rg_stage_input[134:130] == 5'd2 ||
		    stage1_rg_stage_input[134:130] == 5'd3) ||
		   stage1_rg_stage_input[104:98] == 7'h21 &&
		   stage1_rg_stage_input[134:130] == 5'd0 ||
		   stage1_rg_stage_input[104:98] == 7'h20 &&
		   stage1_rg_stage_input[134:130] == 5'd1 ||
		   stage1_rg_stage_input[104:98] == 7'h15 &&
		   rm__h8326 == 3'd0 ||
		   stage1_rg_stage_input[104:98] == 7'h15 &&
		   rm__h8326 == 3'd1 ||
		   stage1_rg_stage_input[104:98] == 7'h51 &&
		   (rm__h8326 == 3'd0 || rm__h8326 == 3'd1) ||
		   stage1_rg_stage_input[104:98] == 7'h51 &&
		   rm__h8326 == 3'd2 ||
		   (stage1_rg_stage_input[104:98] == 7'h71 ||
		    stage1_rg_stage_input[104:98] == 7'h79) &&
		   rm__h8326 == 3'd0 ||
		   stage1_rg_stage_input[104:98] == 7'h71 &&
		   rm__h8326 == 3'd1;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d848)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q16 =
	      stage1_rg_stage_input[112:110] == 3'b0 ||
	      stage1_rg_stage_input[112:110] == 3'b100 ||
	      stage1_rg_stage_input[112:110] == 3'b001 ||
	      stage1_rg_stage_input[112:110] == 3'b101 ||
	      stage1_rg_stage_input[112:110] == 3'b010 ||
	      stage1_rg_stage_input[112:110] == 3'b110 ||
	      stage1_rg_stage_input[112:110] == 3'b011;
      7'b0100111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q16 =
	      stage1_rg_stage_input[112:110] == 3'b0 ||
	      stage1_rg_stage_input[112:110] == 3'b001 ||
	      stage1_rg_stage_input[112:110] == 3'b010 ||
	      stage1_rg_stage_input[112:110] == 3'b011;
      7'b0101111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q16 =
	      (stage1_rg_stage_input[109:105] == 5'b00010 ||
	       stage1_rg_stage_input[109:105] == 5'b00011 ||
	       stage1_rg_stage_input[109:105] == 5'b0 ||
	       stage1_rg_stage_input[109:105] == 5'b00001 ||
	       stage1_rg_stage_input[109:105] == 5'b01100 ||
	       stage1_rg_stage_input[109:105] == 5'b01000 ||
	       stage1_rg_stage_input[109:105] == 5'b00100 ||
	       stage1_rg_stage_input[109:105] == 5'b10000 ||
	       stage1_rg_stage_input[109:105] == 5'b11000 ||
	       stage1_rg_stage_input[109:105] == 5'b10100 ||
	       stage1_rg_stage_input[109:105] == 5'b11100) &&
	      (stage1_rg_stage_input[112:110] == 3'b010 ||
	       stage1_rg_stage_input[112:110] == 3'b011);
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q16 =
		   (stage1_rg_stage_input[151:145] == 7'b1010011 ||
		    stage1_rg_stage_input[151:145] == 7'b1000011 ||
		    stage1_rg_stage_input[151:145] == 7'b1000111 ||
		    stage1_rg_stage_input[151:145] == 7'b1001011 ||
		    stage1_rg_stage_input[151:145] == 7'b1001111) &&
		   IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d848;
    endcase
  end
  always@(stage1_rg_stage_input or
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q16)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000011:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q17 =
	      stage1_rg_stage_input[112:110] == 3'b0 ||
	      stage1_rg_stage_input[112:110] == 3'b100 ||
	      stage1_rg_stage_input[112:110] == 3'b001 ||
	      stage1_rg_stage_input[112:110] == 3'b101 ||
	      stage1_rg_stage_input[112:110] == 3'b010 ||
	      stage1_rg_stage_input[112:110] == 3'b110 ||
	      stage1_rg_stage_input[112:110] == 3'b011;
      7'b0100011:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q17 =
	      stage1_rg_stage_input[112:110] == 3'b0 ||
	      stage1_rg_stage_input[112:110] == 3'b001 ||
	      stage1_rg_stage_input[112:110] == 3'b010 ||
	      stage1_rg_stage_input[112:110] == 3'b011;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q17 =
		   CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q16;
    endcase
  end
  always@(stage1_rg_stage_input or
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q17 or
	  stage1_rg_stage_input_01_BITS_112_TO_110_30_EQ_ETC___d716)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0010011, 7'b0110011:
	  IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d860 =
	      stage1_rg_stage_input_01_BITS_112_TO_110_30_EQ_ETC___d716;
      7'b0011011:
	  IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d860 =
	      stage1_rg_stage_input[112:110] == 3'b0 ||
	      (stage1_rg_stage_input[112:110] == 3'b001 ||
	       stage1_rg_stage_input[112:110] == 3'b101) &&
	      !stage1_rg_stage_input[257];
      7'b0111011:
	  IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d860 =
	      stage1_rg_stage_input[97:88] == 10'b0 ||
	      stage1_rg_stage_input[97:88] == 10'b0100000000 ||
	      stage1_rg_stage_input[97:88] == 10'b0000000001 ||
	      stage1_rg_stage_input[97:88] == 10'b0000000101 ||
	      stage1_rg_stage_input[97:88] == 10'b0100000101;
      default: IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d860 =
		   stage1_rg_stage_input[151:145] == 7'b0110111 ||
		   stage1_rg_stage_input[151:145] == 7'b0010111 ||
		   CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q17;
    endcase
  end
  always@(rg_cur_priv)
  begin
    case (rg_cur_priv)
      2'b0: CASE_rg_cur_priv_0b0_8_0b1_9_11__q18 = 4'd8;
      2'b01: CASE_rg_cur_priv_0b0_8_0b1_9_11__q18 = 4'd9;
      default: CASE_rg_cur_priv_0b0_8_0b1_9_11__q18 = 4'd11;
    endcase
  end
  always@(stage1_rg_stage_input or CASE_rg_cur_priv_0b0_8_0b1_9_11__q18)
  begin
    case (stage1_rg_stage_input[87:76])
      12'b0:
	  CASE_stage1_rg_stage_input_BITS_87_TO_76_0b0_C_ETC__q19 =
	      CASE_rg_cur_priv_0b0_8_0b1_9_11__q18;
      12'b000000000001:
	  CASE_stage1_rg_stage_input_BITS_87_TO_76_0b0_C_ETC__q19 = 4'd3;
      default: CASE_stage1_rg_stage_input_BITS_87_TO_76_0b0_C_ETC__q19 = 4'd2;
    endcase
  end
  always@(stage1_rg_stage_input or alu_outputs___1_exc_code__h8211)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000011,
      7'b0001111,
      7'b0010011,
      7'b0010111,
      7'b0011011,
      7'b0100011,
      7'b0110011,
      7'b0110111,
      7'b0111011:
	  alu_outputs_exc_code__h8369 = 4'd2;
      7'b1100011, 7'b1100111, 7'b1101111: alu_outputs_exc_code__h8369 = 4'd0;
      7'b1110011:
	  alu_outputs_exc_code__h8369 = alu_outputs___1_exc_code__h8211;
      default: alu_outputs_exc_code__h8369 = 4'd2;
    endcase
  end
  always@(stage1_rg_stage_input or
	  rg_cur_priv or
	  IF_rg_cur_priv_8_EQ_0b11_84_OR_rg_cur_priv_8_E_ETC___d913)
  begin
    case (stage1_rg_stage_input[87:76])
      12'b0, 12'b000000000001:
	  IF_stage1_rg_stage_input_01_BITS_87_TO_76_92_E_ETC___d915 = 4'd12;
      default: IF_stage1_rg_stage_input_01_BITS_87_TO_76_92_E_ETC___d915 =
		   (rg_cur_priv == 2'b11 &&
		    stage1_rg_stage_input[87:76] == 12'b001100000010) ?
		     4'd8 :
		     IF_rg_cur_priv_8_EQ_0b11_84_OR_rg_cur_priv_8_E_ETC___d913;
    endcase
  end
  always@(stage1_rg_stage_input)
  begin
    case (stage1_rg_stage_input[112:110])
      3'b0: CASE_stage1_rg_stage_input_BITS_112_TO_110_0b0_ETC__q20 = 4'd5;
      3'b001: CASE_stage1_rg_stage_input_BITS_112_TO_110_0b0_ETC__q20 = 4'd6;
      default: CASE_stage1_rg_stage_input_BITS_112_TO_110_0b0_ETC__q20 =
		   4'd12;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_01_BITS_144_TO_140_82_ETC___d917)
  begin
    case (stage1_rg_stage_input[112:110])
      3'b0:
	  CASE_stage1_rg_stage_input_BITS_112_TO_110_0b0_ETC__q21 =
	      IF_stage1_rg_stage_input_01_BITS_144_TO_140_82_ETC___d917;
      3'b001, 3'b101:
	  CASE_stage1_rg_stage_input_BITS_112_TO_110_0b0_ETC__q21 = 4'd3;
      3'b010, 3'b011, 3'b110, 3'b111:
	  CASE_stage1_rg_stage_input_BITS_112_TO_110_0b0_ETC__q21 = 4'd4;
      3'd4: CASE_stage1_rg_stage_input_BITS_112_TO_110_0b0_ETC__q21 = 4'd12;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_NOT_stage1_rg_stage_input_01_BITS_112_TO_11_ETC___d878 or
	  CASE_stage1_rg_stage_input_BITS_112_TO_110_0b0_ETC__q20 or
	  IF_NOT_stage1_rg_stage_input_01_BITS_112_TO_11_ETC___d875 or
	  IF_NOT_stage1_rg_stage_input_01_BITS_112_TO_11_ETC___d879 or
	  IF_IF_stage1_rg_stage_input_01_BITS_151_TO_145_ETC___d925 or
	  CASE_stage1_rg_stage_input_BITS_112_TO_110_0b0_ETC__q21)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000011, 7'b0000111:
	  IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d937 =
	      IF_NOT_stage1_rg_stage_input_01_BITS_112_TO_11_ETC___d878;
      7'b0001111:
	  IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d937 =
	      CASE_stage1_rg_stage_input_BITS_112_TO_110_0b0_ETC__q20;
      7'b0010011, 7'b0110011:
	  IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d937 =
	      IF_NOT_stage1_rg_stage_input_01_BITS_112_TO_11_ETC___d875;
      7'b0010111, 7'b0110111:
	  IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d937 = 4'd1;
      7'b0011011:
	  IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d937 =
	      (stage1_rg_stage_input[112:110] != 3'b0 &&
	       (stage1_rg_stage_input[112:110] != 3'b001 ||
		stage1_rg_stage_input[257]) &&
	       (stage1_rg_stage_input[112:110] != 3'b101 ||
		stage1_rg_stage_input[257])) ?
		4'd12 :
		4'd1;
      7'b0100011, 7'b0100111:
	  IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d937 =
	      IF_NOT_stage1_rg_stage_input_01_BITS_112_TO_11_ETC___d879;
      7'b0101111:
	  IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d937 =
	      ((stage1_rg_stage_input[109:105] == 5'b00010 ||
		stage1_rg_stage_input[109:105] == 5'b00011 ||
		stage1_rg_stage_input[109:105] == 5'b0 ||
		stage1_rg_stage_input[109:105] == 5'b00001 ||
		stage1_rg_stage_input[109:105] == 5'b01100 ||
		stage1_rg_stage_input[109:105] == 5'b01000 ||
		stage1_rg_stage_input[109:105] == 5'b00100 ||
		stage1_rg_stage_input[109:105] == 5'b10000 ||
		stage1_rg_stage_input[109:105] == 5'b11000 ||
		stage1_rg_stage_input[109:105] == 5'b10100 ||
		stage1_rg_stage_input[109:105] == 5'b11100) &&
	       (stage1_rg_stage_input[112:110] == 3'b010 ||
		stage1_rg_stage_input[112:110] == 3'b011)) ?
		4'd1 :
		4'd12;
      7'b0111011:
	  IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d937 =
	      (stage1_rg_stage_input[97:88] != 10'b0 &&
	       stage1_rg_stage_input[97:88] != 10'b0100000000 &&
	       stage1_rg_stage_input[97:88] != 10'b0000000001 &&
	       stage1_rg_stage_input[97:88] != 10'b0000000101 &&
	       stage1_rg_stage_input[97:88] != 10'b0100000101) ?
		4'd12 :
		4'd1;
      7'b1000011, 7'b1000111, 7'b1001011, 7'b1001111, 7'b1010011:
	  IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d937 =
	      IF_IF_stage1_rg_stage_input_01_BITS_151_TO_145_ETC___d925;
      7'b1110011:
	  IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d937 =
	      CASE_stage1_rg_stage_input_BITS_112_TO_110_0b0_ETC__q21;
      default: IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d937 =
		   4'd12;
    endcase
  end
  always@(stage1_rg_stage_input or
	  stage1_rg_stage_input_01_BITS_151_TO_145_28_EQ_ETC___d709 or
	  IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d937 or
	  IF_stage1_rg_stage_input_01_BITS_112_TO_110_30_ETC___d376)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b1100011:
	  IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d940 =
	      (stage1_rg_stage_input[112:110] != 3'b0 &&
	       stage1_rg_stage_input[112:110] != 3'b001 &&
	       stage1_rg_stage_input[112:110] != 3'b100 &&
	       stage1_rg_stage_input[112:110] != 3'b101 &&
	       stage1_rg_stage_input[112:110] != 3'b110 &&
	       stage1_rg_stage_input[112:110] != 3'b111) ?
		4'd12 :
		(IF_stage1_rg_stage_input_01_BITS_112_TO_110_30_ETC___d376 ?
		   4'd2 :
		   4'd1);
      7'b1100111, 7'b1101111:
	  IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d940 = 4'd2;
      default: IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d940 =
		   stage1_rg_stage_input_01_BITS_151_TO_145_28_EQ_ETC___d709 ?
		     4'd1 :
		     IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d937;
    endcase
  end
  always@(stage1_rg_stage_input)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000011, 7'b0000111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q22 = 3'd1;
      7'b0010011, 7'b0010111, 7'b0011011, 7'b0110011, 7'b0110111, 7'b0111011:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q22 = 3'd0;
      7'b0100011, 7'b0100111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q22 = 3'd2;
      7'b0101111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q22 = 3'd4;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q22 = 3'd5;
    endcase
  end
  always@(stage1_rg_stage_input or
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q22)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b1100011, 7'b1100111, 7'b1101111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q23 = 3'd0;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q23 =
		   ((stage1_rg_stage_input[151:145] == 7'b0110011 ||
		     stage1_rg_stage_input[151:145] == 7'b0111011) &&
		    stage1_rg_stage_input[104:98] == 7'b0000001) ?
		     3'd3 :
		     CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q22;
    endcase
  end
  always@(stage1_rg_stage_input or
	  _theResult_____1_fst__h8960 or
	  rd_val___1__h8928 or
	  rd_val___1__h8935 or rd_val___1__h8942 or rd_val___1__h8949)
  begin
    case (stage1_rg_stage_input[112:110])
      3'b010: _theResult_____1_fst__h8932 = rd_val___1__h8928;
      3'b011: _theResult_____1_fst__h8932 = rd_val___1__h8935;
      3'b100: _theResult_____1_fst__h8932 = rd_val___1__h8942;
      3'b110: _theResult_____1_fst__h8932 = rd_val___1__h8949;
      default: _theResult_____1_fst__h8932 = _theResult_____1_fst__h8960;
    endcase
  end
  always@(stage1_rg_stage_input or
	  alu_outputs___1_addr__h7938 or
	  IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC___d1106 or
	  rs1_val_bypassed__h3995 or
	  alu_outputs___1_addr__h7618 or
	  alu_outputs___1_addr__h7672 or alu_outputs___1_addr__h7643)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000011, 7'b0000111:
	  x_out_data_to_stage2_addr__h7479 =
	      IF_stage1_rg_stage_input_01_BITS_139_TO_135_04_ETC___d1106;
      7'b0100011:
	  x_out_data_to_stage2_addr__h7479 = alu_outputs___1_addr__h7938;
      7'b0101111: x_out_data_to_stage2_addr__h7479 = rs1_val_bypassed__h3995;
      7'b1100011:
	  x_out_data_to_stage2_addr__h7479 = alu_outputs___1_addr__h7618;
      7'b1100111:
	  x_out_data_to_stage2_addr__h7479 = alu_outputs___1_addr__h7672;
      7'b1101111:
	  x_out_data_to_stage2_addr__h7479 = alu_outputs___1_addr__h7643;
      default: x_out_data_to_stage2_addr__h7479 = alu_outputs___1_addr__h7938;
    endcase
  end
  always@(stage1_rg_stage_input or
	  frs2_val_bypassed__h4011 or
	  alu_outputs___1_val2__h7940 or rs2_val_bypassed__h4001)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0100011, 7'b0100111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q26 =
	      alu_outputs___1_val2__h7940;
      7'b0101111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q26 =
	      rs2_val_bypassed__h4001;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q26 =
		   frs2_val_bypassed__h4011;
    endcase
  end
  always@(stage1_rg_stage_input or
	  NOT_rg_cur_priv_8_EQ_0b11_84_334_AND_NOT_rg_cu_ETC___d1340 or
	  data_to_stage2_addr__h7466)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b1100011, 7'b1100111, 7'b1101111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q27 =
	      data_to_stage2_addr__h7466;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q27 =
		   (stage1_rg_stage_input[151:145] == 7'b1110011 &&
		    stage1_rg_stage_input[112:110] == 3'b0 &&
		    NOT_rg_cur_priv_8_EQ_0b11_84_334_AND_NOT_rg_cu_ETC___d1340) ?
		     stage1_rg_stage_input[400:337] :
		     64'd0;
    endcase
  end
  always@(stage1_rg_stage_input or
	  alu_outputs___1_val1__h8342 or
	  alu_outputs___1_val1__h7801 or
	  alu_outputs___1_val1__h7891 or
	  alu_outputs___1_val1__h7827 or
	  alu_outputs___1_val1__h8239 or
	  alu_outputs___1_val1__h7872 or
	  alu_outputs___1_val1__h7853 or alu_outputs___1_val1__h8215)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0010011, 7'b0110011:
	  IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d1224 =
	      alu_outputs___1_val1__h7801;
      7'b0010111:
	  IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d1224 =
	      alu_outputs___1_val1__h7891;
      7'b0011011:
	  IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d1224 =
	      alu_outputs___1_val1__h7827;
      7'b0101111:
	  IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d1224 =
	      alu_outputs___1_val1__h8239;
      7'b0110111:
	  IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d1224 =
	      alu_outputs___1_val1__h7872;
      7'b0111011:
	  IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d1224 =
	      alu_outputs___1_val1__h7853;
      7'b1110011:
	  IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d1224 =
	      alu_outputs___1_val1__h8215;
      default: IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d1224 =
		   alu_outputs___1_val1__h8342;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d1226 or
	  IF_stage1_rg_stage_input_01_BIT_333_095_THEN_s_ETC___d1098)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b1100111, 7'b1101111:
	  x_out_data_to_stage2_val1__h7480 =
	      IF_stage1_rg_stage_input_01_BIT_333_095_THEN_s_ETC___d1098;
      default: x_out_data_to_stage2_val1__h7480 =
		   IF_stage1_rg_stage_input_01_BITS_151_TO_145_28_ETC___d1226;
    endcase
  end
  always@(stage1_rg_stage_input_BITS_263_TO_232__q28 or
	  x_out_data_to_stage2_val1__h7480)
  begin
    case (stage1_rg_stage_input_BITS_263_TO_232__q28[14:12])
      3'b010, 3'b011: rs1_val__h26414 = x_out_data_to_stage2_val1__h7480;
      default: rs1_val__h26414 =
		   { 59'd0,
		     stage1_rg_stage_input_BITS_263_TO_232__q28[19:15] };
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[267:265])
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_267_TO_265_1_stage2_ETC__q29 =
	      stage2_rg_stage2[3];
      default: CASE_stage2_rg_stage2_BITS_267_TO_265_1_stage2_ETC__q29 =
		   stage2_rg_stage2[267:265] != 3'd2 &&
		   stage2_rg_stage2[267:265] != 3'd3 &&
		   stage2_rg_stage2[3];
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[267:265])
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_267_TO_265_1_NOT_st_ETC__q30 =
	      !stage2_rg_stage2[3];
      default: CASE_stage2_rg_stage2_BITS_267_TO_265_1_NOT_st_ETC__q30 =
		   stage2_rg_stage2[267:265] == 3'd2 ||
		   stage2_rg_stage2[267:265] == 3'd3 ||
		   !stage2_rg_stage2[3];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_logdelay <= `BSV_ASSIGNMENT_DELAY 64'd0;
	cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_halt <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
	stage1_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage2_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage3_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stageD_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stageF_rg_epoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stageF_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cfg_logdelay$EN)
	  cfg_logdelay <= `BSV_ASSIGNMENT_DELAY cfg_logdelay$D_IN;
	if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (rg_halt$EN) rg_halt <= `BSV_ASSIGNMENT_DELAY rg_halt$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
	if (stage1_rg_full$EN)
	  stage1_rg_full <= `BSV_ASSIGNMENT_DELAY stage1_rg_full$D_IN;
	if (stage2_rg_full$EN)
	  stage2_rg_full <= `BSV_ASSIGNMENT_DELAY stage2_rg_full$D_IN;
	if (stage3_rg_full$EN)
	  stage3_rg_full <= `BSV_ASSIGNMENT_DELAY stage3_rg_full$D_IN;
	if (stageD_rg_full$EN)
	  stageD_rg_full <= `BSV_ASSIGNMENT_DELAY stageD_rg_full$D_IN;
	if (stageF_rg_epoch$EN)
	  stageF_rg_epoch <= `BSV_ASSIGNMENT_DELAY stageF_rg_epoch$D_IN;
	if (stageF_rg_full$EN)
	  stageF_rg_full <= `BSV_ASSIGNMENT_DELAY stageF_rg_full$D_IN;
      end
    if (imem_rg_f3$EN) imem_rg_f3 <= `BSV_ASSIGNMENT_DELAY imem_rg_f3$D_IN;
    if (imem_rg_instr_15_0$EN)
      imem_rg_instr_15_0 <= `BSV_ASSIGNMENT_DELAY imem_rg_instr_15_0$D_IN;
    if (imem_rg_mstatus_MXR$EN)
      imem_rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY imem_rg_mstatus_MXR$D_IN;
    if (imem_rg_pc$EN) imem_rg_pc <= `BSV_ASSIGNMENT_DELAY imem_rg_pc$D_IN;
    if (imem_rg_priv$EN)
      imem_rg_priv <= `BSV_ASSIGNMENT_DELAY imem_rg_priv$D_IN;
    if (imem_rg_satp$EN)
      imem_rg_satp <= `BSV_ASSIGNMENT_DELAY imem_rg_satp$D_IN;
    if (imem_rg_sstatus_SUM$EN)
      imem_rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY imem_rg_sstatus_SUM$D_IN;
    if (rg_cur_priv$EN) rg_cur_priv <= `BSV_ASSIGNMENT_DELAY rg_cur_priv$D_IN;
    if (rg_epoch$EN) rg_epoch <= `BSV_ASSIGNMENT_DELAY rg_epoch$D_IN;
    if (rg_next_pc$EN) rg_next_pc <= `BSV_ASSIGNMENT_DELAY rg_next_pc$D_IN;
    if (rg_start_CPI_cycles$EN)
      rg_start_CPI_cycles <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_cycles$D_IN;
    if (rg_start_CPI_instrs$EN)
      rg_start_CPI_instrs <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_instrs$D_IN;
    if (stage1_rg_stage_input$EN)
      stage1_rg_stage_input <= `BSV_ASSIGNMENT_DELAY
	  stage1_rg_stage_input$D_IN;
    if (stage2_rg_stage2$EN)
      stage2_rg_stage2 <= `BSV_ASSIGNMENT_DELAY stage2_rg_stage2$D_IN;
    if (stage3_rg_stage3$EN)
      stage3_rg_stage3 <= `BSV_ASSIGNMENT_DELAY stage3_rg_stage3$D_IN;
    if (stageD_rg_data$EN)
      stageD_rg_data <= `BSV_ASSIGNMENT_DELAY stageD_rg_data$D_IN;
    if (stageF_rg_priv$EN)
      stageF_rg_priv <= `BSV_ASSIGNMENT_DELAY stageF_rg_priv$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_logdelay = 64'hAAAAAAAAAAAAAAAA;
    cfg_verbosity = 4'hA;
    imem_rg_f3 = 3'h2;
    imem_rg_instr_15_0 = 16'hAAAA;
    imem_rg_mstatus_MXR = 1'h0;
    imem_rg_pc = 64'hAAAAAAAAAAAAAAAA;
    imem_rg_priv = 2'h2;
    imem_rg_satp = 64'hAAAAAAAAAAAAAAAA;
    imem_rg_sstatus_SUM = 1'h0;
    rg_cur_priv = 2'h2;
    rg_epoch = 1'h0;
    rg_halt = 1'h0;
    rg_next_pc = 64'hAAAAAAAAAAAAAAAA;
    rg_start_CPI_cycles = 64'hAAAAAAAAAAAAAAAA;
    rg_start_CPI_instrs = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 4'hA;
    stage1_rg_full = 1'h0;
    stage1_rg_stage_input =
	401'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stage2_rg_full = 1'h0;
    stage2_rg_stage2 =
	366'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stage3_rg_full = 1'h0;
    stage3_rg_stage3 = 175'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stageD_rg_data =
	233'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stageD_rg_full = 1'h0;
    stageF_rg_epoch = 1'h0;
    stageF_rg_full = 1'h0;
    stageF_rg_priv = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("%0d: Pipeline State:  minstret:%0d  cur_priv:%0d  mstatus:%0x  epoch:%0d",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$read_csr_minstret,
		 rg_cur_priv,
		 csr_regfile$read_mstatus,
		 rg_epoch);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write("MStatus{",
	       "sd:%0d",
	       csr_regfile$read_mstatus[14:13] == 2'h3 ||
	       csr_regfile$read_mstatus[16:15] == 2'h3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && csr_regfile$read_misa[27:26] == 2'd2)
	$write(" sxl:%0d uxl:%0d", sxl__h5383, uxl__h5384);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && csr_regfile$read_misa[27:26] != 2'd2)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tsr:%0d", csr_regfile$read_mstatus[22]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tw:%0d", csr_regfile$read_mstatus[21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tvm:%0d", csr_regfile$read_mstatus[20]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mxr:%0d", csr_regfile$read_mstatus[19]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" sum:%0d", csr_regfile$read_mstatus[18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mprv:%0d", csr_regfile$read_mstatus[17]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" xs:%0d", csr_regfile$read_mstatus[16:15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" fs:%0d", csr_regfile$read_mstatus[14:13]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mpp:%0d", csr_regfile$read_mstatus[12:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" spp:%0d", csr_regfile$read_mstatus[8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" pies:%0d_%0d%0d",
	       csr_regfile$read_mstatus[7],
	       csr_regfile$read_mstatus[5],
	       csr_regfile$read_mstatus[4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" ies:%0d_%0d%0d",
	       csr_regfile$read_mstatus[3],
	       csr_regfile$read_mstatus[1],
	       csr_regfile$read_mstatus[0]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("    Stage3: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Output_Stage3");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_full) $write(" PIPE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage3_rg_full) $write(" EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        Bypass  to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Bypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (stage3_rg_stage3[69] || !stage3_rg_full || !stage3_rg_stage3[76]))
	$write("Rd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage3_rg_stage3[69] &&
	  stage3_rg_full &&
	  stage3_rg_stage3[76])
	$write("Rd %0d ", stage3_rg_stage3[75:71]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (stage3_rg_stage3[69] || !stage3_rg_full || !stage3_rg_stage3[76]))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage3_rg_stage3[69] &&
	  stage3_rg_full &&
	  stage3_rg_stage3[76])
	$write("rd_val:%h", stage3_rg_stage3[63:0]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        FBypass to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("FBypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage3_rg_stage3[69] || !stage3_rg_full || !stage3_rg_stage3[76]))
	$write("FRd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_stage3[69] &&
	  stage3_rg_full &&
	  stage3_rg_stage3[76])
	$write("FRd %0d ", stage3_rg_stage3[75:71]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage3_rg_stage3[69] || !stage3_rg_full || !stage3_rg_stage3[76]))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_stage3[69] &&
	  stage3_rg_full &&
	  stage3_rg_stage3[76])
	$write("frd_val:%h", stage3_rg_stage3[63:0]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    Stage2: pc 0x%08h instr 0x%08h priv %0d",
		 stage2_rg_stage2[363:300],
		 stage2_rg_stage2[299:268],
		 stage2_rg_stage2[365:364]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd0)
	$write("Output_Stage2", " EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd1)
	$write("Output_Stage2", " BUSY: pc:%0h", stage2_rg_stage2[363:300]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd3)
	$write("Output_Stage2", " NONPIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd0 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd1 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd3)
	$write("Output_Stage2", " PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd0 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd1 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd3)
	$write("data_to_Stage3 {pc:%h  instr:%h  priv:%0d\n",
	       stage2_rg_stage2[363:300],
	       stage2_rg_stage2[299:268],
	       stage2_rg_stage2[365:364]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd0 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd1 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd3)
	$write("        rd_valid:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd0 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd1 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd3 &&
	  stage2_rg_stage2[267:265] != 3'd0 &&
	  IF_stage2_rg_stage2_04_BITS_267_TO_265_05_EQ_1_ETC___d155)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd0 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd1 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd3 &&
	  (stage2_rg_stage2[267:265] == 3'd0 ||
	   IF_stage2_rg_stage2_04_BITS_267_TO_265_05_EQ_1_ETC___d165))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd0 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd1 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd3 &&
	  stage2_rg_stage2[267:265] != 3'd0 &&
	  stage2_rg_stage2[267:265] != 3'd1 &&
	  stage2_rg_stage2[267:265] != 3'd4 &&
	  stage2_rg_stage2[267:265] != 3'd2 &&
	  stage2_rg_stage2[267:265] != 3'd3)
	$write("  fflags: %05b",
	       "'h%h",
	       x_out_data_to_stage3_fpr_flags__h6491);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd0 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd1 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd3 &&
	  (stage2_rg_stage2[267:265] == 3'd0 ||
	   stage2_rg_stage2[267:265] == 3'd1 ||
	   stage2_rg_stage2[267:265] == 3'd4 ||
	   stage2_rg_stage2[267:265] == 3'd2 ||
	   stage2_rg_stage2[267:265] == 3'd3))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd0 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd1 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd3 &&
	  stage2_rg_stage2[267:265] != 3'd0 &&
	  CASE_stage2_rg_stage2_BITS_267_TO_265_1_stage2_ETC__q29)
	$write("  frd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h6488,
	       x_out_data_to_stage3_rd_val__h6492);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd0 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd1 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd3 &&
	  (stage2_rg_stage2[267:265] == 3'd0 ||
	   CASE_stage2_rg_stage2_BITS_267_TO_265_1_NOT_st_ETC__q30))
	$write("  grd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h6488,
	       x_out_data_to_stage3_rd_val__h6492);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd3)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd0 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd1 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd3)
	$write("'h%h", value__h6734);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd0 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd1 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd3)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd0 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd1 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd3)
	$write("'h%h", x_out_trap_info_exc_code__h6771);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd0 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd1 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd3)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd0 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd1 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd3)
	$write("'h%h", value__h6795, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd0 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd1 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd3)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd0 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd1 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd3)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd0 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd1 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd3)
	$write("'h%h", value__h6734);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd0 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd1 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd3)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd0 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd1 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd3)
	$write("'h%h", x_out_trap_info_exc_code__h6771);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd0 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd1 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd3)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd0 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd1 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd3)
	$write("'h%h", value__h6795, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd0 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd1 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        Bypass  to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Bypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d262 == 2'd0)
	$write("Rd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d262 != 2'd0)
	$write("Rd %0d ", x_out_bypass_rd__h7025);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d262 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d262 == 2'd1)
	$write("-");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d262 != 2'd0 &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d262 != 2'd1)
	$write("rd_val:%h", x_out_bypass_rd_val__h7026);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        FBypass to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("FBypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_NOT_stage2_rg_full_03_36_OR_stage2_rg_stage_ETC___d284 == 2'd0)
	$write("FRd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_NOT_stage2_rg_full_03_36_OR_stage2_rg_stage_ETC___d284 != 2'd0)
	$write("FRd %0d ", x_out_fbypass_rd__h7170);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_NOT_stage2_rg_full_03_36_OR_stage2_rg_stage_ETC___d284 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_NOT_stage2_rg_full_03_36_OR_stage2_rg_stage_ETC___d284 == 2'd1)
	$write("-");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_NOT_stage2_rg_full_03_36_OR_stage2_rg_stage_ETC___d284 != 2'd0 &&
	  IF_NOT_stage2_rg_full_03_36_OR_stage2_rg_stage_ETC___d284 != 2'd1)
	$write("frd_val:%h", x_out_fbypass_rd_val__h7171);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    Stage1: pc 0x%08h instr 0x%08h priv %0d",
		 stage1_rg_stage_input[400:337],
		 stage1_rg_stage_input[263:232],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoc_ETC___d321)
	$write("Output_Stage1",
	       " BUSY pc:%h",
	       stage1_rg_stage_input[400:337]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	  NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692)
	$write("Output_Stage1",
	       " NONPIPE: pc:%h",
	       stage1_rg_stage_input[400:337]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_00_AND_NOT_stage1_rg_stage_inpu_ETC___d871)
	$write("Output_Stage1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full)
	$write("Output_Stage1", " EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoc_ETC___d321)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	  NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_00_AND_NOT_stage1_rg_stage_inpu_ETC___d871)
	$write(" PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoc_ETC___d321)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	  NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_01_BIT_334_02_EQ_rg__ETC___d696 &&
	  (!stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 ||
	   IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d868) &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 == 4'd0)
	$write("CONTROL_DISCARD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_01_BIT_334_02_EQ_rg__ETC___d696 &&
	  (!stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 ||
	   IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d868) &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 == 4'd1)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_01_BIT_334_02_EQ_rg__ETC___d696 &&
	  (!stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 ||
	   IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d868) &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 == 4'd2)
	$write("CONTROL_BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_01_BIT_334_02_EQ_rg__ETC___d696 &&
	  (!stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 ||
	   IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d868) &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 == 4'd3)
	$write("CONTROL_CSRR_W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_01_BIT_334_02_EQ_rg__ETC___d696 &&
	  (!stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 ||
	   IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d868) &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 == 4'd4)
	$write("CONTROL_CSRR_S_or_C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_01_BIT_334_02_EQ_rg__ETC___d696 &&
	  (!stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 ||
	   IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d868) &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 == 4'd5)
	$write("CONTROL_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_01_BIT_334_02_EQ_rg__ETC___d696 &&
	  (!stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 ||
	   IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d868) &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 == 4'd6)
	$write("CONTROL_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_01_BIT_334_02_EQ_rg__ETC___d696 &&
	  (!stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 ||
	   IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d868) &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 == 4'd7)
	$write("CONTROL_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_01_BIT_334_02_EQ_rg__ETC___d696 &&
	  (!stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 ||
	   IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d868) &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 == 4'd8)
	$write("CONTROL_MRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_01_BIT_334_02_EQ_rg__ETC___d696 &&
	  (!stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 ||
	   IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d868) &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 == 4'd9)
	$write("CONTROL_SRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_01_BIT_334_02_EQ_rg__ETC___d696 &&
	  (!stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 ||
	   IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d868) &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 == 4'd10)
	$write("CONTROL_URET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_01_BIT_334_02_EQ_rg__ETC___d696 &&
	  (!stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 ||
	   IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d868) &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 == 4'd11)
	$write("CONTROL_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_01_BIT_334_02_EQ_rg__ETC___d696 &&
	  NOT_stage1_rg_stage_input_01_BIT_334_02_EQ_rg__ETC___d1016)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoc_ETC___d321)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	  NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_00_AND_NOT_stage1_rg_stage_inpu_ETC___d871)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoc_ETC___d321)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	  NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_00_AND_NOT_stage1_rg_stage_inpu_ETC___d871)
	$write("data_to_Stage 2 {pc:%h  instr:%h  priv:%0d\n",
	       stage1_rg_stage_input[400:337],
	       stage1_rg_stage_input[263:232],
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoc_ETC___d321)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	  NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_00_AND_NOT_stage1_rg_stage_inpu_ETC___d871)
	$write("            op_stage2:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoc_ETC___d321)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	  NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_01_BIT_334_02_EQ_rg__ETC___d696 &&
	  (!stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 ||
	   IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d868) &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d1037 == 3'd0)
	$write("OP_Stage2_ALU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_01_BIT_334_02_EQ_rg__ETC___d696 &&
	  (!stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 ||
	   IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d868) &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d1037 == 3'd1)
	$write("OP_Stage2_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_01_BIT_334_02_EQ_rg__ETC___d696 &&
	  (!stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 ||
	   IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d868) &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d1037 == 3'd2)
	$write("OP_Stage2_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_01_BIT_334_02_EQ_rg__ETC___d696 &&
	  (!stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 ||
	   IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d868) &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d1037 == 3'd3)
	$write("OP_Stage2_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_01_BIT_334_02_EQ_rg__ETC___d696 &&
	  (!stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 ||
	   IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d868) &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d1037 == 3'd4)
	$write("OP_Stage2_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_01_BIT_334_02_EQ_rg__ETC___d696 &&
	  (!stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 ||
	   IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d868) &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d1037 !=
	  3'd0 &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d1037 !=
	  3'd1 &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d1037 !=
	  3'd2 &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d1037 !=
	  3'd3 &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d1037 != 3'd4)
	$write("OP_Stage2_FD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoc_ETC___d321)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	  NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_00_AND_NOT_stage1_rg_stage_inpu_ETC___d871)
	$write("  rd:%0d\n", x_out_data_to_stage2_rd__h7478);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoc_ETC___d321)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	  NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_00_AND_NOT_stage1_rg_stage_inpu_ETC___d871)
	$write("            addr:%h  val1:%h  val2:%h  val3:%h}",
	       x_out_data_to_stage2_addr__h7479,
	       x_out_data_to_stage2_val1__h7480,
	       x_out_data_to_stage2_val2__h7481,
	       x_out_data_to_stage2_val3__h7482);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoc_ETC___d321)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	  NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_00_AND_NOT_stage1_rg_stage_inpu_ETC___d871)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoc_ETC___d321)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	  NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692 &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 == 4'd0)
	$write("CONTROL_DISCARD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	  NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692 &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 == 4'd1)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	  NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692 &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 == 4'd2)
	$write("CONTROL_BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	  NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692 &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 == 4'd3)
	$write("CONTROL_CSRR_W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	  NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692 &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 == 4'd4)
	$write("CONTROL_CSRR_S_or_C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	  NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692 &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 == 4'd5)
	$write("CONTROL_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	  NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692 &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 == 4'd6)
	$write("CONTROL_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	  NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692 &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 == 4'd7)
	$write("CONTROL_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	  NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692 &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 == 4'd8)
	$write("CONTROL_MRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	  NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692 &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 == 4'd9)
	$write("CONTROL_SRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	  NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692 &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 == 4'd10)
	$write("CONTROL_URET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	  NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692 &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 == 4'd11)
	$write("CONTROL_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoc_ETC___d1297)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_00_AND_NOT_stage1_rg_stage_inpu_ETC___d871)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoc_ETC___d321)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	  NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_00_AND_NOT_stage1_rg_stage_inpu_ETC___d871)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoc_ETC___d321)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	  NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_00_AND_NOT_stage1_rg_stage_inpu_ETC___d871)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoc_ETC___d321)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	  NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692)
	$write("'h%h", stage1_rg_stage_input[400:337]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_00_AND_NOT_stage1_rg_stage_inpu_ETC___d871)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoc_ETC___d321)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	  NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_00_AND_NOT_stage1_rg_stage_inpu_ETC___d871)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoc_ETC___d321)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	  NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692)
	$write("'h%h", x_out_trap_info_exc_code__h10686);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_00_AND_NOT_stage1_rg_stage_inpu_ETC___d871)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoc_ETC___d321)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	  NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_00_AND_NOT_stage1_rg_stage_inpu_ETC___d871)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoc_ETC___d321)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoch_0___d303 &&
	  NOT_IF_stage2_rg_full_03_THEN_IF_stage2_rg_sta_ETC___d692)
	$write("'h%h", value__h10732, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_00_AND_NOT_stage1_rg_stage_inpu_ETC___d871)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_01_BIT_334_02_EQ_rg_epoc_ETC___d321)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_01_BIT_334_02_EQ_rg__ETC___d696 &&
	  !IF_IF_stage1_rg_stage_input_01_BITS_151_TO_145_ETC___d1355)
	$write("\n        redirect next_pc:%h", x_out_next_pc__h7429);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_01_BIT_334_02_EQ_rg__ETC___d696 &&
	  IF_IF_stage1_rg_stage_input_01_BITS_151_TO_145_ETC___d1355)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    StageD: pc 0x%08h instr 0x%08h priv %0d epoch %0d",
		 stageD_rg_data[232:169],
		 x_out_data_to_stage1_instr__h11849,
		 stageD_rg_data[167:166],
		 stageD_rg_data[168]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Output_StageD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full) $write(" PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write(" EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && stageD_rg_data[164])
	$write("data_to_Stage1 {pc:%0h  priv:%0d  epoch:%0d",
	       stageD_rg_data[232:169],
	       stageD_rg_data[167:166],
	       stageD_rg_data[168]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && !stageD_rg_data[164])
	$write("data_to_Stage1 {pc:%0h  priv:%0d  epoch:%0d",
	       stageD_rg_data[232:169],
	       stageD_rg_data[167:166],
	       stageD_rg_data[168]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && stageD_rg_data[164])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  !stageD_rg_data[164] &&
	  stageD_rg_data[165])
	$write("  instr_C:%0h", stageD_rg_data[79:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  !stageD_rg_data[164] &&
	  !stageD_rg_data[165])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && stageD_rg_data[164])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && !stageD_rg_data[164])
	$write("  instr:%0h  pred_pc:%0h",
	       x_out_data_to_stage1_instr__h11849,
	       stageD_rg_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && stageD_rg_data[164])
	$write("  ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && !stageD_rg_data[164])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd0)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd1)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd2)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd3)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd4)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd5)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd6)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd7)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd8)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd9)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd11)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd12)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd13)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd15)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] != 4'd0 &&
	  stageD_rg_data[163:160] != 4'd1 &&
	  stageD_rg_data[163:160] != 4'd2 &&
	  stageD_rg_data[163:160] != 4'd3 &&
	  stageD_rg_data[163:160] != 4'd4 &&
	  stageD_rg_data[163:160] != 4'd5 &&
	  stageD_rg_data[163:160] != 4'd6 &&
	  stageD_rg_data[163:160] != 4'd7 &&
	  stageD_rg_data[163:160] != 4'd8 &&
	  stageD_rg_data[163:160] != 4'd9 &&
	  stageD_rg_data[163:160] != 4'd11 &&
	  stageD_rg_data[163:160] != 4'd12 &&
	  stageD_rg_data[163:160] != 4'd13 &&
	  stageD_rg_data[163:160] != 4'd15)
	$write("unknown trap Exc_Code %d", stageD_rg_data[163:160]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && !stageD_rg_data[164])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && stageD_rg_data[164])
	$write(" tval %0h", stageD_rg_data[159:96]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && !stageD_rg_data[164])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    StageF: pc 0x%08h instr 0x%08h priv %0d epoch %0d",
		 imem_rg_pc,
		 d_instr__h19473,
		 stageF_rg_priv,
		 stageF_rg_epoch);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Output_StageF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  (!near_mem$imem_valid ||
	   NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_75_ETC___d1782))
	$write(" BUSY: pc:%h", imem_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788)
	$write(" PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageF_rg_full) $write(" EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  (!near_mem$imem_valid ||
	   NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_75_ETC___d1782))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788)
	$write("data_to_StageD {pc:%h  priv:%0d  epoch:%0d",
	       imem_rg_pc,
	       stageF_rg_priv,
	       stageF_rg_epoch);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageF_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  (!near_mem$imem_valid ||
	   NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_75_ETC___d1782))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788 &&
	  near_mem$imem_exc)
	$write("  ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1797)
	$write("  instr:%h  pred_pc:%h",
	       d_instr__h19473,
	       stageF_branch_predictor$predict_rsp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageF_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  (!near_mem$imem_valid ||
	   NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_75_ETC___d1782))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1803)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1807)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1811)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1815)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1819)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1823)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1827)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1831)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1835)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1839)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1843)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1847)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1851)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1855)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1884)
	$write("unknown trap Exc_Code %d", near_mem$imem_exc_code);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_771_AND_near_mem_imem_valid_AND_ETC___d1797)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageF_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  (!near_mem$imem_valid ||
	   NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_75_ETC___d1782))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_753_OR_ETC___d1788)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageF_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $display("----------------");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && cur_verbosity__h2644 != 4'd0)
	$display("%0d: CPU.reset_complete", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("    CPU_StageF.enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       pc_reset_value,
	       v__h20777,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h  m_old_pc:",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("tagged Invalid ", "");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && cur_verbosity__h2644 != 4'd0)
	$display("    fa_restart: RUNNING with PC = 0x%0h", pc_reset_value);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$display("%0d: CPU.rl_stage2_nonpipe", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("    CPU_StageF.enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       csr_regfile$csr_trap_actions[193:130],
	       v__h20777,
	       csr_regfile$csr_trap_actions[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h  m_old_pc:",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("tagged Invalid ", "");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe && cur_verbosity__h2644 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 value__h6734,
		 stage2_rg_stage2[299:268],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe && cur_verbosity__h2644 != 4'd0)
	$display("    mcause:0x%0h  epc 0x%0h  tval:0x%0h  new pc 0x%0h, new mstatus 0x%0h",
		 csr_regfile$csr_trap_actions[65:2],
		 value__h6734,
		 value__h6795,
		 csr_regfile$csr_trap_actions[193:130],
		 csr_regfile$csr_trap_actions[129:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$display("%0d:  CPU.rl_stage1_CSRR_W", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W && csr_regfile$access_permitted_1 &&
	  cur_verbosity__h2644 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage1_rg_stage_input[400:337],
		 stage1_rg_stage_input[263:232],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W && csr_regfile$access_permitted_1 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$display("    S1: write CSRRW/CSRRWI Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d",
		 stage1_rg_stage_input_BITS_263_TO_232__q28[19:15],
		 rs1_val__h25921,
		 stage1_rg_stage_input_BITS_263_TO_232__q28[31:20],
		 csr_regfile$read_csr[63:0],
		 stage1_rg_stage_input_BITS_263_TO_232__q28[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W && !csr_regfile$access_permitted_1 &&
	  cur_verbosity__h2644 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage1_rg_stage_input[400:337],
		 stage1_rg_stage_input[263:232],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W && !csr_regfile$access_permitted_1 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$display("    rl_stage1_CSRR_W: Trap on CSR permissions: Rs1 %0d Rs1_val 0x%0h csr 0x%0h Rd %0d",
		 stage1_rg_stage_input_BITS_263_TO_232__q28[19:15],
		 rs1_val__h25921,
		 stage1_rg_stage_input_BITS_263_TO_232__q28[31:20],
		 stage1_rg_stage_input_BITS_263_TO_232__q28[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$display("%0d:  CPU.rl_stage1_CSRR_S_or_C",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  csr_regfile$access_permitted_2 &&
	  cur_verbosity__h2644 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage1_rg_stage_input[400:337],
		 stage1_rg_stage_input[263:232],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  csr_regfile$access_permitted_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$display("    S1: write CSRR_S_or_C: Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d",
		 stage1_rg_stage_input_BITS_263_TO_232__q28[19:15],
		 rs1_val__h26414,
		 stage1_rg_stage_input_BITS_263_TO_232__q28[31:20],
		 csr_regfile$read_csr[63:0],
		 stage1_rg_stage_input_BITS_263_TO_232__q28[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  !csr_regfile$access_permitted_2 &&
	  cur_verbosity__h2644 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage1_rg_stage_input[400:337],
		 stage1_rg_stage_input[263:232],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  !csr_regfile$access_permitted_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$display("    rl_stage1_CSRR_S_or_C: Trap on CSR permissions: Rs1 %0d Rs1_val 0x%0h csr 0x%0h Rd %0d",
		 stage1_rg_stage_input_BITS_263_TO_232__q28[19:15],
		 rs1_val__h26414,
		 stage1_rg_stage_input_BITS_263_TO_232__q28[31:20],
		 stage1_rg_stage_input_BITS_263_TO_232__q28[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("    CPU_StageF.enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       x_out_next_pc__h7429,
	       v__h20777,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h  m_old_pc:",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("tagged Invalid ", "");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$display("%0d: rl_stage1_restart_after_csrrx: minstret:%0d  pc:%0x  cur_priv:%0d  epoch:%0d",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$read_csr_minstret,
		 x_out_next_pc__h7429,
		 rg_cur_priv,
		 v__h20777);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$display("%0d:  CPU.rl_stage1_xRET", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("    CPU_StageF.enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       csr_regfile$csr_ret_actions[129:66],
	       v__h20777,
	       csr_regfile$csr_ret_actions[65:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h  m_old_pc:",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("tagged Invalid ", "");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET && cur_verbosity__h2644 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage1_rg_stage_input[400:337],
		 stage1_rg_stage_input[263:232],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET && cur_verbosity__h2644 != 4'd0)
	$display("    xRET: next_pc:0x%0h  new mstatus:0x%0h  new priv:%0d",
		 csr_regfile$csr_ret_actions[129:66],
		 csr_regfile$csr_ret_actions[63:0],
		 csr_regfile$csr_ret_actions[65:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$display("%0d:  CPU.rl_stage1_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I && cur_verbosity__h2644 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage1_rg_stage_input[400:337],
		 stage1_rg_stage_input[263:232],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$display("%0d: CPU.rl_stage1_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$display("%0d:  CPU.rl_finish_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("    CPU_StageF.enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       rg_next_pc,
	       v__h20777,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h  m_old_pc:",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("tagged Invalid ", "");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$display("    CPU.rl_finish_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$display("%0d:  CPU.rl_stage1_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE && cur_verbosity__h2644 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage1_rg_stage_input[400:337],
		 stage1_rg_stage_input[263:232],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$display("%0d: CPU.rl_stage1_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$display("%0d:  CPU.rl_finish_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("    CPU_StageF.enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       rg_next_pc,
	       v__h20777,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h  m_old_pc:",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("tagged Invalid ", "");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$display("    CPU.rl_finish_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$display("%0d:  CPU.rl_finish_SFENCE_VMA",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("    CPU_StageF.enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       rg_next_pc,
	       v__h20777,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h  m_old_pc:",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("tagged Invalid ", "");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$display("    CPU.rl_finish_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$display("%0d:  CPU.rl_stage1_WFI", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI && cur_verbosity__h2644 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage1_rg_stage_input[400:337],
		 stage1_rg_stage_input[263:232],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$display("    CPU.rl_stage1_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$display("%0d:  CPU.rl_WFI_resume", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume && cur_verbosity__h2644 != 4'd0)
	$display("    WFI resume");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("    CPU_StageF.enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       rg_next_pc,
	       v__h20777,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h  m_old_pc:",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("tagged Invalid ", "");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_from_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$display("%0d:  CPU.rl_reset_from_WFI", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$display("%0d:  CPU.rl_stage1_trap", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("    CPU_StageF.enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       csr_regfile$csr_trap_actions[193:130],
	       v__h20777,
	       csr_regfile$csr_trap_actions[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h  m_old_pc:",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("tagged Invalid ", "");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_00_72_OR_NOT_stage1_rg_s_ETC___d2286)
	$display("%0d: CPU.rl_stage1_trap: Tight infinite trap loop: pc 0x%0x instr 0x%08x",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$csr_trap_actions[193:130],
		 stage1_rg_stage_input[263:232]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_00_72_OR_NOT_stage1_rg_s_ETC___d2286)
	$display("CPI: %0d.%0d = (%0d/%0d) since last 'continue'",
		 cpi__h33034,
		 cpifrac__h33035,
		 delta_CPI_cycles__h33030,
		 _theResult____h33032);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_00_72_OR_NOT_stage1_rg_s_ETC___d2286)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap && cur_verbosity__h2644 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage1_rg_stage_input[400:337],
		 stage1_rg_stage_input[263:232],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap && cur_verbosity__h2644 != 4'd0)
	$display("%0d: CPU.rl_stage1_trap: priv:%0d  mcause:0x%0h  epc:0x%0h",
		 csr_regfile$read_csr_mcycle,
		 rg_cur_priv,
		 csr_regfile$csr_trap_actions[65:2],
		 stage1_rg_stage_input[400:337]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap && cur_verbosity__h2644 != 4'd0)
	$display("    tval:0x%0h  new pc:0x%0h  new mstatus:0x%0h",
		 value__h10732,
		 csr_regfile$csr_trap_actions[193:130],
		 csr_regfile$csr_trap_actions[129:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$display("%0d:  CPU.rl_stage1_interrupt",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("    CPU_StageF.enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       csr_regfile$csr_trap_actions[193:130],
	       v__h20777,
	       csr_regfile$csr_trap_actions[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h  m_old_pc:",
	       csr_regfile$csr_trap_actions[84],
	       csr_regfile$csr_trap_actions[85],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("tagged Invalid ", "");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt && cur_verbosity__h2644 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage1_rg_stage_input[400:337],
		 stage1_rg_stage_input[263:232],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt && cur_verbosity__h2644 != 4'd0)
	$display("%0d: CPU.rl_stage1_interrupt: epc 0x%0h  next PC 0x%0h  new_priv %0d  new mstatus 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 stage1_rg_stage_input[400:337],
		 csr_regfile$csr_trap_actions[193:130],
		 csr_regfile$csr_trap_actions[1:0],
		 csr_regfile$csr_trap_actions[129:66]);
    if (WILL_FIRE_RL_imem_rl_assert_fail)
      $display("ERROR: CPU_Fetch_C: imem32.is_i32_not_i16 is False");
    if (WILL_FIRE_RL_imem_rl_assert_fail) $finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$display("%0d: CPU.rl_pipe", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[76] &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46 &&
	  stage3_rg_stage3[69])
	$display("    S3.fa_deq: write FRd 0x%0h, rd_val 0x%0h",
		 stage3_rg_stage3[75:71],
		 stage3_rg_stage3[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[76] &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46 &&
	  !stage3_rg_stage3[69])
	$display("    S3.fa_deq: write GRd 0x%0h, rd_val 0x%0h",
		 stage3_rg_stage3[75:71],
		 stage3_rg_stage3[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("    S3.enq: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("data_to_Stage3 {pc:%h  instr:%h  priv:%0d\n",
	       stage2_rg_stage2[363:300],
	       stage2_rg_stage2[299:268],
	       stage2_rg_stage2[365:364]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("        rd_valid:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46 &&
	  stage2_rg_stage2[267:265] != 3'd0 &&
	  IF_stage2_rg_stage2_04_BITS_267_TO_265_05_EQ_1_ETC___d155)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46 &&
	  (stage2_rg_stage2[267:265] == 3'd0 ||
	   IF_stage2_rg_stage2_04_BITS_267_TO_265_05_EQ_1_ETC___d165))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46 &&
	  stage2_rg_stage2[267:265] != 3'd0 &&
	  stage2_rg_stage2[267:265] != 3'd1 &&
	  stage2_rg_stage2[267:265] != 3'd4 &&
	  stage2_rg_stage2[267:265] != 3'd2 &&
	  stage2_rg_stage2[267:265] != 3'd3)
	$write("  fflags: %05b",
	       "'h%h",
	       x_out_data_to_stage3_fpr_flags__h6491);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46 &&
	  (stage2_rg_stage2[267:265] == 3'd0 ||
	   stage2_rg_stage2[267:265] == 3'd1 ||
	   stage2_rg_stage2[267:265] == 3'd4 ||
	   stage2_rg_stage2[267:265] == 3'd2 ||
	   stage2_rg_stage2[267:265] == 3'd3))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d2010)
	$write("  frd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h6488,
	       x_out_data_to_stage3_rd_val__h6492);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d2012)
	$write("  grd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h6488,
	       x_out_data_to_stage3_rd_val__h6492);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_03_THEN_IF_stage2_rg_stage2__ETC___d139 == 2'd2 &&
	  cur_verbosity__h2644 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage2_rg_stage2[363:300],
		 stage2_rg_stage2[299:268],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_rg_halt_939_940_AND_NOT_csr_regfile_interr_ETC___d1951 &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 == 4'd0 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$display("    rl_pipe: Discarding stage1 due to redirection");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_rg_halt_939_940_AND_NOT_csr_regfile_interr_ETC___d1951 &&
	  IF_stage1_rg_stage_input_01_BIT_334_02_EQ_rg_e_ETC___d943 != 4'd0 &&
	  IF_NOT_stage1_rg_full_00_72_OR_NOT_stage1_rg_s_ETC___d2019 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$display("    CPU_Stage2.enq (Data_Stage1_to_Stage2)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2090 &&
	  stageD_rg_full &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$display("    CPU_Stage1.enq: 0x%08x", stageD_rg_data[232:169]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2131 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$display("    CPU_StageD.enq (Data_StageF_to_StageD)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2131 &&
	  stageF_rg_epoch != rg_epoch)
	$display("%d: fa_assert_eq: ASSERTION FAILURE: %s",
		 csr_regfile$read_csr_mcycle,
		 "StageF output epoch == CPU.rg_epoch");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2131 &&
	  stageF_rg_epoch != rg_epoch)
	$display("    v1 = %0d", stageF_rg_epoch);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2131 &&
	  stageF_rg_epoch != rg_epoch)
	$display("    v2 = %0d", rg_epoch);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2131 &&
	  stageF_rg_epoch != rg_epoch)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2144)
	$write("    StageF redirected by Stage1: new_epoch:%0d  next_pc:%0h  m_old_pc:",
	       v__h20777,
	       x_out_next_pc__h7429);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2144)
	$write("tagged Valid ", "'h%h", stage1_rg_stage_input[400:337]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2144)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2131 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("    CPU_StageF.enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       next_pc__h24373,
	       epoch__h24371,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2131 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h  m_old_pc:",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2150)
	$write("tagged Invalid ", "");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2131 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46 &&
	  stage1_rg_full_00_AND_NOT_stage1_rg_stage_inpu_ETC___d2140 &&
	  !IF_IF_stage1_rg_stage_input_01_BITS_151_TO_145_ETC___d1355)
	$write("tagged Valid ", "'h%h", stage1_rg_stage_input[400:337]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_NOT_rg_halt_939_940_AND_NOT_csr_regfile_int_ETC___d2131 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$display("%0d:  CPU.rl_stage1_SFENCE_VMA",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA && cur_verbosity__h2644 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage1_rg_stage_input[400:337],
		 stage1_rg_stage_input[263:232],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d46)
	$display("%0d: CPU.rl_stage1_SFENCE_VMA",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$write("CPU: Bluespec  RISC-V  Flute  v3.0");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start) $display(" (RV64)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("Copyright (c) 2016-2019 Bluespec, Inc. All Rights Reserved.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start && cur_verbosity__h2644 != 4'd0)
	$display("%0d: CPU.rl_reset_start", csr_regfile$read_csr_mcycle);
  end
  // synopsys translate_on
endmodule  // mkCPU

